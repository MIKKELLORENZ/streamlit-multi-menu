/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { Streamlit } from "./streamlit";
import { ArrowTable } from "./ArrowTable";
import { EXAMPLE_DF } from "./mock_data";
import { tick } from "./test_utils";
describe("Streamlit", function () {
    test("setComponentReady register listeners only once", function () {
        jest.spyOn(window, "addEventListener");
        Streamlit.setComponentReady();
        Streamlit.setComponentReady();
        expect(jest.mocked(window.addEventListener).mock.calls).toHaveLength(1);
    });
    test("setComponentReady sends message to parent window", function () {
        jest.spyOn(window.parent, "postMessage");
        Streamlit.setComponentReady();
        Streamlit.setComponentReady();
        expect(jest.mocked(window.parent.postMessage).mock.calls).toEqual([
            [
                {
                    apiVersion: 1,
                    isStreamlitMessage: true,
                    type: "streamlit:componentReady",
                },
                "*",
            ],
            [
                {
                    apiVersion: 1,
                    isStreamlitMessage: true,
                    type: "streamlit:componentReady",
                },
                "*",
            ],
        ]);
    });
    test("setFrameHeight sends height to parent window", function () {
        jest.spyOn(window.parent, "postMessage");
        Object.defineProperty(document.body, "scrollHeight", {
            value: 42,
            configurable: true,
        });
        Streamlit.setFrameHeight();
        expect(jest.mocked(window.parent.postMessage).mock.calls[0]).toEqual([
            {
                height: 42,
                isStreamlitMessage: true,
                type: "streamlit:setFrameHeight",
            },
            "*",
        ]);
        // @ts-expect-error
        delete document.body.scrollHeight;
    });
    test("setFrameHeight sends height to parent window only if changed", function () {
        jest.spyOn(window.parent, "postMessage");
        var scrollHeight = 42;
        Object.defineProperty(document.body, "scrollHeight", {
            get: function () { return scrollHeight; },
            configurable: true,
        });
        Streamlit.setFrameHeight();
        expect(jest.mocked(window.parent.postMessage).mock.calls).toHaveLength(1);
        // Assert that the value is not sent again if height does not change
        Streamlit.setFrameHeight();
        expect(jest.mocked(window.parent.postMessage).mock.calls).toHaveLength(1);
        // Ensure that the NEW value is sent again
        scrollHeight = 420;
        Streamlit.setFrameHeight();
        expect(jest.mocked(window.parent.postMessage).mock.calls).toHaveLength(2);
        expect(jest.mocked(window.parent.postMessage).mock.calls[1][0].height).toEqual(scrollHeight);
    });
    test("setComponentValue should support arrowTable", function () {
        jest.spyOn(window.parent, "postMessage");
        var table = new ArrowTable(EXAMPLE_DF.data, EXAMPLE_DF.index, EXAMPLE_DF.columns);
        Streamlit.setComponentValue(table);
        expect(jest.mocked(window.parent.postMessage).mock.calls).toHaveLength(1);
        var parentMessage = jest.mocked(window.parent.postMessage).mock
            .calls[0][0];
        // Assert content of message except value. The value is too complex for
        // a simple assertion, so we will validate it separately
        var value = parentMessage.value;
        delete parentMessage.value;
        expect(parentMessage).toEqual({
            dataType: "dataframe",
            isStreamlitMessage: true,
            type: "streamlit:setComponentValue",
        });
        // Assert that the table has the expected characteristic.
        var newTable = new ArrowTable(value.data, value.index, value.columns);
        expect(newTable.rows).toEqual(6);
        expect(newTable.columns).toEqual(4);
        expect(newTable.headerRows).toEqual(1);
        expect(newTable.headerColumns).toEqual(1);
    });
    test("setComponentValue should support JSON values", function () {
        jest.spyOn(window.parent, "postMessage");
        Streamlit.setComponentValue("123");
        expect(jest.mocked(window.parent.postMessage).mock.calls).toHaveLength(1);
        expect(jest.mocked(window.parent.postMessage).mock.calls[0]).toEqual([
            {
                dataType: "json",
                isStreamlitMessage: true,
                type: "streamlit:setComponentValue",
                value: "123",
            },
            "*",
        ]);
    });
    test("setComponentValue should support array buffers", function () {
        jest.spyOn(window.parent, "postMessage");
        var value = new Uint8Array([1, 2]).buffer;
        Streamlit.setComponentValue(value);
        expect(jest.mocked(window.parent.postMessage).mock.calls).toHaveLength(1);
        expect(jest.mocked(window.parent.postMessage).mock.calls[0]).toEqual([
            {
                dataType: "bytes",
                isStreamlitMessage: true,
                type: "streamlit:setComponentValue",
                value: new Uint8Array([1, 2]),
            },
            "*",
        ]);
    });
    test("setComponentValue should support typed arrays", function () {
        jest.spyOn(window.parent, "postMessage");
        var value = new Uint8Array([1, 2]);
        Streamlit.setComponentValue(value);
        expect(jest.mocked(window.parent.postMessage).mock.calls).toHaveLength(1);
        expect(jest.mocked(window.parent.postMessage).mock.calls[0]).toEqual([
            {
                dataType: "bytes",
                isStreamlitMessage: true,
                type: "streamlit:setComponentValue",
                value: new Uint8Array([1, 2]),
            },
            "*",
        ]);
    });
    test("data from the parent frame is received and propagated as an event", function () { return __awaiter(void 0, void 0, void 0, function () {
        var streamlitEventsListener, renderEvent;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    streamlitEventsListener = jest.fn();
                    Streamlit.events.addEventListener("streamlit:render", streamlitEventsListener);
                    Streamlit.setComponentReady();
                    window.postMessage({ type: "streamlit:render", args: {} }, "*");
                    return [4 /*yield*/, tick()];
                case 1:
                    _a.sent();
                    expect(streamlitEventsListener.mock.calls).toHaveLength(1);
                    renderEvent = streamlitEventsListener.mock.calls[0][0];
                    expect(renderEvent.detail).toEqual({
                        args: {},
                        disabled: false,
                        theme: undefined,
                    });
                    return [2 /*return*/];
            }
        });
    }); });
    test("The parent frame can set the theme", function () { return __awaiter(void 0, void 0, void 0, function () {
        var streamlitEventsListener, theme, renderEvent;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    streamlitEventsListener = jest.fn();
                    Streamlit.events.addEventListener("streamlit:render", streamlitEventsListener);
                    Streamlit.setComponentReady();
                    theme = {
                        base: "red",
                        primaryColor: "blue",
                        backgroundColor: "green",
                        secondaryBackgroundColor: "purple",
                        textColor: "black",
                        font: "Courier New",
                    };
                    window.postMessage({ type: "streamlit:render", args: {}, theme: theme }, "*");
                    return [4 /*yield*/, tick()];
                case 1:
                    _a.sent();
                    expect(streamlitEventsListener.mock.calls).toHaveLength(1);
                    renderEvent = streamlitEventsListener.mock.calls[0][0];
                    expect(renderEvent.detail.theme).toEqual(theme);
                    expect(getComputedStyle(document.documentElement).getPropertyValue("--primary-color")).toEqual(theme.primaryColor);
                    expect(getComputedStyle(document.documentElement).getPropertyValue("--background-color")).toEqual(theme.backgroundColor);
                    expect(getComputedStyle(document.documentElement).getPropertyValue("--secondary-background-color")).toEqual(theme.secondaryBackgroundColor);
                    expect(getComputedStyle(document.documentElement).getPropertyValue("--text-color")).toEqual(theme.textColor);
                    return [2 /*return*/];
            }
        });
    }); });
    test("The parent frame can sent plain arguments", function () { return __awaiter(void 0, void 0, void 0, function () {
        var streamlitEventsListener, renderEvent;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    streamlitEventsListener = jest.fn();
                    Streamlit.events.addEventListener("streamlit:render", streamlitEventsListener);
                    Streamlit.setComponentReady();
                    window.postMessage({
                        type: "streamlit:render",
                        args: { textValue: "smile", numberValue: 42 },
                    }, "*");
                    return [4 /*yield*/, tick()];
                case 1:
                    _a.sent();
                    expect(streamlitEventsListener.mock.calls).toHaveLength(1);
                    renderEvent = streamlitEventsListener.mock.calls[0][0];
                    expect(renderEvent.detail.args).toEqual({
                        numberValue: 42,
                        textValue: "smile",
                    });
                    return [2 /*return*/];
            }
        });
    }); });
    test("The parent frame can sent dataframe", function () { return __awaiter(void 0, void 0, void 0, function () {
        var streamlitEventsListener, renderEvent, arrowTable;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    streamlitEventsListener = jest.fn();
                    Streamlit.events.addEventListener("streamlit:render", streamlitEventsListener);
                    Streamlit.setComponentReady();
                    window.postMessage({
                        type: "streamlit:render",
                        args: {},
                        dfs: [
                            {
                                key: "first-df",
                                value: {
                                    data: {
                                        data: EXAMPLE_DF.data,
                                        index: EXAMPLE_DF.index,
                                        columns: EXAMPLE_DF.columns,
                                    },
                                },
                            },
                        ],
                    }, "*");
                    return [4 /*yield*/, tick()];
                case 1:
                    _a.sent();
                    expect(streamlitEventsListener.mock.calls).toHaveLength(1);
                    renderEvent = streamlitEventsListener.mock.calls[0][0];
                    arrowTable = renderEvent.detail.args["first-df"];
                    expect(arrowTable.rows).toEqual(6);
                    expect(arrowTable.columns).toEqual(4);
                    expect(arrowTable.headerRows).toEqual(1);
                    expect(arrowTable.headerColumns).toEqual(1);
                    return [2 /*return*/];
            }
        });
    }); });
    test("The parent frame can disable component", function () { return __awaiter(void 0, void 0, void 0, function () {
        var streamlitEventsListener, renderEvent;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    streamlitEventsListener = jest.fn();
                    Streamlit.events.addEventListener("streamlit:render", streamlitEventsListener);
                    Streamlit.setComponentReady();
                    window.postMessage({ type: "streamlit:render", args: {}, disabled: true }, "*");
                    return [4 /*yield*/, tick()];
                case 1:
                    _a.sent();
                    expect(streamlitEventsListener.mock.calls).toHaveLength(1);
                    renderEvent = streamlitEventsListener.mock.calls[0][0];
                    expect(renderEvent.detail.disabled).toEqual(true);
                    return [2 /*return*/];
            }
        });
    }); });
});
