{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { __asyncValues, __awaiter } from \"tslib\";\nimport { Table } from '../table.mjs';\nimport { MAGIC } from './message.mjs';\nimport { Vector } from '../vector.mjs';\nimport { DataType } from '../type.mjs';\nimport { Message } from './metadata/message.mjs';\nimport * as metadata from './metadata/message.mjs';\nimport { FileBlock, Footer } from './metadata/file.mjs';\nimport { MessageHeader, MetadataVersion } from '../enum.mjs';\nimport { compareSchemas } from '../visitor/typecomparator.mjs';\nimport { AsyncByteQueue } from '../io/stream.mjs';\nimport { VectorAssembler } from '../visitor/vectorassembler.mjs';\nimport { JSONTypeAssembler } from '../visitor/jsontypeassembler.mjs';\nimport { JSONVectorAssembler } from '../visitor/jsonvectorassembler.mjs';\nimport { toUint8Array } from '../util/buffer.mjs';\nimport { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from '../recordbatch.mjs';\nimport { ReadableInterop } from '../io/interfaces.mjs';\nimport { isPromise, isAsyncIterable, isWritableDOMStream, isWritableNodeStream, isIterable, isObject } from '../util/compat.mjs';\nexport class RecordBatchWriter extends ReadableInterop {\n  constructor(options) {\n    super();\n    this._position = 0;\n    this._started = false;\n    // @ts-ignore\n    this._sink = new AsyncByteQueue();\n    this._schema = null;\n    this._dictionaryBlocks = [];\n    this._recordBatchBlocks = [];\n    this._dictionaryDeltaOffsets = new Map();\n    isObject(options) || (options = {\n      autoDestroy: true,\n      writeLegacyIpcFormat: false\n    });\n    this._autoDestroy = typeof options.autoDestroy === 'boolean' ? options.autoDestroy : true;\n    this._writeLegacyIpcFormat = typeof options.writeLegacyIpcFormat === 'boolean' ? options.writeLegacyIpcFormat : false;\n  }\n  /** @nocollapse */\n  // @ts-ignore\n  static throughNode(options) {\n    throw new Error(`\"throughNode\" not available in this environment`);\n  }\n  /** @nocollapse */\n  static throughDOM(\n  // @ts-ignore\n  writableStrategy,\n  // @ts-ignore\n  readableStrategy) {\n    throw new Error(`\"throughDOM\" not available in this environment`);\n  }\n  toString(sync = false) {\n    return this._sink.toString(sync);\n  }\n  toUint8Array(sync = false) {\n    return this._sink.toUint8Array(sync);\n  }\n  writeAll(input) {\n    if (isPromise(input)) {\n      return input.then(x => this.writeAll(x));\n    } else if (isAsyncIterable(input)) {\n      return writeAllAsync(this, input);\n    }\n    return writeAll(this, input);\n  }\n  get closed() {\n    return this._sink.closed;\n  }\n  [Symbol.asyncIterator]() {\n    return this._sink[Symbol.asyncIterator]();\n  }\n  toDOMStream(options) {\n    return this._sink.toDOMStream(options);\n  }\n  toNodeStream(options) {\n    return this._sink.toNodeStream(options);\n  }\n  close() {\n    return this.reset()._sink.close();\n  }\n  abort(reason) {\n    return this.reset()._sink.abort(reason);\n  }\n  finish() {\n    this._autoDestroy ? this.close() : this.reset(this._sink, this._schema);\n    return this;\n  }\n  reset(sink = this._sink, schema = null) {\n    if (sink === this._sink || sink instanceof AsyncByteQueue) {\n      this._sink = sink;\n    } else {\n      this._sink = new AsyncByteQueue();\n      if (sink && isWritableDOMStream(sink)) {\n        this.toDOMStream({\n          type: 'bytes'\n        }).pipeTo(sink);\n      } else if (sink && isWritableNodeStream(sink)) {\n        this.toNodeStream({\n          objectMode: false\n        }).pipe(sink);\n      }\n    }\n    if (this._started && this._schema) {\n      this._writeFooter(this._schema);\n    }\n    this._started = false;\n    this._dictionaryBlocks = [];\n    this._recordBatchBlocks = [];\n    this._dictionaryDeltaOffsets = new Map();\n    if (!schema || !compareSchemas(schema, this._schema)) {\n      if (schema == null) {\n        this._position = 0;\n        this._schema = null;\n      } else {\n        this._started = true;\n        this._schema = schema;\n        this._writeSchema(schema);\n      }\n    }\n    return this;\n  }\n  write(payload) {\n    let schema = null;\n    if (!this._sink) {\n      throw new Error(`RecordBatchWriter is closed`);\n    } else if (payload == null) {\n      return this.finish() && undefined;\n    } else if (payload instanceof Table && !(schema = payload.schema)) {\n      return this.finish() && undefined;\n    } else if (payload instanceof RecordBatch && !(schema = payload.schema)) {\n      return this.finish() && undefined;\n    }\n    if (schema && !compareSchemas(schema, this._schema)) {\n      if (this._started && this._autoDestroy) {\n        return this.close();\n      }\n      this.reset(this._sink, schema);\n    }\n    if (payload instanceof RecordBatch) {\n      if (!(payload instanceof _InternalEmptyPlaceholderRecordBatch)) {\n        this._writeRecordBatch(payload);\n      }\n    } else if (payload instanceof Table) {\n      this.writeAll(payload.batches);\n    } else if (isIterable(payload)) {\n      this.writeAll(payload);\n    }\n  }\n  _writeMessage(message, alignment = 8) {\n    const a = alignment - 1;\n    const buffer = Message.encode(message);\n    const flatbufferSize = buffer.byteLength;\n    const prefixSize = !this._writeLegacyIpcFormat ? 8 : 4;\n    const alignedSize = flatbufferSize + prefixSize + a & ~a;\n    const nPaddingBytes = alignedSize - flatbufferSize - prefixSize;\n    if (message.headerType === MessageHeader.RecordBatch) {\n      this._recordBatchBlocks.push(new FileBlock(alignedSize, message.bodyLength, this._position));\n    } else if (message.headerType === MessageHeader.DictionaryBatch) {\n      this._dictionaryBlocks.push(new FileBlock(alignedSize, message.bodyLength, this._position));\n    }\n    // If not in legacy pre-0.15.0 mode, write the stream continuation indicator\n    if (!this._writeLegacyIpcFormat) {\n      this._write(Int32Array.of(-1));\n    }\n    // Write the flatbuffer size prefix including padding\n    this._write(Int32Array.of(alignedSize - prefixSize));\n    // Write the flatbuffer\n    if (flatbufferSize > 0) {\n      this._write(buffer);\n    }\n    // Write any padding\n    return this._writePadding(nPaddingBytes);\n  }\n  _write(chunk) {\n    if (this._started) {\n      const buffer = toUint8Array(chunk);\n      if (buffer && buffer.byteLength > 0) {\n        this._sink.write(buffer);\n        this._position += buffer.byteLength;\n      }\n    }\n    return this;\n  }\n  _writeSchema(schema) {\n    return this._writeMessage(Message.from(schema));\n  }\n  // @ts-ignore\n  _writeFooter(schema) {\n    // eos bytes\n    return this._writeLegacyIpcFormat ? this._write(Int32Array.of(0)) : this._write(Int32Array.of(-1, 0));\n  }\n  _writeMagic() {\n    return this._write(MAGIC);\n  }\n  _writePadding(nBytes) {\n    return nBytes > 0 ? this._write(new Uint8Array(nBytes)) : this;\n  }\n  _writeRecordBatch(batch) {\n    const {\n      byteLength,\n      nodes,\n      bufferRegions,\n      buffers\n    } = VectorAssembler.assemble(batch);\n    const recordBatch = new metadata.RecordBatch(batch.numRows, nodes, bufferRegions);\n    const message = Message.from(recordBatch, byteLength);\n    return this._writeDictionaries(batch)._writeMessage(message)._writeBodyBuffers(buffers);\n  }\n  _writeDictionaryBatch(dictionary, id, isDelta = false) {\n    this._dictionaryDeltaOffsets.set(id, dictionary.length + (this._dictionaryDeltaOffsets.get(id) || 0));\n    const {\n      byteLength,\n      nodes,\n      bufferRegions,\n      buffers\n    } = VectorAssembler.assemble(new Vector([dictionary]));\n    const recordBatch = new metadata.RecordBatch(dictionary.length, nodes, bufferRegions);\n    const dictionaryBatch = new metadata.DictionaryBatch(recordBatch, id, isDelta);\n    const message = Message.from(dictionaryBatch, byteLength);\n    return this._writeMessage(message)._writeBodyBuffers(buffers);\n  }\n  _writeBodyBuffers(buffers) {\n    let buffer;\n    let size, padding;\n    for (let i = -1, n = buffers.length; ++i < n;) {\n      if ((buffer = buffers[i]) && (size = buffer.byteLength) > 0) {\n        this._write(buffer);\n        if ((padding = (size + 7 & ~7) - size) > 0) {\n          this._writePadding(padding);\n        }\n      }\n    }\n    return this;\n  }\n  _writeDictionaries(batch) {\n    for (let [id, dictionary] of batch.dictionaries) {\n      let offset = this._dictionaryDeltaOffsets.get(id) || 0;\n      if (offset === 0 || (dictionary = dictionary === null || dictionary === void 0 ? void 0 : dictionary.slice(offset)).length > 0) {\n        for (const data of dictionary.data) {\n          this._writeDictionaryBatch(data, id, offset > 0);\n          offset += data.length;\n        }\n      }\n    }\n    return this;\n  }\n}\n/** @ignore */\nexport class RecordBatchStreamWriter extends RecordBatchWriter {\n  /** @nocollapse */\n  static writeAll(input, options) {\n    const writer = new RecordBatchStreamWriter(options);\n    if (isPromise(input)) {\n      return input.then(x => writer.writeAll(x));\n    } else if (isAsyncIterable(input)) {\n      return writeAllAsync(writer, input);\n    }\n    return writeAll(writer, input);\n  }\n}\n/** @ignore */\nexport class RecordBatchFileWriter extends RecordBatchWriter {\n  /** @nocollapse */\n  static writeAll(input) {\n    const writer = new RecordBatchFileWriter();\n    if (isPromise(input)) {\n      return input.then(x => writer.writeAll(x));\n    } else if (isAsyncIterable(input)) {\n      return writeAllAsync(writer, input);\n    }\n    return writeAll(writer, input);\n  }\n  constructor() {\n    super();\n    this._autoDestroy = true;\n  }\n  // @ts-ignore\n  _writeSchema(schema) {\n    return this._writeMagic()._writePadding(2);\n  }\n  _writeFooter(schema) {\n    const buffer = Footer.encode(new Footer(schema, MetadataVersion.V4, this._recordBatchBlocks, this._dictionaryBlocks));\n    return super._writeFooter(schema) // EOS bytes for sequential readers\n    ._write(buffer) // Write the flatbuffer\n    ._write(Int32Array.of(buffer.byteLength)) // then the footer size suffix\n    ._writeMagic(); // then the magic suffix\n  }\n}\n/** @ignore */\nexport class RecordBatchJSONWriter extends RecordBatchWriter {\n  constructor() {\n    super();\n    this._autoDestroy = true;\n    this._recordBatches = [];\n    this._dictionaries = [];\n  }\n  /** @nocollapse */\n  static writeAll(input) {\n    return new RecordBatchJSONWriter().writeAll(input);\n  }\n  _writeMessage() {\n    return this;\n  }\n  // @ts-ignore\n  _writeFooter(schema) {\n    return this;\n  }\n  _writeSchema(schema) {\n    return this._write(`{\\n  \"schema\": ${JSON.stringify({\n      fields: schema.fields.map(field => fieldToJSON(field))\n    }, null, 2)}`);\n  }\n  _writeDictionaries(batch) {\n    if (batch.dictionaries.size > 0) {\n      this._dictionaries.push(batch);\n    }\n    return this;\n  }\n  _writeDictionaryBatch(dictionary, id, isDelta = false) {\n    this._dictionaryDeltaOffsets.set(id, dictionary.length + (this._dictionaryDeltaOffsets.get(id) || 0));\n    this._write(this._dictionaryBlocks.length === 0 ? `    ` : `,\\n    `);\n    this._write(`${dictionaryBatchToJSON(dictionary, id, isDelta)}`);\n    this._dictionaryBlocks.push(new FileBlock(0, 0, 0));\n    return this;\n  }\n  _writeRecordBatch(batch) {\n    this._writeDictionaries(batch);\n    this._recordBatches.push(batch);\n    return this;\n  }\n  close() {\n    if (this._dictionaries.length > 0) {\n      this._write(`,\\n  \"dictionaries\": [\\n`);\n      for (const batch of this._dictionaries) {\n        super._writeDictionaries(batch);\n      }\n      this._write(`\\n  ]`);\n    }\n    if (this._recordBatches.length > 0) {\n      for (let i = -1, n = this._recordBatches.length; ++i < n;) {\n        this._write(i === 0 ? `,\\n  \"batches\": [\\n    ` : `,\\n    `);\n        this._write(`${recordBatchToJSON(this._recordBatches[i])}`);\n        this._recordBatchBlocks.push(new FileBlock(0, 0, 0));\n      }\n      this._write(`\\n  ]`);\n    }\n    if (this._schema) {\n      this._write(`\\n}`);\n    }\n    this._dictionaries = [];\n    this._recordBatches = [];\n    return super.close();\n  }\n}\n/** @ignore */\nfunction writeAll(writer, input) {\n  let chunks = input;\n  if (input instanceof Table) {\n    chunks = input.batches;\n    writer.reset(undefined, input.schema);\n  }\n  for (const batch of chunks) {\n    writer.write(batch);\n  }\n  return writer.finish();\n}\n/** @ignore */\nfunction writeAllAsync(writer, batches) {\n  var batches_1, batches_1_1;\n  var e_1, _a;\n  return __awaiter(this, void 0, void 0, function* () {\n    try {\n      for (batches_1 = __asyncValues(batches); batches_1_1 = yield batches_1.next(), !batches_1_1.done;) {\n        const batch = batches_1_1.value;\n        writer.write(batch);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (batches_1_1 && !batches_1_1.done && (_a = batches_1.return)) yield _a.call(batches_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    return writer.finish();\n  });\n}\n/** @ignore */\nfunction fieldToJSON({\n  name,\n  type,\n  nullable\n}) {\n  const assembler = new JSONTypeAssembler();\n  return {\n    'name': name,\n    'nullable': nullable,\n    'type': assembler.visit(type),\n    'children': (type.children || []).map(field => fieldToJSON(field)),\n    'dictionary': !DataType.isDictionary(type) ? undefined : {\n      'id': type.id,\n      'isOrdered': type.isOrdered,\n      'indexType': assembler.visit(type.indices)\n    }\n  };\n}\n/** @ignore */\nfunction dictionaryBatchToJSON(dictionary, id, isDelta = false) {\n  const [columns] = JSONVectorAssembler.assemble(new RecordBatch({\n    [id]: dictionary\n  }));\n  return JSON.stringify({\n    'id': id,\n    'isDelta': isDelta,\n    'data': {\n      'count': dictionary.length,\n      'columns': columns\n    }\n  }, null, 2);\n}\n/** @ignore */\nfunction recordBatchToJSON(records) {\n  const [columns] = JSONVectorAssembler.assemble(records);\n  return JSON.stringify({\n    'count': records.numRows,\n    'columns': columns\n  }, null, 2);\n}","map":{"version":3,"names":["Table","MAGIC","Vector","DataType","Message","metadata","FileBlock","Footer","MessageHeader","MetadataVersion","compareSchemas","AsyncByteQueue","VectorAssembler","JSONTypeAssembler","JSONVectorAssembler","toUint8Array","RecordBatch","_InternalEmptyPlaceholderRecordBatch","ReadableInterop","isPromise","isAsyncIterable","isWritableDOMStream","isWritableNodeStream","isIterable","isObject","RecordBatchWriter","constructor","options","_position","_started","_sink","_schema","_dictionaryBlocks","_recordBatchBlocks","_dictionaryDeltaOffsets","Map","autoDestroy","writeLegacyIpcFormat","_autoDestroy","_writeLegacyIpcFormat","throughNode","Error","throughDOM","writableStrategy","readableStrategy","toString","sync","writeAll","input","then","x","writeAllAsync","closed","Symbol","asyncIterator","toDOMStream","toNodeStream","close","reset","abort","reason","finish","sink","schema","type","pipeTo","objectMode","pipe","_writeFooter","_writeSchema","write","payload","undefined","_writeRecordBatch","batches","_writeMessage","message","alignment","a","buffer","encode","flatbufferSize","byteLength","prefixSize","alignedSize","nPaddingBytes","headerType","push","bodyLength","DictionaryBatch","_write","Int32Array","of","_writePadding","chunk","from","_writeMagic","nBytes","Uint8Array","batch","nodes","bufferRegions","buffers","assemble","recordBatch","numRows","_writeDictionaries","_writeBodyBuffers","_writeDictionaryBatch","dictionary","id","isDelta","set","length","get","dictionaryBatch","size","padding","i","n","dictionaries","offset","slice","data","RecordBatchStreamWriter","writer","RecordBatchFileWriter","V4","RecordBatchJSONWriter","_recordBatches","_dictionaries","JSON","stringify","fields","map","field","fieldToJSON","dictionaryBatchToJSON","recordBatchToJSON","chunks","batches_1","__asyncValues","batches_1_1","next","done","value","name","nullable","assembler","visit","children","isDictionary","isOrdered","indices","columns","records"],"sources":["C:\\Users\\mvlor\\OneDrive\\Desktop\\custom_component\\streamlit_multi_menu\\template\\streamlit_multi_menu\\frontend\\node_modules\\apache-arrow\\src\\ipc\\writer.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data.js';\nimport { Table } from '../table.js';\nimport { MAGIC } from './message.js';\nimport { Vector } from '../vector.js';\nimport { DataType, TypeMap } from '../type.js';\nimport { Schema, Field } from '../schema.js';\nimport { Message } from './metadata/message.js';\nimport * as metadata from './metadata/message.js';\nimport { FileBlock, Footer } from './metadata/file.js';\nimport { MessageHeader, MetadataVersion } from '../enum.js';\nimport { compareSchemas } from '../visitor/typecomparator.js';\nimport { WritableSink, AsyncByteQueue } from '../io/stream.js';\nimport { VectorAssembler } from '../visitor/vectorassembler.js';\nimport { JSONTypeAssembler } from '../visitor/jsontypeassembler.js';\nimport { JSONVectorAssembler } from '../visitor/jsonvectorassembler.js';\nimport { ArrayBufferViewInput, toUint8Array } from '../util/buffer.js';\nimport { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from '../recordbatch.js';\nimport { Writable, ReadableInterop, ReadableDOMStreamOptions } from '../io/interfaces.js';\nimport { isPromise, isAsyncIterable, isWritableDOMStream, isWritableNodeStream, isIterable, isObject } from '../util/compat.js';\n\nexport interface RecordBatchStreamWriterOptions {\n    /**\n     *\n     */\n    autoDestroy?: boolean;\n    /**\n     * A flag indicating whether the RecordBatchWriter should construct pre-0.15.0\n     * encapsulated IPC Messages, which reserves  4 bytes for the Message metadata\n     * length instead of 8.\n     * @see https://issues.apache.org/jira/browse/ARROW-6313\n     */\n    writeLegacyIpcFormat?: boolean;\n}\n\nexport class RecordBatchWriter<T extends TypeMap = any> extends ReadableInterop<Uint8Array> implements Writable<RecordBatch<T>> {\n\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughNode(options?: import('stream').DuplexOptions & { autoDestroy: boolean }): import('stream').Duplex {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */\n    public static throughDOM<T extends TypeMap>(\n        // @ts-ignore\n        writableStrategy?: QueuingStrategy<RecordBatch<T>> & { autoDestroy: boolean },\n        // @ts-ignore\n        readableStrategy?: { highWaterMark?: number; size?: any }\n    ): { writable: WritableStream<Table<T> | RecordBatch<T>>; readable: ReadableStream<Uint8Array> } {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n\n    constructor(options?: RecordBatchStreamWriterOptions) {\n        super();\n        isObject(options) || (options = { autoDestroy: true, writeLegacyIpcFormat: false });\n        this._autoDestroy = (typeof options.autoDestroy === 'boolean') ? options.autoDestroy : true;\n        this._writeLegacyIpcFormat = (typeof options.writeLegacyIpcFormat === 'boolean') ? options.writeLegacyIpcFormat : false;\n    }\n\n    protected _position = 0;\n    protected _started = false;\n    protected _autoDestroy: boolean;\n    protected _writeLegacyIpcFormat: boolean;\n    // @ts-ignore\n    protected _sink = new AsyncByteQueue();\n    protected _schema: Schema | null = null;\n    protected _dictionaryBlocks: FileBlock[] = [];\n    protected _recordBatchBlocks: FileBlock[] = [];\n    protected _dictionaryDeltaOffsets = new Map<number, number>();\n\n    public toString(sync: true): string;\n    public toString(sync?: false): Promise<string>;\n    public toString(sync: any = false) {\n        return this._sink.toString(sync) as Promise<string> | string;\n    }\n    public toUint8Array(sync: true): Uint8Array;\n    public toUint8Array(sync?: false): Promise<Uint8Array>;\n    public toUint8Array(sync: any = false) {\n        return this._sink.toUint8Array(sync) as Promise<Uint8Array> | Uint8Array;\n    }\n\n    public writeAll(input: Table<T> | Iterable<RecordBatch<T>>): this;\n    public writeAll(input: AsyncIterable<RecordBatch<T>>): Promise<this>;\n    public writeAll(input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<this>;\n    public writeAll(input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<this>;\n    public writeAll(input: PromiseLike<any> | Table<T> | Iterable<RecordBatch<T>> | AsyncIterable<RecordBatch<T>>) {\n        if (isPromise<any>(input)) {\n            return input.then((x) => this.writeAll(x));\n        } else if (isAsyncIterable<RecordBatch<T>>(input)) {\n            return writeAllAsync(this, input);\n        }\n        return writeAll(this, <any>input);\n    }\n\n    public get closed() { return this._sink.closed; }\n    public [Symbol.asyncIterator]() { return this._sink[Symbol.asyncIterator](); }\n    public toDOMStream(options?: ReadableDOMStreamOptions) { return this._sink.toDOMStream(options); }\n    public toNodeStream(options?: import('stream').ReadableOptions) { return this._sink.toNodeStream(options); }\n\n    public close() {\n        return this.reset()._sink.close();\n    }\n    public abort(reason?: any) {\n        return this.reset()._sink.abort(reason);\n    }\n    public finish() {\n        this._autoDestroy ? this.close() : this.reset(this._sink, this._schema);\n        return this;\n    }\n    public reset(sink: WritableSink<ArrayBufferViewInput> = this._sink, schema: Schema<T> | null = null) {\n        if ((sink === this._sink) || (sink instanceof AsyncByteQueue)) {\n            this._sink = sink as AsyncByteQueue;\n        } else {\n            this._sink = new AsyncByteQueue();\n            if (sink && isWritableDOMStream(sink)) {\n                this.toDOMStream({ type: 'bytes' }).pipeTo(sink);\n            } else if (sink && isWritableNodeStream(sink)) {\n                this.toNodeStream({ objectMode: false }).pipe(sink);\n            }\n        }\n\n        if (this._started && this._schema) {\n            this._writeFooter(this._schema);\n        }\n\n        this._started = false;\n        this._dictionaryBlocks = [];\n        this._recordBatchBlocks = [];\n        this._dictionaryDeltaOffsets = new Map();\n\n        if (!schema || !(compareSchemas(schema, this._schema))) {\n            if (schema == null) {\n                this._position = 0;\n                this._schema = null;\n            } else {\n                this._started = true;\n                this._schema = schema;\n                this._writeSchema(schema);\n            }\n        }\n\n        return this;\n    }\n\n    public write(payload?: Table<T> | RecordBatch<T> | Iterable<RecordBatch<T>> | null) {\n        let schema: Schema<T> | null = null;\n\n        if (!this._sink) {\n            throw new Error(`RecordBatchWriter is closed`);\n        } else if (payload == null) {\n            return this.finish() && undefined;\n        } else if (payload instanceof Table && !(schema = payload.schema)) {\n            return this.finish() && undefined;\n        } else if (payload instanceof RecordBatch && !(schema = payload.schema)) {\n            return this.finish() && undefined;\n        }\n\n        if (schema && !compareSchemas(schema, this._schema)) {\n            if (this._started && this._autoDestroy) {\n                return this.close();\n            }\n            this.reset(this._sink, schema);\n        }\n\n        if (payload instanceof RecordBatch) {\n            if (!(payload instanceof _InternalEmptyPlaceholderRecordBatch)) {\n                this._writeRecordBatch(payload);\n            }\n        } else if (payload instanceof Table) {\n            this.writeAll(payload.batches);\n        } else if (isIterable(payload)) {\n            this.writeAll(payload);\n        }\n    }\n\n    protected _writeMessage<T extends MessageHeader>(message: Message<T>, alignment = 8) {\n        const a = alignment - 1;\n        const buffer = Message.encode(message);\n        const flatbufferSize = buffer.byteLength;\n        const prefixSize = !this._writeLegacyIpcFormat ? 8 : 4;\n        const alignedSize = (flatbufferSize + prefixSize + a) & ~a;\n        const nPaddingBytes = alignedSize - flatbufferSize - prefixSize;\n\n        if (message.headerType === MessageHeader.RecordBatch) {\n            this._recordBatchBlocks.push(new FileBlock(alignedSize, message.bodyLength, this._position));\n        } else if (message.headerType === MessageHeader.DictionaryBatch) {\n            this._dictionaryBlocks.push(new FileBlock(alignedSize, message.bodyLength, this._position));\n        }\n\n        // If not in legacy pre-0.15.0 mode, write the stream continuation indicator\n        if (!this._writeLegacyIpcFormat) {\n            this._write(Int32Array.of(-1));\n        }\n        // Write the flatbuffer size prefix including padding\n        this._write(Int32Array.of(alignedSize - prefixSize));\n        // Write the flatbuffer\n        if (flatbufferSize > 0) { this._write(buffer); }\n        // Write any padding\n        return this._writePadding(nPaddingBytes);\n    }\n\n    protected _write(chunk: ArrayBufferViewInput) {\n        if (this._started) {\n            const buffer = toUint8Array(chunk);\n            if (buffer && buffer.byteLength > 0) {\n                this._sink.write(buffer);\n                this._position += buffer.byteLength;\n            }\n        }\n        return this;\n    }\n\n    protected _writeSchema(schema: Schema<T>) {\n        return this._writeMessage(Message.from(schema));\n    }\n\n    // @ts-ignore\n    protected _writeFooter(schema: Schema<T>) {\n        // eos bytes\n        return this._writeLegacyIpcFormat\n            ? this._write(Int32Array.of(0))\n            : this._write(Int32Array.of(-1, 0));\n    }\n\n    protected _writeMagic() {\n        return this._write(MAGIC);\n    }\n\n    protected _writePadding(nBytes: number) {\n        return nBytes > 0 ? this._write(new Uint8Array(nBytes)) : this;\n    }\n\n    protected _writeRecordBatch(batch: RecordBatch<T>) {\n        const { byteLength, nodes, bufferRegions, buffers } = VectorAssembler.assemble(batch);\n        const recordBatch = new metadata.RecordBatch(batch.numRows, nodes, bufferRegions);\n        const message = Message.from(recordBatch, byteLength);\n        return this\n            ._writeDictionaries(batch)\n            ._writeMessage(message)\n            ._writeBodyBuffers(buffers);\n    }\n\n    protected _writeDictionaryBatch(dictionary: Data, id: number, isDelta = false) {\n        this._dictionaryDeltaOffsets.set(id, dictionary.length + (this._dictionaryDeltaOffsets.get(id) || 0));\n        const { byteLength, nodes, bufferRegions, buffers } = VectorAssembler.assemble(new Vector([dictionary]));\n        const recordBatch = new metadata.RecordBatch(dictionary.length, nodes, bufferRegions);\n        const dictionaryBatch = new metadata.DictionaryBatch(recordBatch, id, isDelta);\n        const message = Message.from(dictionaryBatch, byteLength);\n        return this\n            ._writeMessage(message)\n            ._writeBodyBuffers(buffers);\n    }\n\n    protected _writeBodyBuffers(buffers: ArrayBufferView[]) {\n        let buffer: ArrayBufferView;\n        let size: number, padding: number;\n        for (let i = -1, n = buffers.length; ++i < n;) {\n            if ((buffer = buffers[i]) && (size = buffer.byteLength) > 0) {\n                this._write(buffer);\n                if ((padding = ((size + 7) & ~7) - size) > 0) {\n                    this._writePadding(padding);\n                }\n            }\n        }\n        return this;\n    }\n\n    protected _writeDictionaries(batch: RecordBatch<T>) {\n        for (let [id, dictionary] of batch.dictionaries) {\n            let offset = this._dictionaryDeltaOffsets.get(id) || 0;\n            if (offset === 0 || (dictionary = dictionary?.slice(offset)).length > 0) {\n                for (const data of dictionary.data) {\n                    this._writeDictionaryBatch(data, id, offset > 0);\n                    offset += data.length;\n                }\n            }\n        }\n        return this;\n    }\n}\n\n/** @ignore */\nexport class RecordBatchStreamWriter<T extends TypeMap = any> extends RecordBatchWriter<T> {\n    public static writeAll<T extends TypeMap = any>(input: Table<T> | Iterable<RecordBatch<T>>, options?: RecordBatchStreamWriterOptions): RecordBatchStreamWriter<T>;\n    public static writeAll<T extends TypeMap = any>(input: AsyncIterable<RecordBatch<T>>, options?: RecordBatchStreamWriterOptions): Promise<RecordBatchStreamWriter<T>>;\n    public static writeAll<T extends TypeMap = any>(input: PromiseLike<AsyncIterable<RecordBatch<T>>>, options?: RecordBatchStreamWriterOptions): Promise<RecordBatchStreamWriter<T>>;\n    public static writeAll<T extends TypeMap = any>(input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>, options?: RecordBatchStreamWriterOptions): Promise<RecordBatchStreamWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends TypeMap = any>(input: any, options?: RecordBatchStreamWriterOptions) {\n        const writer = new RecordBatchStreamWriter<T>(options);\n        if (isPromise<any>(input)) {\n            return input.then((x) => writer.writeAll(x));\n        } else if (isAsyncIterable<RecordBatch<T>>(input)) {\n            return writeAllAsync(writer, input);\n        }\n        return writeAll(writer, input);\n    }\n}\n\n/** @ignore */\nexport class RecordBatchFileWriter<T extends TypeMap = any> extends RecordBatchWriter<T> {\n    public static writeAll<T extends TypeMap = any>(input: Table<T> | Iterable<RecordBatch<T>>): RecordBatchFileWriter<T>;\n    public static writeAll<T extends TypeMap = any>(input: AsyncIterable<RecordBatch<T>>): Promise<RecordBatchFileWriter<T>>;\n    public static writeAll<T extends TypeMap = any>(input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<RecordBatchFileWriter<T>>;\n    public static writeAll<T extends TypeMap = any>(input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<RecordBatchFileWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends TypeMap = any>(input: any) {\n        const writer = new RecordBatchFileWriter<T>();\n        if (isPromise<any>(input)) {\n            return input.then((x) => writer.writeAll(x));\n        } else if (isAsyncIterable<RecordBatch<T>>(input)) {\n            return writeAllAsync(writer, input);\n        }\n        return writeAll(writer, input);\n    }\n\n    constructor() {\n        super();\n        this._autoDestroy = true;\n    }\n\n    // @ts-ignore\n    protected _writeSchema(schema: Schema<T>) {\n        return this._writeMagic()._writePadding(2);\n    }\n\n    protected _writeFooter(schema: Schema<T>) {\n        const buffer = Footer.encode(new Footer(\n            schema, MetadataVersion.V4,\n            this._recordBatchBlocks, this._dictionaryBlocks\n        ));\n        return super\n            ._writeFooter(schema) // EOS bytes for sequential readers\n            ._write(buffer) // Write the flatbuffer\n            ._write(Int32Array.of(buffer.byteLength)) // then the footer size suffix\n            ._writeMagic(); // then the magic suffix\n    }\n}\n\n/** @ignore */\nexport class RecordBatchJSONWriter<T extends TypeMap = any> extends RecordBatchWriter<T> {\n\n    public static writeAll<T extends TypeMap = any>(this: typeof RecordBatchWriter, input: Table<T> | Iterable<RecordBatch<T>>): RecordBatchJSONWriter<T>;\n    // @ts-ignore\n    public static writeAll<T extends TypeMap = any>(this: typeof RecordBatchWriter, input: AsyncIterable<RecordBatch<T>>): Promise<RecordBatchJSONWriter<T>>;\n    public static writeAll<T extends TypeMap = any>(this: typeof RecordBatchWriter, input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<RecordBatchJSONWriter<T>>;\n    public static writeAll<T extends TypeMap = any>(this: typeof RecordBatchWriter, input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<RecordBatchJSONWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends TypeMap = any>(this: typeof RecordBatchWriter, input: any) {\n        return new RecordBatchJSONWriter<T>().writeAll(input as any);\n    }\n\n    private _recordBatches: RecordBatch[];\n    private _dictionaries: RecordBatch[];\n\n    constructor() {\n        super();\n        this._autoDestroy = true;\n        this._recordBatches = [];\n        this._dictionaries = [];\n    }\n\n    protected _writeMessage() { return this; }\n    // @ts-ignore\n    protected _writeFooter(schema: Schema<T>) { return this; }\n    protected _writeSchema(schema: Schema<T>) {\n        return this._write(`{\\n  \"schema\": ${JSON.stringify({ fields: schema.fields.map(field => fieldToJSON(field)) }, null, 2)}`);\n    }\n    protected _writeDictionaries(batch: RecordBatch<T>) {\n        if (batch.dictionaries.size > 0) {\n            this._dictionaries.push(batch);\n        }\n        return this;\n    }\n    protected _writeDictionaryBatch(dictionary: Data, id: number, isDelta = false) {\n        this._dictionaryDeltaOffsets.set(id, dictionary.length + (this._dictionaryDeltaOffsets.get(id) || 0));\n        this._write(this._dictionaryBlocks.length === 0 ? `    ` : `,\\n    `);\n        this._write(`${dictionaryBatchToJSON(dictionary, id, isDelta)}`);\n        this._dictionaryBlocks.push(new FileBlock(0, 0, 0));\n        return this;\n    }\n    protected _writeRecordBatch(batch: RecordBatch<T>) {\n        this._writeDictionaries(batch);\n        this._recordBatches.push(batch);\n        return this;\n    }\n    public close() {\n\n        if (this._dictionaries.length > 0) {\n            this._write(`,\\n  \"dictionaries\": [\\n`);\n            for (const batch of this._dictionaries) {\n                super._writeDictionaries(batch);\n            }\n            this._write(`\\n  ]`);\n        }\n\n        if (this._recordBatches.length > 0) {\n            for (let i = -1, n = this._recordBatches.length; ++i < n;) {\n                this._write(i === 0 ? `,\\n  \"batches\": [\\n    ` : `,\\n    `);\n                this._write(`${recordBatchToJSON(this._recordBatches[i])}`);\n                this._recordBatchBlocks.push(new FileBlock(0, 0, 0));\n            }\n            this._write(`\\n  ]`);\n        }\n\n        if (this._schema) {\n            this._write(`\\n}`);\n        }\n\n        this._dictionaries = [];\n        this._recordBatches = [];\n\n        return super.close();\n    }\n}\n\n/** @ignore */\nfunction writeAll<T extends TypeMap = any>(writer: RecordBatchWriter<T>, input: Table<T> | Iterable<RecordBatch<T>>) {\n    let chunks = input as Iterable<RecordBatch<T>>;\n    if (input instanceof Table) {\n        chunks = input.batches;\n        writer.reset(undefined, input.schema);\n    }\n    for (const batch of chunks) {\n        writer.write(batch);\n    }\n    return writer.finish();\n}\n\n/** @ignore */\nasync function writeAllAsync<T extends TypeMap = any>(writer: RecordBatchWriter<T>, batches: AsyncIterable<RecordBatch<T>>) {\n    for await (const batch of batches) {\n        writer.write(batch);\n    }\n    return writer.finish();\n}\n\n/** @ignore */\nfunction fieldToJSON({ name, type, nullable }: Field): Record<string, unknown> {\n    const assembler = new JSONTypeAssembler();\n    return {\n        'name': name, 'nullable': nullable,\n        'type': assembler.visit(type),\n        'children': (type.children || []).map((field: any) => fieldToJSON(field)),\n        'dictionary': !DataType.isDictionary(type) ? undefined : {\n            'id': type.id,\n            'isOrdered': type.isOrdered,\n            'indexType': assembler.visit(type.indices)\n        }\n    };\n}\n\n/** @ignore */\nfunction dictionaryBatchToJSON(dictionary: Data, id: number, isDelta = false) {\n    const [columns] = JSONVectorAssembler.assemble(new RecordBatch({ [id]: dictionary }));\n    return JSON.stringify({\n        'id': id,\n        'isDelta': isDelta,\n        'data': {\n            'count': dictionary.length,\n            'columns': columns\n        }\n    }, null, 2);\n}\n\n/** @ignore */\nfunction recordBatchToJSON(records: RecordBatch) {\n    const [columns] = JSONVectorAssembler.assemble(records);\n    return JSON.stringify({\n        'count': records.numRows,\n        'columns': columns\n    }, null, 2);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}