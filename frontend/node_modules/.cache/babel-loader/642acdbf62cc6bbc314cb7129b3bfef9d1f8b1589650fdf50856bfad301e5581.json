{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { makeData } from '../data.mjs';\nimport { Struct } from '../type.mjs';\nimport { RecordBatch } from '../recordbatch.mjs';\n/** @ignore */\nexport function distributeVectorsIntoRecordBatches(schema, vecs) {\n  return uniformlyDistributeChunksAcrossRecordBatches(schema, vecs.map(v => v.data.concat()));\n}\n/** @ignore */\nfunction uniformlyDistributeChunksAcrossRecordBatches(schema, cols) {\n  const fields = [...schema.fields];\n  const batches = [];\n  const memo = {\n    numBatches: cols.reduce((n, c) => Math.max(n, c.length), 0)\n  };\n  let numBatches = 0,\n    batchLength = 0;\n  let i = -1;\n  const numColumns = cols.length;\n  let child,\n    children = [];\n  while (memo.numBatches-- > 0) {\n    for (batchLength = Number.POSITIVE_INFINITY, i = -1; ++i < numColumns;) {\n      children[i] = child = cols[i].shift();\n      batchLength = Math.min(batchLength, child ? child.length : batchLength);\n    }\n    if (Number.isFinite(batchLength)) {\n      children = distributeChildren(fields, batchLength, children, cols, memo);\n      if (batchLength > 0) {\n        batches[numBatches++] = makeData({\n          type: new Struct(fields),\n          length: batchLength,\n          nullCount: 0,\n          children: children.slice()\n        });\n      }\n    }\n  }\n  return [schema = schema.assign(fields), batches.map(data => new RecordBatch(schema, data))];\n}\n/** @ignore */\nfunction distributeChildren(fields, batchLength, children, columns, memo) {\n  var _a;\n  const nullBitmapSize = (batchLength + 63 & ~63) >> 3;\n  for (let i = -1, n = columns.length; ++i < n;) {\n    const child = children[i];\n    const length = child === null || child === void 0 ? void 0 : child.length;\n    if (length >= batchLength) {\n      if (length === batchLength) {\n        children[i] = child;\n      } else {\n        children[i] = child.slice(0, batchLength);\n        memo.numBatches = Math.max(memo.numBatches, columns[i].unshift(child.slice(batchLength, length - batchLength)));\n      }\n    } else {\n      const field = fields[i];\n      fields[i] = field.clone({\n        nullable: true\n      });\n      children[i] = (_a = child === null || child === void 0 ? void 0 : child._changeLengthAndBackfillNullBitmap(batchLength)) !== null && _a !== void 0 ? _a : makeData({\n        type: field.type,\n        length: batchLength,\n        nullCount: batchLength,\n        nullBitmap: new Uint8Array(nullBitmapSize)\n      });\n    }\n  }\n  return children;\n}","map":{"version":3,"names":["makeData","Struct","RecordBatch","distributeVectorsIntoRecordBatches","schema","vecs","uniformlyDistributeChunksAcrossRecordBatches","map","v","data","concat","cols","fields","batches","memo","numBatches","reduce","n","c","Math","max","length","batchLength","i","numColumns","child","children","Number","POSITIVE_INFINITY","shift","min","isFinite","distributeChildren","type","nullCount","slice","assign","columns","nullBitmapSize","unshift","field","clone","nullable","_a","_changeLengthAndBackfillNullBitmap","nullBitmap","Uint8Array"],"sources":["C:\\Users\\mvlor\\OneDrive\\Desktop\\custom_component\\streamlit_multi_menu\\streamlit_multi_menu\\frontend\\node_modules\\apache-arrow\\src\\util\\recordbatch.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector.js';\nimport { Data, makeData } from '../data.js';\nimport { Struct, TypeMap } from '../type.js';\nimport { Schema, Field } from '../schema.js';\nimport { RecordBatch } from '../recordbatch.js';\n\n/** @ignore */\nexport function distributeVectorsIntoRecordBatches<T extends TypeMap = any>(schema: Schema<T>, vecs: Vector<T[keyof T]>[]): [Schema<T>, RecordBatch<T>[]] {\n    return uniformlyDistributeChunksAcrossRecordBatches<T>(schema, vecs.map((v) => v.data.concat()));\n}\n\n/** @ignore */\nfunction uniformlyDistributeChunksAcrossRecordBatches<T extends TypeMap = any>(schema: Schema<T>, cols: Data<T[keyof T]>[][]): [Schema<T>, RecordBatch<T>[]] {\n\n    const fields = [...schema.fields];\n    const batches = [] as Data<Struct<T>>[];\n    const memo = { numBatches: cols.reduce((n, c) => Math.max(n, c.length), 0) };\n\n    let numBatches = 0, batchLength = 0;\n    let i = -1;\n    const numColumns = cols.length;\n    let child: Data<T[keyof T]>, children: Data<T[keyof T]>[] = [];\n\n    while (memo.numBatches-- > 0) {\n\n        for (batchLength = Number.POSITIVE_INFINITY, i = -1; ++i < numColumns;) {\n            children[i] = child = cols[i].shift()!;\n            batchLength = Math.min(batchLength, child ? child.length : batchLength);\n        }\n\n        if (Number.isFinite(batchLength)) {\n            children = distributeChildren(fields, batchLength, children, cols, memo);\n            if (batchLength > 0) {\n                batches[numBatches++] = makeData({\n                    type: new Struct(fields),\n                    length: batchLength,\n                    nullCount: 0,\n                    children: children.slice()\n                });\n            }\n        }\n    }\n\n    return [\n        schema = schema.assign(fields),\n        batches.map((data) => new RecordBatch(schema, data))\n    ];\n}\n\n/** @ignore */\nfunction distributeChildren<T extends TypeMap = any>(\n    fields: Field<T[keyof T]>[],\n    batchLength: number,\n    children: Data<T[keyof T]>[],\n    columns: Data<T[keyof T]>[][],\n    memo: { numBatches: number }\n) {\n    const nullBitmapSize = ((batchLength + 63) & ~63) >> 3;\n    for (let i = -1, n = columns.length; ++i < n;) {\n        const child = children[i];\n        const length = child?.length;\n        if (length >= batchLength) {\n            if (length === batchLength) {\n                children[i] = child;\n            } else {\n                children[i] = child.slice(0, batchLength);\n                memo.numBatches = Math.max(memo.numBatches, columns[i].unshift(\n                    child.slice(batchLength, length - batchLength)\n                ));\n            }\n        } else {\n            const field = fields[i];\n            fields[i] = field.clone({ nullable: true });\n            children[i] = child?._changeLengthAndBackfillNullBitmap(batchLength) ?? makeData({\n                type: field.type,\n                length: batchLength,\n                nullCount: batchLength,\n                nullBitmap: new Uint8Array(nullBitmapSize)\n            }) as Data<T[keyof T]>;\n        }\n    }\n    return children;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}