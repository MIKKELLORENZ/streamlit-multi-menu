{"ast":null,"code":"/* istanbul ignore file */\nimport { Visitor } from '../visitor.mjs';\nimport { TimeUnit, UnionMode } from '../enum.mjs';\n/** @ignore */\nconst sum = (x, y) => x + y;\n/** @ignore */\nexport class GetByteLengthVisitor extends Visitor {\n  visitNull(____, _) {\n    return 0;\n  }\n  visitInt(data, _) {\n    return data.type.bitWidth / 8;\n  }\n  visitFloat(data, _) {\n    return data.type.ArrayType.BYTES_PER_ELEMENT;\n  }\n  visitBool(____, _) {\n    return 1 / 8;\n  }\n  visitDecimal(data, _) {\n    return data.type.bitWidth / 8;\n  }\n  visitDate(data, _) {\n    return (data.type.unit + 1) * 4;\n  }\n  visitTime(data, _) {\n    return data.type.bitWidth / 8;\n  }\n  visitTimestamp(data, _) {\n    return data.type.unit === TimeUnit.SECOND ? 4 : 8;\n  }\n  visitInterval(data, _) {\n    return (data.type.unit + 1) * 4;\n  }\n  visitStruct(data, i) {\n    return data.children.reduce((total, child) => total + instance.visit(child, i), 0);\n  }\n  visitFixedSizeBinary(data, _) {\n    return data.type.byteWidth;\n  }\n  visitMap(data, i) {\n    // 4 + 4 for the indices\n    return 8 + data.children.reduce((total, child) => total + instance.visit(child, i), 0);\n  }\n  visitDictionary(data, i) {\n    var _a;\n    return data.type.indices.bitWidth / 8 + (((_a = data.dictionary) === null || _a === void 0 ? void 0 : _a.getByteLength(data.values[i])) || 0);\n  }\n}\n/** @ignore */\nconst getUtf8ByteLength = ({\n  valueOffsets\n}, index) => {\n  // 4 + 4 for the indices, `end - start` for the data bytes\n  return 8 + (valueOffsets[index + 1] - valueOffsets[index]);\n};\n/** @ignore */\nconst getBinaryByteLength = ({\n  valueOffsets\n}, index) => {\n  // 4 + 4 for the indices, `end - start` for the data bytes\n  return 8 + (valueOffsets[index + 1] - valueOffsets[index]);\n};\n/** @ignore */\nconst getListByteLength = ({\n  valueOffsets,\n  stride,\n  children\n}, index) => {\n  const child = children[0];\n  const {\n    [index * stride]: start\n  } = valueOffsets;\n  const {\n    [index * stride + 1]: end\n  } = valueOffsets;\n  const visit = instance.getVisitFn(child.type);\n  const slice = child.slice(start, end - start);\n  let size = 8; // 4 + 4 for the indices\n  for (let idx = -1, len = end - start; ++idx < len;) {\n    size += visit(slice, idx);\n  }\n  return size;\n};\n/** @ignore */\nconst getFixedSizeListByteLength = ({\n  stride,\n  children\n}, index) => {\n  const child = children[0];\n  const slice = child.slice(index * stride, stride);\n  const visit = instance.getVisitFn(child.type);\n  let size = 0;\n  for (let idx = -1, len = slice.length; ++idx < len;) {\n    size += visit(slice, idx);\n  }\n  return size;\n};\n/* istanbul ignore next */\n/** @ignore */\nconst getUnionByteLength = (data, index) => {\n  return data.type.mode === UnionMode.Dense ? getDenseUnionByteLength(data, index) : getSparseUnionByteLength(data, index);\n};\n/** @ignore */\nconst getDenseUnionByteLength = ({\n  type,\n  children,\n  typeIds,\n  valueOffsets\n}, index) => {\n  const childIndex = type.typeIdToChildIndex[typeIds[index]];\n  // 4 for the typeId, 4 for the valueOffsets, then the child at the offset\n  return 8 + instance.visit(children[childIndex], valueOffsets[index]);\n};\n/** @ignore */\nconst getSparseUnionByteLength = ({\n  children\n}, index) => {\n  // 4 for the typeId, then once each for the children at this index\n  return 4 + instance.visitMany(children, children.map(() => index)).reduce(sum, 0);\n};\nGetByteLengthVisitor.prototype.visitUtf8 = getUtf8ByteLength;\nGetByteLengthVisitor.prototype.visitBinary = getBinaryByteLength;\nGetByteLengthVisitor.prototype.visitList = getListByteLength;\nGetByteLengthVisitor.prototype.visitFixedSizeList = getFixedSizeListByteLength;\nGetByteLengthVisitor.prototype.visitUnion = getUnionByteLength;\nGetByteLengthVisitor.prototype.visitDenseUnion = getDenseUnionByteLength;\nGetByteLengthVisitor.prototype.visitSparseUnion = getSparseUnionByteLength;\n/** @ignore */\nexport const instance = new GetByteLengthVisitor();","map":{"version":3,"names":["Visitor","TimeUnit","UnionMode","sum","x","y","GetByteLengthVisitor","visitNull","____","_","visitInt","data","type","bitWidth","visitFloat","ArrayType","BYTES_PER_ELEMENT","visitBool","visitDecimal","visitDate","unit","visitTime","visitTimestamp","SECOND","visitInterval","visitStruct","i","children","reduce","total","child","instance","visit","visitFixedSizeBinary","byteWidth","visitMap","visitDictionary","indices","_a","dictionary","getByteLength","values","getUtf8ByteLength","valueOffsets","index","getBinaryByteLength","getListByteLength","stride","start","end","getVisitFn","slice","size","idx","len","getFixedSizeListByteLength","length","getUnionByteLength","mode","Dense","getDenseUnionByteLength","getSparseUnionByteLength","typeIds","childIndex","typeIdToChildIndex","visitMany","map","prototype","visitUtf8","visitBinary","visitList","visitFixedSizeList","visitUnion","visitDenseUnion","visitSparseUnion"],"sources":["C:\\Users\\mvlor\\OneDrive\\Desktop\\custom_component\\multi_menu\\template\\multi_menu\\frontend\\node_modules\\apache-arrow\\src\\visitor\\bytelength.ts"],"sourcesContent":["/* istanbul ignore file */\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/* eslint-disable unicorn/no-array-callback-reference */\n\nimport { Data } from '../data.js';\nimport { Visitor } from '../visitor.js';\nimport { TypeToDataType } from '../interfaces.js';\nimport { Type, TimeUnit, UnionMode } from '../enum.js';\nimport {\n    DataType, Dictionary,\n    Float, Int, Date_, Interval, Time, Timestamp,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary,\n    List, FixedSizeList, Map_, Struct, Union, DenseUnion, SparseUnion,\n} from '../type.js';\n\n/** @ignore */ const sum = (x: number, y: number) => x + y;\n\n/** @ignore */\nexport interface GetByteLengthVisitor extends Visitor {\n    visit<T extends DataType>(node: Data<T>, index: number): number;\n    visitMany<T extends DataType>(nodes: Data<T>[], index: number[]): number[];\n    getVisitFn<T extends DataType>(node: Data<T> | T): (data: Data<T>, index: number) => number;\n    getVisitFn<T extends Type>(node: T): (data: Data<TypeToDataType<T>>, index: number) => number;\n    visitBinary<T extends Binary>(data: Data<T>, index: number): number;\n    visitUtf8<T extends Utf8>(data: Data<T>, index: number): number;\n    visitList<T extends List>(data: Data<T>, index: number): number;\n    visitDenseUnion<T extends DenseUnion>(data: Data<T>, index: number): number;\n    visitSparseUnion<T extends SparseUnion>(data: Data<T>, index: number): number;\n    visitFixedSizeList<T extends FixedSizeList>(data: Data<T>, index: number): number;\n}\n\n/** @ignore */\nexport class GetByteLengthVisitor extends Visitor {\n    public visitNull(____: Data<Null>, _: number) {\n        return 0;\n    }\n    public visitInt(data: Data<Int>, _: number) {\n        return data.type.bitWidth / 8;\n    }\n    public visitFloat(data: Data<Float>, _: number) {\n        return data.type.ArrayType.BYTES_PER_ELEMENT;\n    }\n    public visitBool(____: Data<Bool>, _: number) {\n        return 1 / 8;\n    }\n    public visitDecimal(data: Data<Decimal>, _: number) {\n        return data.type.bitWidth / 8;\n    }\n    public visitDate(data: Data<Date_>, _: number) {\n        return (data.type.unit + 1) * 4;\n    }\n    public visitTime(data: Data<Time>, _: number) {\n        return data.type.bitWidth / 8;\n    }\n    public visitTimestamp(data: Data<Timestamp>, _: number) {\n        return data.type.unit === TimeUnit.SECOND ? 4 : 8;\n    }\n    public visitInterval(data: Data<Interval>, _: number) {\n        return (data.type.unit + 1) * 4;\n    }\n    public visitStruct(data: Data<Struct>, i: number) {\n        return data.children.reduce((total, child) => total + instance.visit(child, i), 0);\n    }\n    public visitFixedSizeBinary(data: Data<FixedSizeBinary>, _: number) {\n        return data.type.byteWidth;\n    }\n    public visitMap(data: Data<Map_>, i: number) {\n        // 4 + 4 for the indices\n        return 8 + data.children.reduce((total, child) => total + instance.visit(child, i), 0);\n    }\n    public visitDictionary(data: Data<Dictionary>, i: number) {\n        return (data.type.indices.bitWidth / 8) + (data.dictionary?.getByteLength(data.values[i]) || 0);\n    }\n}\n\n/** @ignore */\nconst getUtf8ByteLength = <T extends Utf8>({ valueOffsets }: Data<T>, index: number): number => {\n    // 4 + 4 for the indices, `end - start` for the data bytes\n    return 8 + (valueOffsets[index + 1] - valueOffsets[index]);\n};\n\n/** @ignore */\nconst getBinaryByteLength = <T extends Binary>({ valueOffsets }: Data<T>, index: number): number => {\n    // 4 + 4 for the indices, `end - start` for the data bytes\n    return 8 + (valueOffsets[index + 1] - valueOffsets[index]);\n};\n\n/** @ignore */\nconst getListByteLength = <T extends List>({ valueOffsets, stride, children }: Data<T>, index: number): number => {\n    const child: Data<T['valueType']> = children[0];\n    const { [index * stride]: start } = valueOffsets;\n    const { [index * stride + 1]: end } = valueOffsets;\n    const visit = instance.getVisitFn(child.type);\n    const slice = child.slice(start, end - start);\n    let size = 8; // 4 + 4 for the indices\n    for (let idx = -1, len = end - start; ++idx < len;) {\n        size += visit(slice, idx);\n    }\n    return size;\n};\n\n/** @ignore */\nconst getFixedSizeListByteLength = <T extends FixedSizeList>({ stride, children }: Data<T>, index: number): number => {\n    const child: Data<T['valueType']> = children[0];\n    const slice = child.slice(index * stride, stride);\n    const visit = instance.getVisitFn(child.type);\n    let size = 0;\n    for (let idx = -1, len = slice.length; ++idx < len;) {\n        size += visit(slice, idx);\n    }\n    return size;\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getUnionByteLength = <\n    D extends Data<Union> | Data<DenseUnion> | Data<SparseUnion>\n>(data: D, index: number): number => {\n    return data.type.mode === UnionMode.Dense ?\n        getDenseUnionByteLength(data as Data<DenseUnion>, index) :\n        getSparseUnionByteLength(data as Data<SparseUnion>, index);\n};\n\n/** @ignore */\nconst getDenseUnionByteLength = <T extends DenseUnion>({ type, children, typeIds, valueOffsets }: Data<T>, index: number): number => {\n    const childIndex = type.typeIdToChildIndex[typeIds[index]];\n    // 4 for the typeId, 4 for the valueOffsets, then the child at the offset\n    return 8 + instance.visit(children[childIndex], valueOffsets[index]);\n};\n\n/** @ignore */\nconst getSparseUnionByteLength = <T extends SparseUnion>({ children }: Data<T>, index: number): number => {\n    // 4 for the typeId, then once each for the children at this index\n    return 4 + instance.visitMany(children, children.map(() => index)).reduce(sum, 0);\n};\n\nGetByteLengthVisitor.prototype.visitUtf8 = getUtf8ByteLength;\nGetByteLengthVisitor.prototype.visitBinary = getBinaryByteLength;\nGetByteLengthVisitor.prototype.visitList = getListByteLength;\nGetByteLengthVisitor.prototype.visitFixedSizeList = getFixedSizeListByteLength;\nGetByteLengthVisitor.prototype.visitUnion = getUnionByteLength;\nGetByteLengthVisitor.prototype.visitDenseUnion = getDenseUnionByteLength;\nGetByteLengthVisitor.prototype.visitSparseUnion = getSparseUnionByteLength;\n\n/** @ignore */\nexport const instance = new GetByteLengthVisitor();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}