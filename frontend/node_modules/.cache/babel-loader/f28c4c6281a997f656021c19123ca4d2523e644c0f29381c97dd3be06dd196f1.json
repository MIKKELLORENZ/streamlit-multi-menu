{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n/* eslint-disable unicorn/no-array-for-each */\nimport { Field } from '../schema.mjs';\nimport { Builder } from '../builder.mjs';\nimport { Struct } from '../type.mjs';\n/** @ignore */\nexport class StructBuilder extends Builder {\n  setValue(index, value) {\n    const {\n      children,\n      type\n    } = this;\n    switch (Array.isArray(value) || value.constructor) {\n      case true:\n        return type.children.forEach((_, i) => children[i].set(index, value[i]));\n      case Map:\n        return type.children.forEach((f, i) => children[i].set(index, value.get(f.name)));\n      default:\n        return type.children.forEach((f, i) => children[i].set(index, value[f.name]));\n    }\n  }\n  /** @inheritdoc */\n  setValid(index, valid) {\n    if (!super.setValid(index, valid)) {\n      this.children.forEach(child => child.setValid(index, valid));\n    }\n    return valid;\n  }\n  addChild(child, name = `${this.numChildren}`) {\n    const childIndex = this.children.push(child);\n    this.type = new Struct([...this.type.children, new Field(name, child.type, true)]);\n    return childIndex;\n  }\n}","map":{"version":3,"names":["Field","Builder","Struct","StructBuilder","setValue","index","value","children","type","Array","isArray","constructor","forEach","_","i","set","Map","f","get","name","setValid","valid","child","addChild","numChildren","childIndex","push"],"sources":["C:\\Users\\mvlor\\OneDrive\\Desktop\\custom_component\\streamlit_multi_menu\\template\\streamlit_multi_menu\\frontend\\node_modules\\apache-arrow\\src\\builder\\struct.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/* eslint-disable unicorn/no-array-for-each */\n\nimport { Field } from '../schema.js';\nimport { Builder } from '../builder.js';\nimport { Struct, TypeMap } from '../type.js';\n\n/** @ignore */\nexport class StructBuilder<T extends TypeMap = any, TNull = any> extends Builder<Struct<T>, TNull> {\n    public setValue(index: number, value: Struct<T>['TValue']) {\n        const { children, type } = this;\n        switch (Array.isArray(value) || value.constructor) {\n            case true: return type.children.forEach((_, i) => children[i].set(index, value[i]));\n            case Map: return type.children.forEach((f, i) => children[i].set(index, value.get(f.name)));\n            default: return type.children.forEach((f, i) => children[i].set(index, value[f.name]));\n        }\n    }\n\n    /** @inheritdoc */\n    public setValid(index: number, valid: boolean) {\n        if (!super.setValid(index, valid)) {\n            this.children.forEach((child) => child.setValid(index, valid));\n        }\n        return valid;\n    }\n\n    public addChild(child: Builder, name = `${this.numChildren}`) {\n        const childIndex = this.children.push(child);\n        this.type = new Struct([...this.type.children, new Field(name, child.type, true)]);\n        return childIndex;\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,SAASA,KAAK,QAAQ,eAAe;AACrC,SAASC,OAAO,QAAQ,gBAAgB;AACxC,SAASC,MAAM,QAAiB,aAAa;AAE7C;AACA,OAAM,MAAOC,aAAoD,SAAQF,OAAyB;EACvFG,QAAQA,CAACC,KAAa,EAAEC,KAA0B;IACrD,MAAM;MAAEC,QAAQ;MAAEC;IAAI,CAAE,GAAG,IAAI;IAC/B,QAAQC,KAAK,CAACC,OAAO,CAACJ,KAAK,CAAC,IAAIA,KAAK,CAACK,WAAW;MAC7C,KAAK,IAAI;QAAE,OAAOH,IAAI,CAACD,QAAQ,CAACK,OAAO,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKP,QAAQ,CAACO,CAAC,CAAC,CAACC,GAAG,CAACV,KAAK,EAAEC,KAAK,CAACQ,CAAC,CAAC,CAAC,CAAC;MACnF,KAAKE,GAAG;QAAE,OAAOR,IAAI,CAACD,QAAQ,CAACK,OAAO,CAAC,CAACK,CAAC,EAAEH,CAAC,KAAKP,QAAQ,CAACO,CAAC,CAAC,CAACC,GAAG,CAACV,KAAK,EAAEC,KAAK,CAACY,GAAG,CAACD,CAAC,CAACE,IAAI,CAAC,CAAC,CAAC;MAC3F;QAAS,OAAOX,IAAI,CAACD,QAAQ,CAACK,OAAO,CAAC,CAACK,CAAC,EAAEH,CAAC,KAAKP,QAAQ,CAACO,CAAC,CAAC,CAACC,GAAG,CAACV,KAAK,EAAEC,KAAK,CAACW,CAAC,CAACE,IAAI,CAAC,CAAC,CAAC;;EAE9F;EAEA;EACOC,QAAQA,CAACf,KAAa,EAAEgB,KAAc;IACzC,IAAI,CAAC,KAAK,CAACD,QAAQ,CAACf,KAAK,EAAEgB,KAAK,CAAC,EAAE;MAC/B,IAAI,CAACd,QAAQ,CAACK,OAAO,CAAEU,KAAK,IAAKA,KAAK,CAACF,QAAQ,CAACf,KAAK,EAAEgB,KAAK,CAAC,CAAC;;IAElE,OAAOA,KAAK;EAChB;EAEOE,QAAQA,CAACD,KAAc,EAAEH,IAAI,GAAG,GAAG,IAAI,CAACK,WAAW,EAAE;IACxD,MAAMC,UAAU,GAAG,IAAI,CAAClB,QAAQ,CAACmB,IAAI,CAACJ,KAAK,CAAC;IAC5C,IAAI,CAACd,IAAI,GAAG,IAAIN,MAAM,CAAC,CAAC,GAAG,IAAI,CAACM,IAAI,CAACD,QAAQ,EAAE,IAAIP,KAAK,CAACmB,IAAI,EAAEG,KAAK,CAACd,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;IAClF,OAAOiB,UAAU;EACrB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}