{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Type, Precision, DateUnit, TimeUnit, IntervalUnit, UnionMode } from './enum.mjs';\nimport { DataType } from './type.mjs';\nexport class Visitor {\n  visitMany(nodes, ...args) {\n    return nodes.map((node, i) => this.visit(node, ...args.map(x => x[i])));\n  }\n  visit(...args) {\n    return this.getVisitFn(args[0], false).apply(this, args);\n  }\n  getVisitFn(node, throwIfNotFound = true) {\n    return getVisitFn(this, node, throwIfNotFound);\n  }\n  getVisitFnByTypeId(typeId, throwIfNotFound = true) {\n    return getVisitFnByTypeId(this, typeId, throwIfNotFound);\n  }\n  visitNull(_node, ..._args) {\n    return null;\n  }\n  visitBool(_node, ..._args) {\n    return null;\n  }\n  visitInt(_node, ..._args) {\n    return null;\n  }\n  visitFloat(_node, ..._args) {\n    return null;\n  }\n  visitUtf8(_node, ..._args) {\n    return null;\n  }\n  visitBinary(_node, ..._args) {\n    return null;\n  }\n  visitFixedSizeBinary(_node, ..._args) {\n    return null;\n  }\n  visitDate(_node, ..._args) {\n    return null;\n  }\n  visitTimestamp(_node, ..._args) {\n    return null;\n  }\n  visitTime(_node, ..._args) {\n    return null;\n  }\n  visitDecimal(_node, ..._args) {\n    return null;\n  }\n  visitList(_node, ..._args) {\n    return null;\n  }\n  visitStruct(_node, ..._args) {\n    return null;\n  }\n  visitUnion(_node, ..._args) {\n    return null;\n  }\n  visitDictionary(_node, ..._args) {\n    return null;\n  }\n  visitInterval(_node, ..._args) {\n    return null;\n  }\n  visitFixedSizeList(_node, ..._args) {\n    return null;\n  }\n  visitMap(_node, ..._args) {\n    return null;\n  }\n}\n/** @ignore */\nfunction getVisitFn(visitor, node, throwIfNotFound = true) {\n  if (typeof node === 'number') {\n    return getVisitFnByTypeId(visitor, node, throwIfNotFound);\n  }\n  if (typeof node === 'string' && node in Type) {\n    return getVisitFnByTypeId(visitor, Type[node], throwIfNotFound);\n  }\n  if (node && node instanceof DataType) {\n    return getVisitFnByTypeId(visitor, inferDType(node), throwIfNotFound);\n  }\n  if ((node === null || node === void 0 ? void 0 : node.type) && node.type instanceof DataType) {\n    return getVisitFnByTypeId(visitor, inferDType(node.type), throwIfNotFound);\n  }\n  return getVisitFnByTypeId(visitor, Type.NONE, throwIfNotFound);\n}\n/** @ignore */\nfunction getVisitFnByTypeId(visitor, dtype, throwIfNotFound = true) {\n  let fn = null;\n  switch (dtype) {\n    case Type.Null:\n      fn = visitor.visitNull;\n      break;\n    case Type.Bool:\n      fn = visitor.visitBool;\n      break;\n    case Type.Int:\n      fn = visitor.visitInt;\n      break;\n    case Type.Int8:\n      fn = visitor.visitInt8 || visitor.visitInt;\n      break;\n    case Type.Int16:\n      fn = visitor.visitInt16 || visitor.visitInt;\n      break;\n    case Type.Int32:\n      fn = visitor.visitInt32 || visitor.visitInt;\n      break;\n    case Type.Int64:\n      fn = visitor.visitInt64 || visitor.visitInt;\n      break;\n    case Type.Uint8:\n      fn = visitor.visitUint8 || visitor.visitInt;\n      break;\n    case Type.Uint16:\n      fn = visitor.visitUint16 || visitor.visitInt;\n      break;\n    case Type.Uint32:\n      fn = visitor.visitUint32 || visitor.visitInt;\n      break;\n    case Type.Uint64:\n      fn = visitor.visitUint64 || visitor.visitInt;\n      break;\n    case Type.Float:\n      fn = visitor.visitFloat;\n      break;\n    case Type.Float16:\n      fn = visitor.visitFloat16 || visitor.visitFloat;\n      break;\n    case Type.Float32:\n      fn = visitor.visitFloat32 || visitor.visitFloat;\n      break;\n    case Type.Float64:\n      fn = visitor.visitFloat64 || visitor.visitFloat;\n      break;\n    case Type.Utf8:\n      fn = visitor.visitUtf8;\n      break;\n    case Type.Binary:\n      fn = visitor.visitBinary;\n      break;\n    case Type.FixedSizeBinary:\n      fn = visitor.visitFixedSizeBinary;\n      break;\n    case Type.Date:\n      fn = visitor.visitDate;\n      break;\n    case Type.DateDay:\n      fn = visitor.visitDateDay || visitor.visitDate;\n      break;\n    case Type.DateMillisecond:\n      fn = visitor.visitDateMillisecond || visitor.visitDate;\n      break;\n    case Type.Timestamp:\n      fn = visitor.visitTimestamp;\n      break;\n    case Type.TimestampSecond:\n      fn = visitor.visitTimestampSecond || visitor.visitTimestamp;\n      break;\n    case Type.TimestampMillisecond:\n      fn = visitor.visitTimestampMillisecond || visitor.visitTimestamp;\n      break;\n    case Type.TimestampMicrosecond:\n      fn = visitor.visitTimestampMicrosecond || visitor.visitTimestamp;\n      break;\n    case Type.TimestampNanosecond:\n      fn = visitor.visitTimestampNanosecond || visitor.visitTimestamp;\n      break;\n    case Type.Time:\n      fn = visitor.visitTime;\n      break;\n    case Type.TimeSecond:\n      fn = visitor.visitTimeSecond || visitor.visitTime;\n      break;\n    case Type.TimeMillisecond:\n      fn = visitor.visitTimeMillisecond || visitor.visitTime;\n      break;\n    case Type.TimeMicrosecond:\n      fn = visitor.visitTimeMicrosecond || visitor.visitTime;\n      break;\n    case Type.TimeNanosecond:\n      fn = visitor.visitTimeNanosecond || visitor.visitTime;\n      break;\n    case Type.Decimal:\n      fn = visitor.visitDecimal;\n      break;\n    case Type.List:\n      fn = visitor.visitList;\n      break;\n    case Type.Struct:\n      fn = visitor.visitStruct;\n      break;\n    case Type.Union:\n      fn = visitor.visitUnion;\n      break;\n    case Type.DenseUnion:\n      fn = visitor.visitDenseUnion || visitor.visitUnion;\n      break;\n    case Type.SparseUnion:\n      fn = visitor.visitSparseUnion || visitor.visitUnion;\n      break;\n    case Type.Dictionary:\n      fn = visitor.visitDictionary;\n      break;\n    case Type.Interval:\n      fn = visitor.visitInterval;\n      break;\n    case Type.IntervalDayTime:\n      fn = visitor.visitIntervalDayTime || visitor.visitInterval;\n      break;\n    case Type.IntervalYearMonth:\n      fn = visitor.visitIntervalYearMonth || visitor.visitInterval;\n      break;\n    case Type.FixedSizeList:\n      fn = visitor.visitFixedSizeList;\n      break;\n    case Type.Map:\n      fn = visitor.visitMap;\n      break;\n  }\n  if (typeof fn === 'function') return fn;\n  if (!throwIfNotFound) return () => null;\n  throw new Error(`Unrecognized type '${Type[dtype]}'`);\n}\n/** @ignore */\nfunction inferDType(type) {\n  switch (type.typeId) {\n    case Type.Null:\n      return Type.Null;\n    case Type.Int:\n      {\n        const {\n          bitWidth,\n          isSigned\n        } = type;\n        switch (bitWidth) {\n          case 8:\n            return isSigned ? Type.Int8 : Type.Uint8;\n          case 16:\n            return isSigned ? Type.Int16 : Type.Uint16;\n          case 32:\n            return isSigned ? Type.Int32 : Type.Uint32;\n          case 64:\n            return isSigned ? Type.Int64 : Type.Uint64;\n        }\n        // @ts-ignore\n        return Type.Int;\n      }\n    case Type.Float:\n      switch (type.precision) {\n        case Precision.HALF:\n          return Type.Float16;\n        case Precision.SINGLE:\n          return Type.Float32;\n        case Precision.DOUBLE:\n          return Type.Float64;\n      }\n      // @ts-ignore\n      return Type.Float;\n    case Type.Binary:\n      return Type.Binary;\n    case Type.Utf8:\n      return Type.Utf8;\n    case Type.Bool:\n      return Type.Bool;\n    case Type.Decimal:\n      return Type.Decimal;\n    case Type.Time:\n      switch (type.unit) {\n        case TimeUnit.SECOND:\n          return Type.TimeSecond;\n        case TimeUnit.MILLISECOND:\n          return Type.TimeMillisecond;\n        case TimeUnit.MICROSECOND:\n          return Type.TimeMicrosecond;\n        case TimeUnit.NANOSECOND:\n          return Type.TimeNanosecond;\n      }\n      // @ts-ignore\n      return Type.Time;\n    case Type.Timestamp:\n      switch (type.unit) {\n        case TimeUnit.SECOND:\n          return Type.TimestampSecond;\n        case TimeUnit.MILLISECOND:\n          return Type.TimestampMillisecond;\n        case TimeUnit.MICROSECOND:\n          return Type.TimestampMicrosecond;\n        case TimeUnit.NANOSECOND:\n          return Type.TimestampNanosecond;\n      }\n      // @ts-ignore\n      return Type.Timestamp;\n    case Type.Date:\n      switch (type.unit) {\n        case DateUnit.DAY:\n          return Type.DateDay;\n        case DateUnit.MILLISECOND:\n          return Type.DateMillisecond;\n      }\n      // @ts-ignore\n      return Type.Date;\n    case Type.Interval:\n      switch (type.unit) {\n        case IntervalUnit.DAY_TIME:\n          return Type.IntervalDayTime;\n        case IntervalUnit.YEAR_MONTH:\n          return Type.IntervalYearMonth;\n      }\n      // @ts-ignore\n      return Type.Interval;\n    case Type.Map:\n      return Type.Map;\n    case Type.List:\n      return Type.List;\n    case Type.Struct:\n      return Type.Struct;\n    case Type.Union:\n      switch (type.mode) {\n        case UnionMode.Dense:\n          return Type.DenseUnion;\n        case UnionMode.Sparse:\n          return Type.SparseUnion;\n      }\n      // @ts-ignore\n      return Type.Union;\n    case Type.FixedSizeBinary:\n      return Type.FixedSizeBinary;\n    case Type.FixedSizeList:\n      return Type.FixedSizeList;\n    case Type.Dictionary:\n      return Type.Dictionary;\n  }\n  throw new Error(`Unrecognized type '${Type[type.typeId]}'`);\n}\n// Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\nVisitor.prototype.visitInt8 = null;\nVisitor.prototype.visitInt16 = null;\nVisitor.prototype.visitInt32 = null;\nVisitor.prototype.visitInt64 = null;\nVisitor.prototype.visitUint8 = null;\nVisitor.prototype.visitUint16 = null;\nVisitor.prototype.visitUint32 = null;\nVisitor.prototype.visitUint64 = null;\nVisitor.prototype.visitFloat16 = null;\nVisitor.prototype.visitFloat32 = null;\nVisitor.prototype.visitFloat64 = null;\nVisitor.prototype.visitDateDay = null;\nVisitor.prototype.visitDateMillisecond = null;\nVisitor.prototype.visitTimestampSecond = null;\nVisitor.prototype.visitTimestampMillisecond = null;\nVisitor.prototype.visitTimestampMicrosecond = null;\nVisitor.prototype.visitTimestampNanosecond = null;\nVisitor.prototype.visitTimeSecond = null;\nVisitor.prototype.visitTimeMillisecond = null;\nVisitor.prototype.visitTimeMicrosecond = null;\nVisitor.prototype.visitTimeNanosecond = null;\nVisitor.prototype.visitDenseUnion = null;\nVisitor.prototype.visitSparseUnion = null;\nVisitor.prototype.visitIntervalDayTime = null;\nVisitor.prototype.visitIntervalYearMonth = null;","map":{"version":3,"names":["Type","Precision","DateUnit","TimeUnit","IntervalUnit","UnionMode","DataType","Visitor","visitMany","nodes","args","map","node","i","visit","x","getVisitFn","apply","throwIfNotFound","getVisitFnByTypeId","typeId","visitNull","_node","_args","visitBool","visitInt","visitFloat","visitUtf8","visitBinary","visitFixedSizeBinary","visitDate","visitTimestamp","visitTime","visitDecimal","visitList","visitStruct","visitUnion","visitDictionary","visitInterval","visitFixedSizeList","visitMap","visitor","inferDType","type","NONE","dtype","fn","Null","Bool","Int","Int8","visitInt8","Int16","visitInt16","Int32","visitInt32","Int64","visitInt64","Uint8","visitUint8","Uint16","visitUint16","Uint32","visitUint32","Uint64","visitUint64","Float","Float16","visitFloat16","Float32","visitFloat32","Float64","visitFloat64","Utf8","Binary","FixedSizeBinary","Date","DateDay","visitDateDay","DateMillisecond","visitDateMillisecond","Timestamp","TimestampSecond","visitTimestampSecond","TimestampMillisecond","visitTimestampMillisecond","TimestampMicrosecond","visitTimestampMicrosecond","TimestampNanosecond","visitTimestampNanosecond","Time","TimeSecond","visitTimeSecond","TimeMillisecond","visitTimeMillisecond","TimeMicrosecond","visitTimeMicrosecond","TimeNanosecond","visitTimeNanosecond","Decimal","List","Struct","Union","DenseUnion","visitDenseUnion","SparseUnion","visitSparseUnion","Dictionary","Interval","IntervalDayTime","visitIntervalDayTime","IntervalYearMonth","visitIntervalYearMonth","FixedSizeList","Map","Error","bitWidth","isSigned","precision","HALF","SINGLE","DOUBLE","unit","SECOND","MILLISECOND","MICROSECOND","NANOSECOND","DAY","DAY_TIME","YEAR_MONTH","mode","Dense","Sparse","prototype"],"sources":["C:\\Users\\mvlor\\OneDrive\\Desktop\\custom_component\\multi_menu\\template\\multi_menu\\frontend\\node_modules\\apache-arrow\\src\\visitor.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Type, Precision, DateUnit, TimeUnit, IntervalUnit, UnionMode } from './enum.js';\nimport { DataType, Float, Int, Date_, Interval, Time, Timestamp, Union, } from './type.js';\n\nexport abstract class Visitor {\n    public visitMany(nodes: any[], ...args: any[][]) {\n        return nodes.map((node, i) => this.visit(node, ...args.map((x) => x[i])));\n    }\n    public visit(...args: any[]) {\n        return this.getVisitFn(args[0], false).apply(this, args);\n    }\n    public getVisitFn(node: any, throwIfNotFound = true) {\n        return getVisitFn(this, node, throwIfNotFound);\n    }\n    public getVisitFnByTypeId(typeId: Type, throwIfNotFound = true) {\n        return getVisitFnByTypeId(this, typeId, throwIfNotFound);\n    }\n    public visitNull(_node: any, ..._args: any[]): any { return null; }\n    public visitBool(_node: any, ..._args: any[]): any { return null; }\n    public visitInt(_node: any, ..._args: any[]): any { return null; }\n    public visitFloat(_node: any, ..._args: any[]): any { return null; }\n    public visitUtf8(_node: any, ..._args: any[]): any { return null; }\n    public visitBinary(_node: any, ..._args: any[]): any { return null; }\n    public visitFixedSizeBinary(_node: any, ..._args: any[]): any { return null; }\n    public visitDate(_node: any, ..._args: any[]): any { return null; }\n    public visitTimestamp(_node: any, ..._args: any[]): any { return null; }\n    public visitTime(_node: any, ..._args: any[]): any { return null; }\n    public visitDecimal(_node: any, ..._args: any[]): any { return null; }\n    public visitList(_node: any, ..._args: any[]): any { return null; }\n    public visitStruct(_node: any, ..._args: any[]): any { return null; }\n    public visitUnion(_node: any, ..._args: any[]): any { return null; }\n    public visitDictionary(_node: any, ..._args: any[]): any { return null; }\n    public visitInterval(_node: any, ..._args: any[]): any { return null; }\n    public visitFixedSizeList(_node: any, ..._args: any[]): any { return null; }\n    public visitMap(_node: any, ..._args: any[]): any { return null; }\n}\n\n/** @ignore */\nfunction getVisitFn<T extends DataType>(visitor: Visitor, node: any, throwIfNotFound = true) {\n    if (typeof node === 'number') {\n        return getVisitFnByTypeId(visitor, node, throwIfNotFound);\n    }\n    if (typeof node === 'string' && (node in Type)) {\n        return getVisitFnByTypeId(visitor, Type[node as keyof typeof Type], throwIfNotFound);\n    }\n    if (node && (node instanceof DataType)) {\n        return getVisitFnByTypeId(visitor, inferDType(node as T), throwIfNotFound);\n    }\n    if (node?.type && (node.type instanceof DataType)) {\n        return getVisitFnByTypeId(visitor, inferDType(node.type as T), throwIfNotFound);\n    }\n    return getVisitFnByTypeId(visitor, Type.NONE, throwIfNotFound);\n}\n\n/** @ignore */\nfunction getVisitFnByTypeId(visitor: Visitor, dtype: Type, throwIfNotFound = true) {\n    let fn: any = null;\n    switch (dtype) {\n        case Type.Null: fn = visitor.visitNull; break;\n        case Type.Bool: fn = visitor.visitBool; break;\n        case Type.Int: fn = visitor.visitInt; break;\n        case Type.Int8: fn = visitor.visitInt8 || visitor.visitInt; break;\n        case Type.Int16: fn = visitor.visitInt16 || visitor.visitInt; break;\n        case Type.Int32: fn = visitor.visitInt32 || visitor.visitInt; break;\n        case Type.Int64: fn = visitor.visitInt64 || visitor.visitInt; break;\n        case Type.Uint8: fn = visitor.visitUint8 || visitor.visitInt; break;\n        case Type.Uint16: fn = visitor.visitUint16 || visitor.visitInt; break;\n        case Type.Uint32: fn = visitor.visitUint32 || visitor.visitInt; break;\n        case Type.Uint64: fn = visitor.visitUint64 || visitor.visitInt; break;\n        case Type.Float: fn = visitor.visitFloat; break;\n        case Type.Float16: fn = visitor.visitFloat16 || visitor.visitFloat; break;\n        case Type.Float32: fn = visitor.visitFloat32 || visitor.visitFloat; break;\n        case Type.Float64: fn = visitor.visitFloat64 || visitor.visitFloat; break;\n        case Type.Utf8: fn = visitor.visitUtf8; break;\n        case Type.Binary: fn = visitor.visitBinary; break;\n        case Type.FixedSizeBinary: fn = visitor.visitFixedSizeBinary; break;\n        case Type.Date: fn = visitor.visitDate; break;\n        case Type.DateDay: fn = visitor.visitDateDay || visitor.visitDate; break;\n        case Type.DateMillisecond: fn = visitor.visitDateMillisecond || visitor.visitDate; break;\n        case Type.Timestamp: fn = visitor.visitTimestamp; break;\n        case Type.TimestampSecond: fn = visitor.visitTimestampSecond || visitor.visitTimestamp; break;\n        case Type.TimestampMillisecond: fn = visitor.visitTimestampMillisecond || visitor.visitTimestamp; break;\n        case Type.TimestampMicrosecond: fn = visitor.visitTimestampMicrosecond || visitor.visitTimestamp; break;\n        case Type.TimestampNanosecond: fn = visitor.visitTimestampNanosecond || visitor.visitTimestamp; break;\n        case Type.Time: fn = visitor.visitTime; break;\n        case Type.TimeSecond: fn = visitor.visitTimeSecond || visitor.visitTime; break;\n        case Type.TimeMillisecond: fn = visitor.visitTimeMillisecond || visitor.visitTime; break;\n        case Type.TimeMicrosecond: fn = visitor.visitTimeMicrosecond || visitor.visitTime; break;\n        case Type.TimeNanosecond: fn = visitor.visitTimeNanosecond || visitor.visitTime; break;\n        case Type.Decimal: fn = visitor.visitDecimal; break;\n        case Type.List: fn = visitor.visitList; break;\n        case Type.Struct: fn = visitor.visitStruct; break;\n        case Type.Union: fn = visitor.visitUnion; break;\n        case Type.DenseUnion: fn = visitor.visitDenseUnion || visitor.visitUnion; break;\n        case Type.SparseUnion: fn = visitor.visitSparseUnion || visitor.visitUnion; break;\n        case Type.Dictionary: fn = visitor.visitDictionary; break;\n        case Type.Interval: fn = visitor.visitInterval; break;\n        case Type.IntervalDayTime: fn = visitor.visitIntervalDayTime || visitor.visitInterval; break;\n        case Type.IntervalYearMonth: fn = visitor.visitIntervalYearMonth || visitor.visitInterval; break;\n        case Type.FixedSizeList: fn = visitor.visitFixedSizeList; break;\n        case Type.Map: fn = visitor.visitMap; break;\n    }\n    if (typeof fn === 'function') return fn;\n    if (!throwIfNotFound) return () => null;\n    throw new Error(`Unrecognized type '${Type[dtype]}'`);\n}\n\n/** @ignore */\nfunction inferDType<T extends DataType>(type: T): Type {\n    switch (type.typeId) {\n        case Type.Null: return Type.Null;\n        case Type.Int: {\n            const { bitWidth, isSigned } = (type as any as Int);\n            switch (bitWidth) {\n                case 8: return isSigned ? Type.Int8 : Type.Uint8;\n                case 16: return isSigned ? Type.Int16 : Type.Uint16;\n                case 32: return isSigned ? Type.Int32 : Type.Uint32;\n                case 64: return isSigned ? Type.Int64 : Type.Uint64;\n            }\n            // @ts-ignore\n            return Type.Int;\n        }\n        case Type.Float:\n            switch ((type as any as Float).precision) {\n                case Precision.HALF: return Type.Float16;\n                case Precision.SINGLE: return Type.Float32;\n                case Precision.DOUBLE: return Type.Float64;\n            }\n            // @ts-ignore\n            return Type.Float;\n        case Type.Binary: return Type.Binary;\n        case Type.Utf8: return Type.Utf8;\n        case Type.Bool: return Type.Bool;\n        case Type.Decimal: return Type.Decimal;\n        case Type.Time:\n            switch ((type as any as Time).unit) {\n                case TimeUnit.SECOND: return Type.TimeSecond;\n                case TimeUnit.MILLISECOND: return Type.TimeMillisecond;\n                case TimeUnit.MICROSECOND: return Type.TimeMicrosecond;\n                case TimeUnit.NANOSECOND: return Type.TimeNanosecond;\n            }\n            // @ts-ignore\n            return Type.Time;\n        case Type.Timestamp:\n            switch ((type as any as Timestamp).unit) {\n                case TimeUnit.SECOND: return Type.TimestampSecond;\n                case TimeUnit.MILLISECOND: return Type.TimestampMillisecond;\n                case TimeUnit.MICROSECOND: return Type.TimestampMicrosecond;\n                case TimeUnit.NANOSECOND: return Type.TimestampNanosecond;\n            }\n            // @ts-ignore\n            return Type.Timestamp;\n        case Type.Date:\n            switch ((type as any as Date_).unit) {\n                case DateUnit.DAY: return Type.DateDay;\n                case DateUnit.MILLISECOND: return Type.DateMillisecond;\n            }\n            // @ts-ignore\n            return Type.Date;\n        case Type.Interval:\n            switch ((type as any as Interval).unit) {\n                case IntervalUnit.DAY_TIME: return Type.IntervalDayTime;\n                case IntervalUnit.YEAR_MONTH: return Type.IntervalYearMonth;\n            }\n            // @ts-ignore\n            return Type.Interval;\n        case Type.Map: return Type.Map;\n        case Type.List: return Type.List;\n        case Type.Struct: return Type.Struct;\n        case Type.Union:\n            switch ((type as any as Union).mode) {\n                case UnionMode.Dense: return Type.DenseUnion;\n                case UnionMode.Sparse: return Type.SparseUnion;\n            }\n            // @ts-ignore\n            return Type.Union;\n        case Type.FixedSizeBinary: return Type.FixedSizeBinary;\n        case Type.FixedSizeList: return Type.FixedSizeList;\n        case Type.Dictionary: return Type.Dictionary;\n    }\n    throw new Error(`Unrecognized type '${Type[type.typeId]}'`);\n}\n\nexport interface Visitor {\n    visitNull(node: any, ...args: any[]): any;\n    visitBool(node: any, ...args: any[]): any;\n    visitInt(node: any, ...args: any[]): any;\n    visitInt8?(node: any, ...args: any[]): any;\n    visitInt16?(node: any, ...args: any[]): any;\n    visitInt32?(node: any, ...args: any[]): any;\n    visitInt64?(node: any, ...args: any[]): any;\n    visitUint8?(node: any, ...args: any[]): any;\n    visitUint16?(node: any, ...args: any[]): any;\n    visitUint32?(node: any, ...args: any[]): any;\n    visitUint64?(node: any, ...args: any[]): any;\n    visitFloat(node: any, ...args: any[]): any;\n    visitFloat16?(node: any, ...args: any[]): any;\n    visitFloat32?(node: any, ...args: any[]): any;\n    visitFloat64?(node: any, ...args: any[]): any;\n    visitUtf8(node: any, ...args: any[]): any;\n    visitBinary(node: any, ...args: any[]): any;\n    visitFixedSizeBinary(node: any, ...args: any[]): any;\n    visitDate(node: any, ...args: any[]): any;\n    visitDateDay?(node: any, ...args: any[]): any;\n    visitDateMillisecond?(node: any, ...args: any[]): any;\n    visitTimestamp(node: any, ...args: any[]): any;\n    visitTimestampSecond?(node: any, ...args: any[]): any;\n    visitTimestampMillisecond?(node: any, ...args: any[]): any;\n    visitTimestampMicrosecond?(node: any, ...args: any[]): any;\n    visitTimestampNanosecond?(node: any, ...args: any[]): any;\n    visitTime(node: any, ...args: any[]): any;\n    visitTimeSecond?(node: any, ...args: any[]): any;\n    visitTimeMillisecond?(node: any, ...args: any[]): any;\n    visitTimeMicrosecond?(node: any, ...args: any[]): any;\n    visitTimeNanosecond?(node: any, ...args: any[]): any;\n    visitDecimal(node: any, ...args: any[]): any;\n    visitList(node: any, ...args: any[]): any;\n    visitStruct(node: any, ...args: any[]): any;\n    visitUnion(node: any, ...args: any[]): any;\n    visitDenseUnion?(node: any, ...args: any[]): any;\n    visitSparseUnion?(node: any, ...args: any[]): any;\n    visitDictionary(node: any, ...args: any[]): any;\n    visitInterval(node: any, ...args: any[]): any;\n    visitIntervalDayTime?(node: any, ...args: any[]): any;\n    visitIntervalYearMonth?(node: any, ...args: any[]): any;\n    visitFixedSizeList(node: any, ...args: any[]): any;\n    visitMap(node: any, ...args: any[]): any;\n}\n\n// Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\n(Visitor.prototype as any).visitInt8 = null;\n(Visitor.prototype as any).visitInt16 = null;\n(Visitor.prototype as any).visitInt32 = null;\n(Visitor.prototype as any).visitInt64 = null;\n(Visitor.prototype as any).visitUint8 = null;\n(Visitor.prototype as any).visitUint16 = null;\n(Visitor.prototype as any).visitUint32 = null;\n(Visitor.prototype as any).visitUint64 = null;\n(Visitor.prototype as any).visitFloat16 = null;\n(Visitor.prototype as any).visitFloat32 = null;\n(Visitor.prototype as any).visitFloat64 = null;\n(Visitor.prototype as any).visitDateDay = null;\n(Visitor.prototype as any).visitDateMillisecond = null;\n(Visitor.prototype as any).visitTimestampSecond = null;\n(Visitor.prototype as any).visitTimestampMillisecond = null;\n(Visitor.prototype as any).visitTimestampMicrosecond = null;\n(Visitor.prototype as any).visitTimestampNanosecond = null;\n(Visitor.prototype as any).visitTimeSecond = null;\n(Visitor.prototype as any).visitTimeMillisecond = null;\n(Visitor.prototype as any).visitTimeMicrosecond = null;\n(Visitor.prototype as any).visitTimeNanosecond = null;\n(Visitor.prototype as any).visitDenseUnion = null;\n(Visitor.prototype as any).visitSparseUnion = null;\n(Visitor.prototype as any).visitIntervalDayTime = null;\n(Visitor.prototype as any).visitIntervalYearMonth = null;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,IAAI,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,QAAQ,EAAEC,YAAY,EAAEC,SAAS,QAAQ,YAAY;AACzF,SAASC,QAAQ,QAA8D,YAAY;AAE3F,OAAM,MAAgBC,OAAO;EAClBC,SAASA,CAACC,KAAY,EAAE,GAAGC,IAAa;IAC3C,OAAOD,KAAK,CAACE,GAAG,CAAC,CAACC,IAAI,EAAEC,CAAC,KAAK,IAAI,CAACC,KAAK,CAACF,IAAI,EAAE,GAAGF,IAAI,CAACC,GAAG,CAAEI,CAAC,IAAKA,CAAC,CAACF,CAAC,CAAC,CAAC,CAAC,CAAC;EAC7E;EACOC,KAAKA,CAAC,GAAGJ,IAAW;IACvB,OAAO,IAAI,CAACM,UAAU,CAACN,IAAI,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAACO,KAAK,CAAC,IAAI,EAAEP,IAAI,CAAC;EAC5D;EACOM,UAAUA,CAACJ,IAAS,EAAEM,eAAe,GAAG,IAAI;IAC/C,OAAOF,UAAU,CAAC,IAAI,EAAEJ,IAAI,EAAEM,eAAe,CAAC;EAClD;EACOC,kBAAkBA,CAACC,MAAY,EAAEF,eAAe,GAAG,IAAI;IAC1D,OAAOC,kBAAkB,CAAC,IAAI,EAAEC,MAAM,EAAEF,eAAe,CAAC;EAC5D;EACOG,SAASA,CAACC,KAAU,EAAE,GAAGC,KAAY;IAAS,OAAO,IAAI;EAAE;EAC3DC,SAASA,CAACF,KAAU,EAAE,GAAGC,KAAY;IAAS,OAAO,IAAI;EAAE;EAC3DE,QAAQA,CAACH,KAAU,EAAE,GAAGC,KAAY;IAAS,OAAO,IAAI;EAAE;EAC1DG,UAAUA,CAACJ,KAAU,EAAE,GAAGC,KAAY;IAAS,OAAO,IAAI;EAAE;EAC5DI,SAASA,CAACL,KAAU,EAAE,GAAGC,KAAY;IAAS,OAAO,IAAI;EAAE;EAC3DK,WAAWA,CAACN,KAAU,EAAE,GAAGC,KAAY;IAAS,OAAO,IAAI;EAAE;EAC7DM,oBAAoBA,CAACP,KAAU,EAAE,GAAGC,KAAY;IAAS,OAAO,IAAI;EAAE;EACtEO,SAASA,CAACR,KAAU,EAAE,GAAGC,KAAY;IAAS,OAAO,IAAI;EAAE;EAC3DQ,cAAcA,CAACT,KAAU,EAAE,GAAGC,KAAY;IAAS,OAAO,IAAI;EAAE;EAChES,SAASA,CAACV,KAAU,EAAE,GAAGC,KAAY;IAAS,OAAO,IAAI;EAAE;EAC3DU,YAAYA,CAACX,KAAU,EAAE,GAAGC,KAAY;IAAS,OAAO,IAAI;EAAE;EAC9DW,SAASA,CAACZ,KAAU,EAAE,GAAGC,KAAY;IAAS,OAAO,IAAI;EAAE;EAC3DY,WAAWA,CAACb,KAAU,EAAE,GAAGC,KAAY;IAAS,OAAO,IAAI;EAAE;EAC7Da,UAAUA,CAACd,KAAU,EAAE,GAAGC,KAAY;IAAS,OAAO,IAAI;EAAE;EAC5Dc,eAAeA,CAACf,KAAU,EAAE,GAAGC,KAAY;IAAS,OAAO,IAAI;EAAE;EACjEe,aAAaA,CAAChB,KAAU,EAAE,GAAGC,KAAY;IAAS,OAAO,IAAI;EAAE;EAC/DgB,kBAAkBA,CAACjB,KAAU,EAAE,GAAGC,KAAY;IAAS,OAAO,IAAI;EAAE;EACpEiB,QAAQA,CAAClB,KAAU,EAAE,GAAGC,KAAY;IAAS,OAAO,IAAI;EAAE;;AAGrE;AACA,SAASP,UAAUA,CAAqByB,OAAgB,EAAE7B,IAAS,EAAEM,eAAe,GAAG,IAAI;EACvF,IAAI,OAAON,IAAI,KAAK,QAAQ,EAAE;IAC1B,OAAOO,kBAAkB,CAACsB,OAAO,EAAE7B,IAAI,EAAEM,eAAe,CAAC;;EAE7D,IAAI,OAAON,IAAI,KAAK,QAAQ,IAAKA,IAAI,IAAIZ,IAAK,EAAE;IAC5C,OAAOmB,kBAAkB,CAACsB,OAAO,EAAEzC,IAAI,CAACY,IAAyB,CAAC,EAAEM,eAAe,CAAC;;EAExF,IAAIN,IAAI,IAAKA,IAAI,YAAYN,QAAS,EAAE;IACpC,OAAOa,kBAAkB,CAACsB,OAAO,EAAEC,UAAU,CAAC9B,IAAS,CAAC,EAAEM,eAAe,CAAC;;EAE9E,IAAI,CAAAN,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAE+B,IAAI,KAAK/B,IAAI,CAAC+B,IAAI,YAAYrC,QAAS,EAAE;IAC/C,OAAOa,kBAAkB,CAACsB,OAAO,EAAEC,UAAU,CAAC9B,IAAI,CAAC+B,IAAS,CAAC,EAAEzB,eAAe,CAAC;;EAEnF,OAAOC,kBAAkB,CAACsB,OAAO,EAAEzC,IAAI,CAAC4C,IAAI,EAAE1B,eAAe,CAAC;AAClE;AAEA;AACA,SAASC,kBAAkBA,CAACsB,OAAgB,EAAEI,KAAW,EAAE3B,eAAe,GAAG,IAAI;EAC7E,IAAI4B,EAAE,GAAQ,IAAI;EAClB,QAAQD,KAAK;IACT,KAAK7C,IAAI,CAAC+C,IAAI;MAAED,EAAE,GAAGL,OAAO,CAACpB,SAAS;MAAE;IACxC,KAAKrB,IAAI,CAACgD,IAAI;MAAEF,EAAE,GAAGL,OAAO,CAACjB,SAAS;MAAE;IACxC,KAAKxB,IAAI,CAACiD,GAAG;MAAEH,EAAE,GAAGL,OAAO,CAAChB,QAAQ;MAAE;IACtC,KAAKzB,IAAI,CAACkD,IAAI;MAAEJ,EAAE,GAAGL,OAAO,CAACU,SAAS,IAAIV,OAAO,CAAChB,QAAQ;MAAE;IAC5D,KAAKzB,IAAI,CAACoD,KAAK;MAAEN,EAAE,GAAGL,OAAO,CAACY,UAAU,IAAIZ,OAAO,CAAChB,QAAQ;MAAE;IAC9D,KAAKzB,IAAI,CAACsD,KAAK;MAAER,EAAE,GAAGL,OAAO,CAACc,UAAU,IAAId,OAAO,CAAChB,QAAQ;MAAE;IAC9D,KAAKzB,IAAI,CAACwD,KAAK;MAAEV,EAAE,GAAGL,OAAO,CAACgB,UAAU,IAAIhB,OAAO,CAAChB,QAAQ;MAAE;IAC9D,KAAKzB,IAAI,CAAC0D,KAAK;MAAEZ,EAAE,GAAGL,OAAO,CAACkB,UAAU,IAAIlB,OAAO,CAAChB,QAAQ;MAAE;IAC9D,KAAKzB,IAAI,CAAC4D,MAAM;MAAEd,EAAE,GAAGL,OAAO,CAACoB,WAAW,IAAIpB,OAAO,CAAChB,QAAQ;MAAE;IAChE,KAAKzB,IAAI,CAAC8D,MAAM;MAAEhB,EAAE,GAAGL,OAAO,CAACsB,WAAW,IAAItB,OAAO,CAAChB,QAAQ;MAAE;IAChE,KAAKzB,IAAI,CAACgE,MAAM;MAAElB,EAAE,GAAGL,OAAO,CAACwB,WAAW,IAAIxB,OAAO,CAAChB,QAAQ;MAAE;IAChE,KAAKzB,IAAI,CAACkE,KAAK;MAAEpB,EAAE,GAAGL,OAAO,CAACf,UAAU;MAAE;IAC1C,KAAK1B,IAAI,CAACmE,OAAO;MAAErB,EAAE,GAAGL,OAAO,CAAC2B,YAAY,IAAI3B,OAAO,CAACf,UAAU;MAAE;IACpE,KAAK1B,IAAI,CAACqE,OAAO;MAAEvB,EAAE,GAAGL,OAAO,CAAC6B,YAAY,IAAI7B,OAAO,CAACf,UAAU;MAAE;IACpE,KAAK1B,IAAI,CAACuE,OAAO;MAAEzB,EAAE,GAAGL,OAAO,CAAC+B,YAAY,IAAI/B,OAAO,CAACf,UAAU;MAAE;IACpE,KAAK1B,IAAI,CAACyE,IAAI;MAAE3B,EAAE,GAAGL,OAAO,CAACd,SAAS;MAAE;IACxC,KAAK3B,IAAI,CAAC0E,MAAM;MAAE5B,EAAE,GAAGL,OAAO,CAACb,WAAW;MAAE;IAC5C,KAAK5B,IAAI,CAAC2E,eAAe;MAAE7B,EAAE,GAAGL,OAAO,CAACZ,oBAAoB;MAAE;IAC9D,KAAK7B,IAAI,CAAC4E,IAAI;MAAE9B,EAAE,GAAGL,OAAO,CAACX,SAAS;MAAE;IACxC,KAAK9B,IAAI,CAAC6E,OAAO;MAAE/B,EAAE,GAAGL,OAAO,CAACqC,YAAY,IAAIrC,OAAO,CAACX,SAAS;MAAE;IACnE,KAAK9B,IAAI,CAAC+E,eAAe;MAAEjC,EAAE,GAAGL,OAAO,CAACuC,oBAAoB,IAAIvC,OAAO,CAACX,SAAS;MAAE;IACnF,KAAK9B,IAAI,CAACiF,SAAS;MAAEnC,EAAE,GAAGL,OAAO,CAACV,cAAc;MAAE;IAClD,KAAK/B,IAAI,CAACkF,eAAe;MAAEpC,EAAE,GAAGL,OAAO,CAAC0C,oBAAoB,IAAI1C,OAAO,CAACV,cAAc;MAAE;IACxF,KAAK/B,IAAI,CAACoF,oBAAoB;MAAEtC,EAAE,GAAGL,OAAO,CAAC4C,yBAAyB,IAAI5C,OAAO,CAACV,cAAc;MAAE;IAClG,KAAK/B,IAAI,CAACsF,oBAAoB;MAAExC,EAAE,GAAGL,OAAO,CAAC8C,yBAAyB,IAAI9C,OAAO,CAACV,cAAc;MAAE;IAClG,KAAK/B,IAAI,CAACwF,mBAAmB;MAAE1C,EAAE,GAAGL,OAAO,CAACgD,wBAAwB,IAAIhD,OAAO,CAACV,cAAc;MAAE;IAChG,KAAK/B,IAAI,CAAC0F,IAAI;MAAE5C,EAAE,GAAGL,OAAO,CAACT,SAAS;MAAE;IACxC,KAAKhC,IAAI,CAAC2F,UAAU;MAAE7C,EAAE,GAAGL,OAAO,CAACmD,eAAe,IAAInD,OAAO,CAACT,SAAS;MAAE;IACzE,KAAKhC,IAAI,CAAC6F,eAAe;MAAE/C,EAAE,GAAGL,OAAO,CAACqD,oBAAoB,IAAIrD,OAAO,CAACT,SAAS;MAAE;IACnF,KAAKhC,IAAI,CAAC+F,eAAe;MAAEjD,EAAE,GAAGL,OAAO,CAACuD,oBAAoB,IAAIvD,OAAO,CAACT,SAAS;MAAE;IACnF,KAAKhC,IAAI,CAACiG,cAAc;MAAEnD,EAAE,GAAGL,OAAO,CAACyD,mBAAmB,IAAIzD,OAAO,CAACT,SAAS;MAAE;IACjF,KAAKhC,IAAI,CAACmG,OAAO;MAAErD,EAAE,GAAGL,OAAO,CAACR,YAAY;MAAE;IAC9C,KAAKjC,IAAI,CAACoG,IAAI;MAAEtD,EAAE,GAAGL,OAAO,CAACP,SAAS;MAAE;IACxC,KAAKlC,IAAI,CAACqG,MAAM;MAAEvD,EAAE,GAAGL,OAAO,CAACN,WAAW;MAAE;IAC5C,KAAKnC,IAAI,CAACsG,KAAK;MAAExD,EAAE,GAAGL,OAAO,CAACL,UAAU;MAAE;IAC1C,KAAKpC,IAAI,CAACuG,UAAU;MAAEzD,EAAE,GAAGL,OAAO,CAAC+D,eAAe,IAAI/D,OAAO,CAACL,UAAU;MAAE;IAC1E,KAAKpC,IAAI,CAACyG,WAAW;MAAE3D,EAAE,GAAGL,OAAO,CAACiE,gBAAgB,IAAIjE,OAAO,CAACL,UAAU;MAAE;IAC5E,KAAKpC,IAAI,CAAC2G,UAAU;MAAE7D,EAAE,GAAGL,OAAO,CAACJ,eAAe;MAAE;IACpD,KAAKrC,IAAI,CAAC4G,QAAQ;MAAE9D,EAAE,GAAGL,OAAO,CAACH,aAAa;MAAE;IAChD,KAAKtC,IAAI,CAAC6G,eAAe;MAAE/D,EAAE,GAAGL,OAAO,CAACqE,oBAAoB,IAAIrE,OAAO,CAACH,aAAa;MAAE;IACvF,KAAKtC,IAAI,CAAC+G,iBAAiB;MAAEjE,EAAE,GAAGL,OAAO,CAACuE,sBAAsB,IAAIvE,OAAO,CAACH,aAAa;MAAE;IAC3F,KAAKtC,IAAI,CAACiH,aAAa;MAAEnE,EAAE,GAAGL,OAAO,CAACF,kBAAkB;MAAE;IAC1D,KAAKvC,IAAI,CAACkH,GAAG;MAAEpE,EAAE,GAAGL,OAAO,CAACD,QAAQ;MAAE;;EAE1C,IAAI,OAAOM,EAAE,KAAK,UAAU,EAAE,OAAOA,EAAE;EACvC,IAAI,CAAC5B,eAAe,EAAE,OAAO,MAAM,IAAI;EACvC,MAAM,IAAIiG,KAAK,CAAC,sBAAsBnH,IAAI,CAAC6C,KAAK,CAAC,GAAG,CAAC;AACzD;AAEA;AACA,SAASH,UAAUA,CAAqBC,IAAO;EAC3C,QAAQA,IAAI,CAACvB,MAAM;IACf,KAAKpB,IAAI,CAAC+C,IAAI;MAAE,OAAO/C,IAAI,CAAC+C,IAAI;IAChC,KAAK/C,IAAI,CAACiD,GAAG;MAAE;QACX,MAAM;UAAEmE,QAAQ;UAAEC;QAAQ,CAAE,GAAI1E,IAAmB;QACnD,QAAQyE,QAAQ;UACZ,KAAK,CAAC;YAAE,OAAOC,QAAQ,GAAGrH,IAAI,CAACkD,IAAI,GAAGlD,IAAI,CAAC0D,KAAK;UAChD,KAAK,EAAE;YAAE,OAAO2D,QAAQ,GAAGrH,IAAI,CAACoD,KAAK,GAAGpD,IAAI,CAAC4D,MAAM;UACnD,KAAK,EAAE;YAAE,OAAOyD,QAAQ,GAAGrH,IAAI,CAACsD,KAAK,GAAGtD,IAAI,CAAC8D,MAAM;UACnD,KAAK,EAAE;YAAE,OAAOuD,QAAQ,GAAGrH,IAAI,CAACwD,KAAK,GAAGxD,IAAI,CAACgE,MAAM;;QAEvD;QACA,OAAOhE,IAAI,CAACiD,GAAG;;IAEnB,KAAKjD,IAAI,CAACkE,KAAK;MACX,QAASvB,IAAqB,CAAC2E,SAAS;QACpC,KAAKrH,SAAS,CAACsH,IAAI;UAAE,OAAOvH,IAAI,CAACmE,OAAO;QACxC,KAAKlE,SAAS,CAACuH,MAAM;UAAE,OAAOxH,IAAI,CAACqE,OAAO;QAC1C,KAAKpE,SAAS,CAACwH,MAAM;UAAE,OAAOzH,IAAI,CAACuE,OAAO;;MAE9C;MACA,OAAOvE,IAAI,CAACkE,KAAK;IACrB,KAAKlE,IAAI,CAAC0E,MAAM;MAAE,OAAO1E,IAAI,CAAC0E,MAAM;IACpC,KAAK1E,IAAI,CAACyE,IAAI;MAAE,OAAOzE,IAAI,CAACyE,IAAI;IAChC,KAAKzE,IAAI,CAACgD,IAAI;MAAE,OAAOhD,IAAI,CAACgD,IAAI;IAChC,KAAKhD,IAAI,CAACmG,OAAO;MAAE,OAAOnG,IAAI,CAACmG,OAAO;IACtC,KAAKnG,IAAI,CAAC0F,IAAI;MACV,QAAS/C,IAAoB,CAAC+E,IAAI;QAC9B,KAAKvH,QAAQ,CAACwH,MAAM;UAAE,OAAO3H,IAAI,CAAC2F,UAAU;QAC5C,KAAKxF,QAAQ,CAACyH,WAAW;UAAE,OAAO5H,IAAI,CAAC6F,eAAe;QACtD,KAAK1F,QAAQ,CAAC0H,WAAW;UAAE,OAAO7H,IAAI,CAAC+F,eAAe;QACtD,KAAK5F,QAAQ,CAAC2H,UAAU;UAAE,OAAO9H,IAAI,CAACiG,cAAc;;MAExD;MACA,OAAOjG,IAAI,CAAC0F,IAAI;IACpB,KAAK1F,IAAI,CAACiF,SAAS;MACf,QAAStC,IAAyB,CAAC+E,IAAI;QACnC,KAAKvH,QAAQ,CAACwH,MAAM;UAAE,OAAO3H,IAAI,CAACkF,eAAe;QACjD,KAAK/E,QAAQ,CAACyH,WAAW;UAAE,OAAO5H,IAAI,CAACoF,oBAAoB;QAC3D,KAAKjF,QAAQ,CAAC0H,WAAW;UAAE,OAAO7H,IAAI,CAACsF,oBAAoB;QAC3D,KAAKnF,QAAQ,CAAC2H,UAAU;UAAE,OAAO9H,IAAI,CAACwF,mBAAmB;;MAE7D;MACA,OAAOxF,IAAI,CAACiF,SAAS;IACzB,KAAKjF,IAAI,CAAC4E,IAAI;MACV,QAASjC,IAAqB,CAAC+E,IAAI;QAC/B,KAAKxH,QAAQ,CAAC6H,GAAG;UAAE,OAAO/H,IAAI,CAAC6E,OAAO;QACtC,KAAK3E,QAAQ,CAAC0H,WAAW;UAAE,OAAO5H,IAAI,CAAC+E,eAAe;;MAE1D;MACA,OAAO/E,IAAI,CAAC4E,IAAI;IACpB,KAAK5E,IAAI,CAAC4G,QAAQ;MACd,QAASjE,IAAwB,CAAC+E,IAAI;QAClC,KAAKtH,YAAY,CAAC4H,QAAQ;UAAE,OAAOhI,IAAI,CAAC6G,eAAe;QACvD,KAAKzG,YAAY,CAAC6H,UAAU;UAAE,OAAOjI,IAAI,CAAC+G,iBAAiB;;MAE/D;MACA,OAAO/G,IAAI,CAAC4G,QAAQ;IACxB,KAAK5G,IAAI,CAACkH,GAAG;MAAE,OAAOlH,IAAI,CAACkH,GAAG;IAC9B,KAAKlH,IAAI,CAACoG,IAAI;MAAE,OAAOpG,IAAI,CAACoG,IAAI;IAChC,KAAKpG,IAAI,CAACqG,MAAM;MAAE,OAAOrG,IAAI,CAACqG,MAAM;IACpC,KAAKrG,IAAI,CAACsG,KAAK;MACX,QAAS3D,IAAqB,CAACuF,IAAI;QAC/B,KAAK7H,SAAS,CAAC8H,KAAK;UAAE,OAAOnI,IAAI,CAACuG,UAAU;QAC5C,KAAKlG,SAAS,CAAC+H,MAAM;UAAE,OAAOpI,IAAI,CAACyG,WAAW;;MAElD;MACA,OAAOzG,IAAI,CAACsG,KAAK;IACrB,KAAKtG,IAAI,CAAC2E,eAAe;MAAE,OAAO3E,IAAI,CAAC2E,eAAe;IACtD,KAAK3E,IAAI,CAACiH,aAAa;MAAE,OAAOjH,IAAI,CAACiH,aAAa;IAClD,KAAKjH,IAAI,CAAC2G,UAAU;MAAE,OAAO3G,IAAI,CAAC2G,UAAU;;EAEhD,MAAM,IAAIQ,KAAK,CAAC,sBAAsBnH,IAAI,CAAC2C,IAAI,CAACvB,MAAM,CAAC,GAAG,CAAC;AAC/D;AAgDA;AACA;AACCb,OAAO,CAAC8H,SAAiB,CAAClF,SAAS,GAAG,IAAI;AAC1C5C,OAAO,CAAC8H,SAAiB,CAAChF,UAAU,GAAG,IAAI;AAC3C9C,OAAO,CAAC8H,SAAiB,CAAC9E,UAAU,GAAG,IAAI;AAC3ChD,OAAO,CAAC8H,SAAiB,CAAC5E,UAAU,GAAG,IAAI;AAC3ClD,OAAO,CAAC8H,SAAiB,CAAC1E,UAAU,GAAG,IAAI;AAC3CpD,OAAO,CAAC8H,SAAiB,CAACxE,WAAW,GAAG,IAAI;AAC5CtD,OAAO,CAAC8H,SAAiB,CAACtE,WAAW,GAAG,IAAI;AAC5CxD,OAAO,CAAC8H,SAAiB,CAACpE,WAAW,GAAG,IAAI;AAC5C1D,OAAO,CAAC8H,SAAiB,CAACjE,YAAY,GAAG,IAAI;AAC7C7D,OAAO,CAAC8H,SAAiB,CAAC/D,YAAY,GAAG,IAAI;AAC7C/D,OAAO,CAAC8H,SAAiB,CAAC7D,YAAY,GAAG,IAAI;AAC7CjE,OAAO,CAAC8H,SAAiB,CAACvD,YAAY,GAAG,IAAI;AAC7CvE,OAAO,CAAC8H,SAAiB,CAACrD,oBAAoB,GAAG,IAAI;AACrDzE,OAAO,CAAC8H,SAAiB,CAAClD,oBAAoB,GAAG,IAAI;AACrD5E,OAAO,CAAC8H,SAAiB,CAAChD,yBAAyB,GAAG,IAAI;AAC1D9E,OAAO,CAAC8H,SAAiB,CAAC9C,yBAAyB,GAAG,IAAI;AAC1DhF,OAAO,CAAC8H,SAAiB,CAAC5C,wBAAwB,GAAG,IAAI;AACzDlF,OAAO,CAAC8H,SAAiB,CAACzC,eAAe,GAAG,IAAI;AAChDrF,OAAO,CAAC8H,SAAiB,CAACvC,oBAAoB,GAAG,IAAI;AACrDvF,OAAO,CAAC8H,SAAiB,CAACrC,oBAAoB,GAAG,IAAI;AACrDzF,OAAO,CAAC8H,SAAiB,CAACnC,mBAAmB,GAAG,IAAI;AACpD3F,OAAO,CAAC8H,SAAiB,CAAC7B,eAAe,GAAG,IAAI;AAChDjG,OAAO,CAAC8H,SAAiB,CAAC3B,gBAAgB,GAAG,IAAI;AACjDnG,OAAO,CAAC8H,SAAiB,CAACvB,oBAAoB,GAAG,IAAI;AACrDvG,OAAO,CAAC8H,SAAiB,CAACrB,sBAAsB,GAAG,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}