{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Vector } from './vector.mjs';\nimport { BufferType, Type } from './enum.mjs';\nimport { DataType, strideForType } from './type.mjs';\nimport { popcnt_bit_range, truncateBitmap } from './util/bit.mjs';\n/** @ignore */\nexport const kUnknownNullCount = -1;\n/**\n * Data structure underlying {@link Vector}s. Use the convenience method {@link makeData}.\n */\nexport class Data {\n  constructor(type, offset, length, nullCount, buffers) {\n    let children = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];\n    let dictionary = arguments.length > 6 ? arguments[6] : undefined;\n    this.type = type;\n    this.children = children;\n    this.dictionary = dictionary;\n    this.offset = Math.floor(Math.max(offset || 0, 0));\n    this.length = Math.floor(Math.max(length || 0, 0));\n    this._nullCount = Math.floor(Math.max(nullCount || 0, -1));\n    let buffer;\n    if (buffers instanceof Data) {\n      this.stride = buffers.stride;\n      this.values = buffers.values;\n      this.typeIds = buffers.typeIds;\n      this.nullBitmap = buffers.nullBitmap;\n      this.valueOffsets = buffers.valueOffsets;\n    } else {\n      this.stride = strideForType(type);\n      if (buffers) {\n        (buffer = buffers[0]) && (this.valueOffsets = buffer);\n        (buffer = buffers[1]) && (this.values = buffer);\n        (buffer = buffers[2]) && (this.nullBitmap = buffer);\n        (buffer = buffers[3]) && (this.typeIds = buffer);\n      }\n    }\n    this.nullable = this._nullCount !== 0 && this.nullBitmap && this.nullBitmap.byteLength > 0;\n  }\n  get typeId() {\n    return this.type.typeId;\n  }\n  get ArrayType() {\n    return this.type.ArrayType;\n  }\n  get buffers() {\n    return [this.valueOffsets, this.values, this.nullBitmap, this.typeIds];\n  }\n  get byteLength() {\n    let byteLength = 0;\n    const {\n      valueOffsets,\n      values,\n      nullBitmap,\n      typeIds\n    } = this;\n    valueOffsets && (byteLength += valueOffsets.byteLength);\n    values && (byteLength += values.byteLength);\n    nullBitmap && (byteLength += nullBitmap.byteLength);\n    typeIds && (byteLength += typeIds.byteLength);\n    return this.children.reduce((byteLength, child) => byteLength + child.byteLength, byteLength);\n  }\n  get nullCount() {\n    let nullCount = this._nullCount;\n    let nullBitmap;\n    if (nullCount <= kUnknownNullCount && (nullBitmap = this.nullBitmap)) {\n      this._nullCount = nullCount = this.length - popcnt_bit_range(nullBitmap, this.offset, this.offset + this.length);\n    }\n    return nullCount;\n  }\n  getValid(index) {\n    if (this.nullable && this.nullCount > 0) {\n      const pos = this.offset + index;\n      const val = this.nullBitmap[pos >> 3];\n      return (val & 1 << pos % 8) !== 0;\n    }\n    return true;\n  }\n  setValid(index, value) {\n    // Don't interact w/ nullBitmap if not nullable\n    if (!this.nullable) {\n      return value;\n    }\n    // If no null bitmap, initialize one on the fly\n    if (!this.nullBitmap || this.nullBitmap.byteLength <= index >> 3) {\n      const {\n        nullBitmap\n      } = this._changeLengthAndBackfillNullBitmap(this.length);\n      Object.assign(this, {\n        nullBitmap,\n        _nullCount: 0\n      });\n    }\n    const {\n      nullBitmap,\n      offset\n    } = this;\n    const pos = offset + index >> 3;\n    const bit = (offset + index) % 8;\n    const val = nullBitmap[pos] >> bit & 1;\n    // If `val` is truthy and the current bit is 0, flip it to 1 and increment `_nullCount`.\n    // If `val` is falsey and the current bit is 1, flip it to 0 and decrement `_nullCount`.\n    value ? val === 0 && (nullBitmap[pos] |= 1 << bit, this._nullCount = this.nullCount + 1) : val === 1 && (nullBitmap[pos] &= ~(1 << bit), this._nullCount = this.nullCount - 1);\n    return value;\n  }\n  clone() {\n    let type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.type;\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.offset;\n    let length = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.length;\n    let nullCount = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this._nullCount;\n    let buffers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : this;\n    let children = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : this.children;\n    return new Data(type, offset, length, nullCount, buffers, children, this.dictionary);\n  }\n  slice(offset, length) {\n    const {\n      stride,\n      typeId,\n      children\n    } = this;\n    // +true === 1, +false === 0, so this means\n    // we keep nullCount at 0 if it's already 0,\n    // otherwise set to the invalidated flag -1\n    const nullCount = +(this._nullCount === 0) - 1;\n    const childStride = typeId === 16 /* FixedSizeList */ ? stride : 1;\n    const buffers = this._sliceBuffers(offset, length, stride, typeId);\n    return this.clone(this.type, this.offset + offset, length, nullCount, buffers,\n    // Don't slice children if we have value offsets (the variable-width types)\n    children.length === 0 || this.valueOffsets ? children : this._sliceChildren(children, childStride * offset, childStride * length));\n  }\n  _changeLengthAndBackfillNullBitmap(newLength) {\n    if (this.typeId === Type.Null) {\n      return this.clone(this.type, 0, newLength, 0);\n    }\n    const {\n      length,\n      nullCount\n    } = this;\n    // start initialized with 0s (nulls), then fill from 0 to length with 1s (not null)\n    const bitmap = new Uint8Array((newLength + 63 & ~63) >> 3).fill(255, 0, length >> 3);\n    // set all the bits in the last byte (up to bit `length - length % 8`) to 1 (not null)\n    bitmap[length >> 3] = (1 << length - (length & ~7)) - 1;\n    // if we have a nullBitmap, truncate + slice and set it over the pre-filled 1s\n    if (nullCount > 0) {\n      bitmap.set(truncateBitmap(this.offset, length, this.nullBitmap), 0);\n    }\n    const buffers = this.buffers;\n    buffers[BufferType.VALIDITY] = bitmap;\n    return this.clone(this.type, 0, newLength, nullCount + (newLength - length), buffers);\n  }\n  _sliceBuffers(offset, length, stride, typeId) {\n    let arr;\n    const {\n      buffers\n    } = this;\n    // If typeIds exist, slice the typeIds buffer\n    (arr = buffers[BufferType.TYPE]) && (buffers[BufferType.TYPE] = arr.subarray(offset, offset + length));\n    // If offsets exist, only slice the offsets buffer\n    (arr = buffers[BufferType.OFFSET]) && (buffers[BufferType.OFFSET] = arr.subarray(offset, offset + length + 1)) ||\n    // Otherwise if no offsets, slice the data buffer. Don't slice the data vector for Booleans, since the offset goes by bits not bytes\n    (arr = buffers[BufferType.DATA]) && (buffers[BufferType.DATA] = typeId === 6 ? arr : arr.subarray(stride * offset, stride * (offset + length)));\n    return buffers;\n  }\n  _sliceChildren(children, offset, length) {\n    return children.map(child => child.slice(offset, length));\n  }\n}\nData.prototype.children = Object.freeze([]);\nimport { Visitor } from './visitor.mjs';\nimport { toArrayBufferView, toInt32Array, toUint8Array } from './util/buffer.mjs';\nclass MakeDataVisitor extends Visitor {\n  visit(props) {\n    return this.getVisitFn(props['type']).call(this, props);\n  }\n  visitNull(props) {\n    const {\n      ['type']: type,\n      ['offset']: offset = 0,\n      ['length']: length = 0\n    } = props;\n    return new Data(type, offset, length, 0);\n  }\n  visitBool(props) {\n    const {\n      ['type']: type,\n      ['offset']: offset = 0\n    } = props;\n    const nullBitmap = toUint8Array(props['nullBitmap']);\n    const data = toArrayBufferView(type.ArrayType, props['data']);\n    const {\n      ['length']: length = data.length >> 3,\n      ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0\n    } = props;\n    return new Data(type, offset, length, nullCount, [undefined, data, nullBitmap]);\n  }\n  visitInt(props) {\n    const {\n      ['type']: type,\n      ['offset']: offset = 0\n    } = props;\n    const nullBitmap = toUint8Array(props['nullBitmap']);\n    const data = toArrayBufferView(type.ArrayType, props['data']);\n    const {\n      ['length']: length = data.length,\n      ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0\n    } = props;\n    return new Data(type, offset, length, nullCount, [undefined, data, nullBitmap]);\n  }\n  visitFloat(props) {\n    const {\n      ['type']: type,\n      ['offset']: offset = 0\n    } = props;\n    const nullBitmap = toUint8Array(props['nullBitmap']);\n    const data = toArrayBufferView(type.ArrayType, props['data']);\n    const {\n      ['length']: length = data.length,\n      ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0\n    } = props;\n    return new Data(type, offset, length, nullCount, [undefined, data, nullBitmap]);\n  }\n  visitUtf8(props) {\n    const {\n      ['type']: type,\n      ['offset']: offset = 0\n    } = props;\n    const data = toUint8Array(props['data']);\n    const nullBitmap = toUint8Array(props['nullBitmap']);\n    const valueOffsets = toInt32Array(props['valueOffsets']);\n    const {\n      ['length']: length = valueOffsets.length - 1,\n      ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0\n    } = props;\n    return new Data(type, offset, length, nullCount, [valueOffsets, data, nullBitmap]);\n  }\n  visitBinary(props) {\n    const {\n      ['type']: type,\n      ['offset']: offset = 0\n    } = props;\n    const data = toUint8Array(props['data']);\n    const nullBitmap = toUint8Array(props['nullBitmap']);\n    const valueOffsets = toInt32Array(props['valueOffsets']);\n    const {\n      ['length']: length = valueOffsets.length - 1,\n      ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0\n    } = props;\n    return new Data(type, offset, length, nullCount, [valueOffsets, data, nullBitmap]);\n  }\n  visitFixedSizeBinary(props) {\n    const {\n      ['type']: type,\n      ['offset']: offset = 0\n    } = props;\n    const nullBitmap = toUint8Array(props['nullBitmap']);\n    const data = toArrayBufferView(type.ArrayType, props['data']);\n    const {\n      ['length']: length = data.length / strideForType(type),\n      ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0\n    } = props;\n    return new Data(type, offset, length, nullCount, [undefined, data, nullBitmap]);\n  }\n  visitDate(props) {\n    const {\n      ['type']: type,\n      ['offset']: offset = 0\n    } = props;\n    const nullBitmap = toUint8Array(props['nullBitmap']);\n    const data = toArrayBufferView(type.ArrayType, props['data']);\n    const {\n      ['length']: length = data.length / strideForType(type),\n      ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0\n    } = props;\n    return new Data(type, offset, length, nullCount, [undefined, data, nullBitmap]);\n  }\n  visitTimestamp(props) {\n    const {\n      ['type']: type,\n      ['offset']: offset = 0\n    } = props;\n    const nullBitmap = toUint8Array(props['nullBitmap']);\n    const data = toArrayBufferView(type.ArrayType, props['data']);\n    const {\n      ['length']: length = data.length / strideForType(type),\n      ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0\n    } = props;\n    return new Data(type, offset, length, nullCount, [undefined, data, nullBitmap]);\n  }\n  visitTime(props) {\n    const {\n      ['type']: type,\n      ['offset']: offset = 0\n    } = props;\n    const nullBitmap = toUint8Array(props['nullBitmap']);\n    const data = toArrayBufferView(type.ArrayType, props['data']);\n    const {\n      ['length']: length = data.length / strideForType(type),\n      ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0\n    } = props;\n    return new Data(type, offset, length, nullCount, [undefined, data, nullBitmap]);\n  }\n  visitDecimal(props) {\n    const {\n      ['type']: type,\n      ['offset']: offset = 0\n    } = props;\n    const nullBitmap = toUint8Array(props['nullBitmap']);\n    const data = toArrayBufferView(type.ArrayType, props['data']);\n    const {\n      ['length']: length = data.length / strideForType(type),\n      ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0\n    } = props;\n    return new Data(type, offset, length, nullCount, [undefined, data, nullBitmap]);\n  }\n  visitList(props) {\n    const {\n      ['type']: type,\n      ['offset']: offset = 0,\n      ['child']: child\n    } = props;\n    const nullBitmap = toUint8Array(props['nullBitmap']);\n    const valueOffsets = toInt32Array(props['valueOffsets']);\n    const {\n      ['length']: length = valueOffsets.length - 1,\n      ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0\n    } = props;\n    return new Data(type, offset, length, nullCount, [valueOffsets, undefined, nullBitmap], [child]);\n  }\n  visitStruct(props) {\n    const {\n      ['type']: type,\n      ['offset']: offset = 0,\n      ['children']: children = []\n    } = props;\n    const nullBitmap = toUint8Array(props['nullBitmap']);\n    const {\n      length = children.reduce((len, _ref) => {\n        let {\n          length\n        } = _ref;\n        return Math.max(len, length);\n      }, 0),\n      nullCount = props['nullBitmap'] ? -1 : 0\n    } = props;\n    return new Data(type, offset, length, nullCount, [undefined, undefined, nullBitmap], children);\n  }\n  visitUnion(props) {\n    const {\n      ['type']: type,\n      ['offset']: offset = 0,\n      ['children']: children = []\n    } = props;\n    const nullBitmap = toUint8Array(props['nullBitmap']);\n    const typeIds = toArrayBufferView(type.ArrayType, props['typeIds']);\n    const {\n      ['length']: length = typeIds.length,\n      ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0\n    } = props;\n    if (DataType.isSparseUnion(type)) {\n      return new Data(type, offset, length, nullCount, [undefined, undefined, nullBitmap, typeIds], children);\n    }\n    const valueOffsets = toInt32Array(props['valueOffsets']);\n    return new Data(type, offset, length, nullCount, [valueOffsets, undefined, nullBitmap, typeIds], children);\n  }\n  visitDictionary(props) {\n    const {\n      ['type']: type,\n      ['offset']: offset = 0\n    } = props;\n    const nullBitmap = toUint8Array(props['nullBitmap']);\n    const data = toArrayBufferView(type.indices.ArrayType, props['data']);\n    const {\n      ['dictionary']: dictionary = new Vector([new MakeDataVisitor().visit({\n        type: type.dictionary\n      })])\n    } = props;\n    const {\n      ['length']: length = data.length,\n      ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0\n    } = props;\n    return new Data(type, offset, length, nullCount, [undefined, data, nullBitmap], [], dictionary);\n  }\n  visitInterval(props) {\n    const {\n      ['type']: type,\n      ['offset']: offset = 0\n    } = props;\n    const nullBitmap = toUint8Array(props['nullBitmap']);\n    const data = toArrayBufferView(type.ArrayType, props['data']);\n    const {\n      ['length']: length = data.length / strideForType(type),\n      ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0\n    } = props;\n    return new Data(type, offset, length, nullCount, [undefined, data, nullBitmap]);\n  }\n  visitFixedSizeList(props) {\n    const {\n      ['type']: type,\n      ['offset']: offset = 0,\n      ['child']: child = new MakeDataVisitor().visit({\n        type: type.valueType\n      })\n    } = props;\n    const nullBitmap = toUint8Array(props['nullBitmap']);\n    const {\n      ['length']: length = child.length / strideForType(type),\n      ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0\n    } = props;\n    return new Data(type, offset, length, nullCount, [undefined, undefined, nullBitmap], [child]);\n  }\n  visitMap(props) {\n    const {\n      ['type']: type,\n      ['offset']: offset = 0,\n      ['child']: child = new MakeDataVisitor().visit({\n        type: type.childType\n      })\n    } = props;\n    const nullBitmap = toUint8Array(props['nullBitmap']);\n    const valueOffsets = toInt32Array(props['valueOffsets']);\n    const {\n      ['length']: length = valueOffsets.length - 1,\n      ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0\n    } = props;\n    return new Data(type, offset, length, nullCount, [valueOffsets, undefined, nullBitmap], [child]);\n  }\n}\nexport function makeData(props) {\n  return new MakeDataVisitor().visit(props);\n}","map":{"version":3,"names":["Vector","BufferType","Type","DataType","strideForType","popcnt_bit_range","truncateBitmap","kUnknownNullCount","Data","constructor","type","offset","length","nullCount","buffers","children","arguments","undefined","dictionary","Math","floor","max","_nullCount","buffer","stride","values","typeIds","nullBitmap","valueOffsets","nullable","byteLength","typeId","ArrayType","reduce","child","getValid","index","pos","val","setValid","value","_changeLengthAndBackfillNullBitmap","Object","assign","bit","clone","slice","childStride","_sliceBuffers","_sliceChildren","newLength","Null","bitmap","Uint8Array","fill","set","VALIDITY","arr","TYPE","subarray","OFFSET","DATA","map","prototype","freeze","Visitor","toArrayBufferView","toInt32Array","toUint8Array","MakeDataVisitor","visit","props","getVisitFn","call","visitNull","visitBool","data","visitInt","visitFloat","visitUtf8","visitBinary","visitFixedSizeBinary","visitDate","visitTimestamp","visitTime","visitDecimal","visitList","visitStruct","len","_ref","visitUnion","isSparseUnion","visitDictionary","indices","visitInterval","visitFixedSizeList","valueType","visitMap","childType","makeData"],"sources":["C:\\Users\\mvlor\\OneDrive\\Desktop\\custom_component\\multi_menu\\template\\my_component\\frontend\\node_modules\\apache-arrow\\src\\data.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from './vector.js';\nimport { BufferType, Type } from './enum.js';\nimport { DataType, strideForType } from './type.js';\nimport { popcnt_bit_range, truncateBitmap } from './util/bit.js';\n\n// When slicing, we do not know the null count of the sliced range without\n// doing some computation. To avoid doing this eagerly, we set the null count\n// to -1 (any negative number will do). When Vector.nullCount is called the\n// first time, the null count will be computed. See ARROW-33\n/** @ignore */ export type kUnknownNullCount = -1;\n/** @ignore */ export const kUnknownNullCount = -1;\n\n/** @ignore */ export type NullBuffer = Uint8Array | null | undefined;\n/** @ignore */ export type TypeIdsBuffer = Int8Array | ArrayLike<number> | Iterable<number> | undefined;\n/** @ignore */ export type ValueOffsetsBuffer = Int32Array | ArrayLike<number> | Iterable<number> | undefined;\n/** @ignore */ export type DataBuffer<T extends DataType> = T['TArray'] | ArrayLike<number> | Iterable<number> | undefined;\n\n/** @ignore */\nexport interface Buffers<T extends DataType> {\n    [BufferType.OFFSET]: Int32Array;\n    [BufferType.DATA]: T['TArray'];\n    [BufferType.VALIDITY]: Uint8Array;\n    [BufferType.TYPE]: T['TArray'];\n}\n\n/** @ignore */\nexport interface Data<T extends DataType = DataType> {\n    readonly TType: T['TType'];\n    readonly TArray: T['TArray'];\n    readonly TValue: T['TValue'];\n}\n\n/**\n * Data structure underlying {@link Vector}s. Use the convenience method {@link makeData}.\n */\nexport class Data<T extends DataType = DataType> {\n\n    declare public readonly type: T;\n    declare public readonly length: number;\n    declare public readonly offset: number;\n    declare public readonly stride: number;\n    declare public readonly nullable: boolean;\n    declare public readonly children: Data[];\n\n    /**\n     * The dictionary for this Vector, if any. Only used for Dictionary type.\n     */\n    declare public dictionary?: Vector;\n\n    declare public readonly values: Buffers<T>[BufferType.DATA];\n    declare public readonly typeIds: Buffers<T>[BufferType.TYPE];\n    declare public readonly nullBitmap: Buffers<T>[BufferType.VALIDITY];\n    declare public readonly valueOffsets: Buffers<T>[BufferType.OFFSET];\n\n    public get typeId(): T['TType'] { return this.type.typeId; }\n    public get ArrayType(): T['ArrayType'] { return this.type.ArrayType; }\n    public get buffers() {\n        return [this.valueOffsets, this.values, this.nullBitmap, this.typeIds] as Buffers<T>;\n    }\n    public get byteLength(): number {\n        let byteLength = 0;\n        const { valueOffsets, values, nullBitmap, typeIds } = this;\n        valueOffsets && (byteLength += valueOffsets.byteLength);\n        values && (byteLength += values.byteLength);\n        nullBitmap && (byteLength += nullBitmap.byteLength);\n        typeIds && (byteLength += typeIds.byteLength);\n        return this.children.reduce((byteLength, child) => byteLength + child.byteLength, byteLength);\n    }\n\n    protected _nullCount: number | kUnknownNullCount;\n\n    public get nullCount() {\n        let nullCount = this._nullCount;\n        let nullBitmap: Uint8Array | undefined;\n        if (nullCount <= kUnknownNullCount && (nullBitmap = this.nullBitmap)) {\n            this._nullCount = nullCount = this.length - popcnt_bit_range(nullBitmap, this.offset, this.offset + this.length);\n        }\n        return nullCount;\n    }\n\n    constructor(type: T, offset: number, length: number, nullCount?: number, buffers?: Partial<Buffers<T>> | Data<T>, children: Data[] = [], dictionary?: Vector) {\n        this.type = type;\n        this.children = children;\n        this.dictionary = dictionary;\n        this.offset = Math.floor(Math.max(offset || 0, 0));\n        this.length = Math.floor(Math.max(length || 0, 0));\n        this._nullCount = Math.floor(Math.max(nullCount || 0, -1));\n        let buffer: Buffers<T>[keyof Buffers<T>];\n        if (buffers instanceof Data) {\n            this.stride = buffers.stride;\n            this.values = buffers.values;\n            this.typeIds = buffers.typeIds;\n            this.nullBitmap = buffers.nullBitmap;\n            this.valueOffsets = buffers.valueOffsets;\n        } else {\n            this.stride = strideForType(type);\n            if (buffers) {\n                (buffer = (buffers as Buffers<T>)[0]) && (this.valueOffsets = buffer);\n                (buffer = (buffers as Buffers<T>)[1]) && (this.values = buffer);\n                (buffer = (buffers as Buffers<T>)[2]) && (this.nullBitmap = buffer);\n                (buffer = (buffers as Buffers<T>)[3]) && (this.typeIds = buffer);\n            }\n        }\n        this.nullable = this._nullCount !== 0 && this.nullBitmap && this.nullBitmap.byteLength > 0;\n    }\n\n    public getValid(index: number) {\n        if (this.nullable && this.nullCount > 0) {\n            const pos = this.offset + index;\n            const val = this.nullBitmap[pos >> 3];\n            return (val & (1 << (pos % 8))) !== 0;\n        }\n        return true;\n    }\n\n    public setValid(index: number, value: boolean) {\n        // Don't interact w/ nullBitmap if not nullable\n        if (!this.nullable) { return value; }\n        // If no null bitmap, initialize one on the fly\n        if (!this.nullBitmap || this.nullBitmap.byteLength <= (index >> 3)) {\n            const { nullBitmap } = this._changeLengthAndBackfillNullBitmap(this.length);\n            Object.assign(this, { nullBitmap, _nullCount: 0 });\n        }\n        const { nullBitmap, offset } = this;\n        const pos = (offset + index) >> 3;\n        const bit = (offset + index) % 8;\n        const val = (nullBitmap[pos] >> bit) & 1;\n        // If `val` is truthy and the current bit is 0, flip it to 1 and increment `_nullCount`.\n        // If `val` is falsey and the current bit is 1, flip it to 0 and decrement `_nullCount`.\n        value ? val === 0 && ((nullBitmap[pos] |= (1 << bit)), (this._nullCount = this.nullCount + 1))\n            : val === 1 && ((nullBitmap[pos] &= ~(1 << bit)), (this._nullCount = this.nullCount - 1));\n        return value;\n    }\n\n    public clone<R extends DataType = T>(type: R = this.type as any, offset = this.offset, length = this.length, nullCount = this._nullCount, buffers: Buffers<R> = <any>this, children: Data[] = this.children) {\n        return new Data(type, offset, length, nullCount, buffers, children, this.dictionary);\n    }\n\n    public slice(offset: number, length: number): Data<T> {\n        const { stride, typeId, children } = this;\n        // +true === 1, +false === 0, so this means\n        // we keep nullCount at 0 if it's already 0,\n        // otherwise set to the invalidated flag -1\n        const nullCount = +(this._nullCount === 0) - 1;\n        const childStride = typeId === 16 /* FixedSizeList */ ? stride : 1;\n        const buffers = this._sliceBuffers(offset, length, stride, typeId);\n        return this.clone<T>(this.type, this.offset + offset, length, nullCount, buffers,\n            // Don't slice children if we have value offsets (the variable-width types)\n            (children.length === 0 || this.valueOffsets) ? children : this._sliceChildren(children, childStride * offset, childStride * length));\n    }\n\n    public _changeLengthAndBackfillNullBitmap(newLength: number): Data<T> {\n        if (this.typeId === Type.Null) {\n            return this.clone(this.type, 0, newLength, 0);\n        }\n        const { length, nullCount } = this;\n        // start initialized with 0s (nulls), then fill from 0 to length with 1s (not null)\n        const bitmap = new Uint8Array(((newLength + 63) & ~63) >> 3).fill(255, 0, length >> 3);\n        // set all the bits in the last byte (up to bit `length - length % 8`) to 1 (not null)\n        bitmap[length >> 3] = (1 << (length - (length & ~7))) - 1;\n        // if we have a nullBitmap, truncate + slice and set it over the pre-filled 1s\n        if (nullCount > 0) {\n            bitmap.set(truncateBitmap(this.offset, length, this.nullBitmap), 0);\n        }\n        const buffers = this.buffers;\n        buffers[BufferType.VALIDITY] = bitmap;\n        return this.clone(this.type, 0, newLength, nullCount + (newLength - length), buffers);\n    }\n\n    protected _sliceBuffers(offset: number, length: number, stride: number, typeId: T['TType']): Buffers<T> {\n        let arr: any;\n        const { buffers } = this;\n        // If typeIds exist, slice the typeIds buffer\n        (arr = buffers[BufferType.TYPE]) && (buffers[BufferType.TYPE] = arr.subarray(offset, offset + length));\n        // If offsets exist, only slice the offsets buffer\n        (arr = buffers[BufferType.OFFSET]) && (buffers[BufferType.OFFSET] = arr.subarray(offset, offset + length + 1)) ||\n            // Otherwise if no offsets, slice the data buffer. Don't slice the data vector for Booleans, since the offset goes by bits not bytes\n            (arr = buffers[BufferType.DATA]) && (buffers[BufferType.DATA] = typeId === 6 ? arr : arr.subarray(stride * offset, stride * (offset + length)));\n        return buffers;\n    }\n\n    protected _sliceChildren(children: Data[], offset: number, length: number): Data[] {\n        return children.map((child) => child.slice(offset, length));\n    }\n}\n\n(Data.prototype as any).children = Object.freeze([]);\n\nimport {\n    Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float,\n    Int,\n    Date_,\n    Interval,\n    Time,\n    Timestamp,\n    Union, DenseUnion, SparseUnion,\n} from './type.js';\n\nimport { Visitor } from './visitor.js';\nimport { toArrayBufferView, toInt32Array, toUint8Array } from './util/buffer.js';\n\nclass MakeDataVisitor extends Visitor {\n    public visit<T extends DataType>(props: any): Data<T> {\n        return this.getVisitFn(props['type']).call(this, props);\n    }\n    public visitNull<T extends Null>(props: NullDataProps<T>) {\n        const {\n            ['type']: type,\n            ['offset']: offset = 0,\n            ['length']: length = 0,\n        } = props;\n        return new Data(type, offset, length, 0);\n    }\n    public visitBool<T extends Bool>(props: BoolDataProps<T>) {\n        const { ['type']: type, ['offset']: offset = 0 } = props;\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const data = toArrayBufferView(type.ArrayType, props['data']);\n        const { ['length']: length = data.length >> 3, ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0, } = props;\n        return new Data(type, offset, length, nullCount, [undefined, data, nullBitmap]);\n    }\n    public visitInt<T extends Int>(props: IntDataProps<T>) {\n        const { ['type']: type, ['offset']: offset = 0 } = props;\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const data = toArrayBufferView(type.ArrayType, props['data']);\n        const { ['length']: length = data.length, ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0, } = props;\n        return new Data(type, offset, length, nullCount, [undefined, data, nullBitmap]);\n    }\n    public visitFloat<T extends Float>(props: FloatDataProps<T>) {\n        const { ['type']: type, ['offset']: offset = 0 } = props;\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const data = toArrayBufferView(type.ArrayType, props['data']);\n        const { ['length']: length = data.length, ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0, } = props;\n        return new Data(type, offset, length, nullCount, [undefined, data, nullBitmap]);\n    }\n    public visitUtf8<T extends Utf8>(props: Utf8DataProps<T>) {\n        const { ['type']: type, ['offset']: offset = 0 } = props;\n        const data = toUint8Array(props['data']);\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const valueOffsets = toInt32Array(props['valueOffsets']);\n        const { ['length']: length = valueOffsets.length - 1, ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0 } = props;\n        return new Data(type, offset, length, nullCount, [valueOffsets, data, nullBitmap]);\n    }\n    public visitBinary<T extends Binary>(props: BinaryDataProps<T>) {\n        const { ['type']: type, ['offset']: offset = 0 } = props;\n        const data = toUint8Array(props['data']);\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const valueOffsets = toInt32Array(props['valueOffsets']);\n        const { ['length']: length = valueOffsets.length - 1, ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0 } = props;\n        return new Data(type, offset, length, nullCount, [valueOffsets, data, nullBitmap]);\n    }\n    public visitFixedSizeBinary<T extends FixedSizeBinary>(props: FixedSizeBinaryDataProps<T>) {\n        const { ['type']: type, ['offset']: offset = 0 } = props;\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const data = toArrayBufferView(type.ArrayType, props['data']);\n        const { ['length']: length = data.length / strideForType(type), ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0, } = props;\n        return new Data(type, offset, length, nullCount, [undefined, data, nullBitmap]);\n    }\n    public visitDate<T extends Date_>(props: Date_DataProps<T>) {\n        const { ['type']: type, ['offset']: offset = 0 } = props;\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const data = toArrayBufferView(type.ArrayType, props['data']);\n        const { ['length']: length = data.length / strideForType(type), ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0, } = props;\n        return new Data(type, offset, length, nullCount, [undefined, data, nullBitmap]);\n    }\n    public visitTimestamp<T extends Timestamp>(props: TimestampDataProps<T>) {\n        const { ['type']: type, ['offset']: offset = 0 } = props;\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const data = toArrayBufferView(type.ArrayType, props['data']);\n        const { ['length']: length = data.length / strideForType(type), ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0, } = props;\n        return new Data(type, offset, length, nullCount, [undefined, data, nullBitmap]);\n    }\n    public visitTime<T extends Time>(props: TimeDataProps<T>) {\n        const { ['type']: type, ['offset']: offset = 0 } = props;\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const data = toArrayBufferView(type.ArrayType, props['data']);\n        const { ['length']: length = data.length / strideForType(type), ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0, } = props;\n        return new Data(type, offset, length, nullCount, [undefined, data, nullBitmap]);\n    }\n    public visitDecimal<T extends Decimal>(props: DecimalDataProps<T>) {\n        const { ['type']: type, ['offset']: offset = 0 } = props;\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const data = toArrayBufferView(type.ArrayType, props['data']);\n        const { ['length']: length = data.length / strideForType(type), ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0, } = props;\n        return new Data(type, offset, length, nullCount, [undefined, data, nullBitmap]);\n    }\n    public visitList<T extends List>(props: ListDataProps<T>) {\n        const { ['type']: type, ['offset']: offset = 0, ['child']: child } = props;\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const valueOffsets = toInt32Array(props['valueOffsets']);\n        const { ['length']: length = valueOffsets.length - 1, ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0 } = props;\n        return new Data(type, offset, length, nullCount, [valueOffsets, undefined, nullBitmap], [child]);\n    }\n    public visitStruct<T extends Struct>(props: StructDataProps<T>) {\n        const { ['type']: type, ['offset']: offset = 0, ['children']: children = [] } = props;\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const {\n            length = children.reduce((len, { length }) => Math.max(len, length), 0),\n            nullCount = props['nullBitmap'] ? -1 : 0\n        } = props;\n        return new Data(type, offset, length, nullCount, [undefined, undefined, nullBitmap], children);\n    }\n    public visitUnion<T extends Union>(props: UnionDataProps<T>) {\n        const { ['type']: type, ['offset']: offset = 0, ['children']: children = [] } = props;\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const typeIds = toArrayBufferView(type.ArrayType, props['typeIds']);\n        const { ['length']: length = typeIds.length, ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0, } = props;\n        if (DataType.isSparseUnion(type)) {\n            return new Data(type, offset, length, nullCount, [undefined, undefined, nullBitmap, typeIds], children);\n        }\n        const valueOffsets = toInt32Array(props['valueOffsets']);\n        return new Data(type, offset, length, nullCount, [valueOffsets, undefined, nullBitmap, typeIds], children);\n    }\n    public visitDictionary<T extends Dictionary>(props: DictionaryDataProps<T>) {\n        const { ['type']: type, ['offset']: offset = 0 } = props;\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const data = toArrayBufferView(type.indices.ArrayType, props['data']);\n        const { ['dictionary']: dictionary = new Vector([new MakeDataVisitor().visit({ type: type.dictionary })]) } = props;\n        const { ['length']: length = data.length, ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0 } = props;\n        return new Data(type, offset, length, nullCount, [undefined, data, nullBitmap], [], dictionary);\n    }\n    public visitInterval<T extends Interval>(props: IntervalDataProps<T>) {\n        const { ['type']: type, ['offset']: offset = 0 } = props;\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const data = toArrayBufferView(type.ArrayType, props['data']);\n        const { ['length']: length = data.length / strideForType(type), ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0, } = props;\n        return new Data(type, offset, length, nullCount, [undefined, data, nullBitmap]);\n    }\n    public visitFixedSizeList<T extends FixedSizeList>(props: FixedSizeListDataProps<T>) {\n        const { ['type']: type, ['offset']: offset = 0, ['child']: child = new MakeDataVisitor().visit({ type: type.valueType }) } = props;\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const { ['length']: length = child.length / strideForType(type), ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0 } = props;\n        return new Data(type, offset, length, nullCount, [undefined, undefined, nullBitmap], [child]);\n    }\n    public visitMap<T extends Map_>(props: Map_DataProps<T>) {\n        const { ['type']: type, ['offset']: offset = 0, ['child']: child = new MakeDataVisitor().visit({ type: type.childType }) } = props;\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const valueOffsets = toInt32Array(props['valueOffsets']);\n        const { ['length']: length = valueOffsets.length - 1, ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0, } = props;\n        return new Data(type, offset, length, nullCount, [valueOffsets, undefined, nullBitmap], [child]);\n    }\n}\n\n/** @ignore */\ninterface DataProps_<T extends DataType> {\n    type: T;\n    offset?: number;\n    length?: number;\n    nullCount?: number;\n    nullBitmap?: NullBuffer;\n}\n\ninterface NullDataProps<T extends Null> { type: T; offset?: number; length?: number }\ninterface IntDataProps<T extends Int> extends DataProps_<T> { data?: DataBuffer<T> }\ninterface DictionaryDataProps<T extends Dictionary> extends DataProps_<T> { data?: DataBuffer<T>; dictionary?: Vector<T['dictionary']> }\ninterface FloatDataProps<T extends Float> extends DataProps_<T> { data?: DataBuffer<T> }\ninterface BoolDataProps<T extends Bool> extends DataProps_<T> { data?: DataBuffer<T> }\ninterface DecimalDataProps<T extends Decimal> extends DataProps_<T> { data?: DataBuffer<T> }\ninterface Date_DataProps<T extends Date_> extends DataProps_<T> { data?: DataBuffer<T> }\ninterface TimeDataProps<T extends Time> extends DataProps_<T> { data?: DataBuffer<T> }\ninterface TimestampDataProps<T extends Timestamp> extends DataProps_<T> { data?: DataBuffer<T> }\ninterface IntervalDataProps<T extends Interval> extends DataProps_<T> { data?: DataBuffer<T> }\ninterface FixedSizeBinaryDataProps<T extends FixedSizeBinary> extends DataProps_<T> { data?: DataBuffer<T> }\ninterface BinaryDataProps<T extends Binary> extends DataProps_<T> { valueOffsets: ValueOffsetsBuffer; data?: DataBuffer<T> }\ninterface Utf8DataProps<T extends Utf8> extends DataProps_<T> { valueOffsets: ValueOffsetsBuffer; data?: DataBuffer<T> }\ninterface ListDataProps<T extends List> extends DataProps_<T> { valueOffsets: ValueOffsetsBuffer; child: Data<T['valueType']> }\ninterface FixedSizeListDataProps<T extends FixedSizeList> extends DataProps_<T> { child: Data<T['valueType']> }\ninterface StructDataProps<T extends Struct> extends DataProps_<T> { children: Data[] }\ninterface Map_DataProps<T extends Map_> extends DataProps_<T> { valueOffsets: ValueOffsetsBuffer; child: Data }\ninterface SparseUnionDataProps<T extends SparseUnion> extends DataProps_<T> { typeIds: TypeIdsBuffer; children: Data[] }\ninterface DenseUnionDataProps<T extends DenseUnion> extends DataProps_<T> { typeIds: TypeIdsBuffer; children: Data[]; valueOffsets: ValueOffsetsBuffer }\ninterface UnionDataProps<T extends Union> extends DataProps_<T> { typeIds: TypeIdsBuffer; children: Data[]; valueOffsets?: ValueOffsetsBuffer }\n\nexport type DataProps<T extends DataType> = (\n    T extends Null /*            */ ? NullDataProps<T> :\n    T extends Int /*             */ ? IntDataProps<T> :\n    T extends Dictionary /*      */ ? DictionaryDataProps<T> :\n    T extends Float /*           */ ? FloatDataProps<T> :\n    T extends Bool /*            */ ? BoolDataProps<T> :\n    T extends Decimal /*         */ ? DecimalDataProps<T> :\n    T extends Date_ /*           */ ? Date_DataProps<T> :\n    T extends Time /*            */ ? TimeDataProps<T> :\n    T extends Timestamp /*       */ ? TimestampDataProps<T> :\n    T extends Interval /*        */ ? IntervalDataProps<T> :\n    T extends FixedSizeBinary /* */ ? FixedSizeBinaryDataProps<T> :\n    T extends Binary /*          */ ? BinaryDataProps<T> :\n    T extends Utf8 /*            */ ? Utf8DataProps<T> :\n    T extends List /*            */ ? ListDataProps<T> :\n    T extends FixedSizeList /*   */ ? FixedSizeListDataProps<T> :\n    T extends Struct /*          */ ? StructDataProps<T> :\n    T extends Map_ /*            */ ? Map_DataProps<T> :\n    T extends SparseUnion /*     */ ? SparseUnionDataProps<T> :\n    T extends DenseUnion /*      */ ? DenseUnionDataProps<T> :\n    T extends Union /*           */ ? UnionDataProps<T> :\n /*                                */ DataProps_<T>\n);\n\nexport function makeData<T extends Null>(props: NullDataProps<T>): Data<T>;\nexport function makeData<T extends Int>(props: IntDataProps<T>): Data<T>;\nexport function makeData<T extends Dictionary>(props: DictionaryDataProps<T>): Data<T>;\nexport function makeData<T extends Float>(props: FloatDataProps<T>): Data<T>;\nexport function makeData<T extends Bool>(props: BoolDataProps<T>): Data<T>;\nexport function makeData<T extends Decimal>(props: DecimalDataProps<T>): Data<T>;\nexport function makeData<T extends Date_>(props: Date_DataProps<T>): Data<T>;\nexport function makeData<T extends Time>(props: TimeDataProps<T>): Data<T>;\nexport function makeData<T extends Timestamp>(props: TimestampDataProps<T>): Data<T>;\nexport function makeData<T extends Interval>(props: IntervalDataProps<T>): Data<T>;\nexport function makeData<T extends FixedSizeBinary>(props: FixedSizeBinaryDataProps<T>): Data<T>;\nexport function makeData<T extends Binary>(props: BinaryDataProps<T>): Data<T>;\nexport function makeData<T extends Utf8>(props: Utf8DataProps<T>): Data<T>;\nexport function makeData<T extends List>(props: ListDataProps<T>): Data<T>;\nexport function makeData<T extends FixedSizeList>(props: FixedSizeListDataProps<T>): Data<T>;\nexport function makeData<T extends Struct>(props: StructDataProps<T>): Data<T>;\nexport function makeData<T extends Map_>(props: Map_DataProps<T>): Data<T>;\nexport function makeData<T extends SparseUnion>(props: SparseUnionDataProps<T>): Data<T>;\nexport function makeData<T extends DenseUnion>(props: DenseUnionDataProps<T>): Data<T>;\nexport function makeData<T extends Union>(props: UnionDataProps<T>): Data<T>;\nexport function makeData<T extends DataType>(props: DataProps_<T>): Data<T>;\nexport function makeData(props: any) {\n    return new MakeDataVisitor().visit(props);\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,MAAM,QAAQ,cAAc;AACrC,SAASC,UAAU,EAAEC,IAAI,QAAQ,YAAY;AAC7C,SAASC,QAAQ,EAAEC,aAAa,QAAQ,YAAY;AACpD,SAASC,gBAAgB,EAAEC,cAAc,QAAQ,gBAAgB;AAOjE;AAAe,OAAO,MAAMC,iBAAiB,GAAG,CAAC,CAAC;AAsBlD;;;AAGA,OAAM,MAAOC,IAAI;EA6CbC,YAAYC,IAAO,EAAEC,MAAc,EAAEC,MAAc,EAAEC,SAAkB,EAAEC,OAAuC,EAA4C;IAAA,IAA1CC,QAAA,GAAAC,SAAA,CAAAJ,MAAA,QAAAI,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAmB,EAAE;IAAA,IAAEE,UAAmB,GAAAF,SAAA,CAAAJ,MAAA,OAAAI,SAAA,MAAAC,SAAA;IACxJ,IAAI,CAACP,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACK,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACG,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACP,MAAM,GAAGQ,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,GAAG,CAACV,MAAM,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;IAClD,IAAI,CAACC,MAAM,GAAGO,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,GAAG,CAACT,MAAM,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;IAClD,IAAI,CAACU,UAAU,GAAGH,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,GAAG,CAACR,SAAS,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAC1D,IAAIU,MAAoC;IACxC,IAAIT,OAAO,YAAYN,IAAI,EAAE;MACzB,IAAI,CAACgB,MAAM,GAAGV,OAAO,CAACU,MAAM;MAC5B,IAAI,CAACC,MAAM,GAAGX,OAAO,CAACW,MAAM;MAC5B,IAAI,CAACC,OAAO,GAAGZ,OAAO,CAACY,OAAO;MAC9B,IAAI,CAACC,UAAU,GAAGb,OAAO,CAACa,UAAU;MACpC,IAAI,CAACC,YAAY,GAAGd,OAAO,CAACc,YAAY;KAC3C,MAAM;MACH,IAAI,CAACJ,MAAM,GAAGpB,aAAa,CAACM,IAAI,CAAC;MACjC,IAAII,OAAO,EAAE;QACT,CAACS,MAAM,GAAIT,OAAsB,CAAC,CAAC,CAAC,MAAM,IAAI,CAACc,YAAY,GAAGL,MAAM,CAAC;QACrE,CAACA,MAAM,GAAIT,OAAsB,CAAC,CAAC,CAAC,MAAM,IAAI,CAACW,MAAM,GAAGF,MAAM,CAAC;QAC/D,CAACA,MAAM,GAAIT,OAAsB,CAAC,CAAC,CAAC,MAAM,IAAI,CAACa,UAAU,GAAGJ,MAAM,CAAC;QACnE,CAACA,MAAM,GAAIT,OAAsB,CAAC,CAAC,CAAC,MAAM,IAAI,CAACY,OAAO,GAAGH,MAAM,CAAC;;;IAGxE,IAAI,CAACM,QAAQ,GAAG,IAAI,CAACP,UAAU,KAAK,CAAC,IAAI,IAAI,CAACK,UAAU,IAAI,IAAI,CAACA,UAAU,CAACG,UAAU,GAAG,CAAC;EAC9F;EAlDA,IAAWC,MAAMA,CAAA;IAAiB,OAAO,IAAI,CAACrB,IAAI,CAACqB,MAAM;EAAE;EAC3D,IAAWC,SAASA,CAAA;IAAqB,OAAO,IAAI,CAACtB,IAAI,CAACsB,SAAS;EAAE;EACrE,IAAWlB,OAAOA,CAAA;IACd,OAAO,CAAC,IAAI,CAACc,YAAY,EAAE,IAAI,CAACH,MAAM,EAAE,IAAI,CAACE,UAAU,EAAE,IAAI,CAACD,OAAO,CAAe;EACxF;EACA,IAAWI,UAAUA,CAAA;IACjB,IAAIA,UAAU,GAAG,CAAC;IAClB,MAAM;MAAEF,YAAY;MAAEH,MAAM;MAAEE,UAAU;MAAED;IAAO,CAAE,GAAG,IAAI;IAC1DE,YAAY,KAAKE,UAAU,IAAIF,YAAY,CAACE,UAAU,CAAC;IACvDL,MAAM,KAAKK,UAAU,IAAIL,MAAM,CAACK,UAAU,CAAC;IAC3CH,UAAU,KAAKG,UAAU,IAAIH,UAAU,CAACG,UAAU,CAAC;IACnDJ,OAAO,KAAKI,UAAU,IAAIJ,OAAO,CAACI,UAAU,CAAC;IAC7C,OAAO,IAAI,CAACf,QAAQ,CAACkB,MAAM,CAAC,CAACH,UAAU,EAAEI,KAAK,KAAKJ,UAAU,GAAGI,KAAK,CAACJ,UAAU,EAAEA,UAAU,CAAC;EACjG;EAIA,IAAWjB,SAASA,CAAA;IAChB,IAAIA,SAAS,GAAG,IAAI,CAACS,UAAU;IAC/B,IAAIK,UAAkC;IACtC,IAAId,SAAS,IAAIN,iBAAiB,KAAKoB,UAAU,GAAG,IAAI,CAACA,UAAU,CAAC,EAAE;MAClE,IAAI,CAACL,UAAU,GAAGT,SAAS,GAAG,IAAI,CAACD,MAAM,GAAGP,gBAAgB,CAACsB,UAAU,EAAE,IAAI,CAAChB,MAAM,EAAE,IAAI,CAACA,MAAM,GAAG,IAAI,CAACC,MAAM,CAAC;;IAEpH,OAAOC,SAAS;EACpB;EA4BOsB,QAAQA,CAACC,KAAa;IACzB,IAAI,IAAI,CAACP,QAAQ,IAAI,IAAI,CAAChB,SAAS,GAAG,CAAC,EAAE;MACrC,MAAMwB,GAAG,GAAG,IAAI,CAAC1B,MAAM,GAAGyB,KAAK;MAC/B,MAAME,GAAG,GAAG,IAAI,CAACX,UAAU,CAACU,GAAG,IAAI,CAAC,CAAC;MACrC,OAAO,CAACC,GAAG,GAAI,CAAC,IAAKD,GAAG,GAAG,CAAG,MAAM,CAAC;;IAEzC,OAAO,IAAI;EACf;EAEOE,QAAQA,CAACH,KAAa,EAAEI,KAAc;IACzC;IACA,IAAI,CAAC,IAAI,CAACX,QAAQ,EAAE;MAAE,OAAOW,KAAK;;IAClC;IACA,IAAI,CAAC,IAAI,CAACb,UAAU,IAAI,IAAI,CAACA,UAAU,CAACG,UAAU,IAAKM,KAAK,IAAI,CAAE,EAAE;MAChE,MAAM;QAAET;MAAU,CAAE,GAAG,IAAI,CAACc,kCAAkC,CAAC,IAAI,CAAC7B,MAAM,CAAC;MAC3E8B,MAAM,CAACC,MAAM,CAAC,IAAI,EAAE;QAAEhB,UAAU;QAAEL,UAAU,EAAE;MAAC,CAAE,CAAC;;IAEtD,MAAM;MAAEK,UAAU;MAAEhB;IAAM,CAAE,GAAG,IAAI;IACnC,MAAM0B,GAAG,GAAI1B,MAAM,GAAGyB,KAAK,IAAK,CAAC;IACjC,MAAMQ,GAAG,GAAG,CAACjC,MAAM,GAAGyB,KAAK,IAAI,CAAC;IAChC,MAAME,GAAG,GAAIX,UAAU,CAACU,GAAG,CAAC,IAAIO,GAAG,GAAI,CAAC;IACxC;IACA;IACAJ,KAAK,GAAGF,GAAG,KAAK,CAAC,KAAMX,UAAU,CAACU,GAAG,CAAC,IAAK,CAAC,IAAIO,GAAI,EAAI,IAAI,CAACtB,UAAU,GAAG,IAAI,CAACT,SAAS,GAAG,CAAE,CAAC,GACxFyB,GAAG,KAAK,CAAC,KAAMX,UAAU,CAACU,GAAG,CAAC,IAAI,EAAE,CAAC,IAAIO,GAAG,CAAC,EAAI,IAAI,CAACtB,UAAU,GAAG,IAAI,CAACT,SAAS,GAAG,CAAE,CAAC;IAC7F,OAAO2B,KAAK;EAChB;EAEOK,KAAKA,CAAA,EAA+L;IAAA,IAAtKnC,IAAA,GAAAM,SAAA,CAAAJ,MAAA,QAAAI,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAU,IAAI,CAACN,IAAW;IAAA,IAAEC,MAAM,GAAAK,SAAA,CAAAJ,MAAA,QAAAI,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,IAAI,CAACL,MAAM;IAAA,IAAEC,MAAM,GAAAI,SAAA,CAAAJ,MAAA,QAAAI,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,IAAI,CAACJ,MAAM;IAAA,IAAEC,SAAS,GAAAG,SAAA,CAAAJ,MAAA,QAAAI,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,IAAI,CAACM,UAAU;IAAA,IAAER,OAAA,GAAAE,SAAA,CAAAJ,MAAA,QAAAI,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAA2B,IAAI;IAAA,IAAED,QAAA,GAAAC,SAAA,CAAAJ,MAAA,QAAAI,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAmB,IAAI,CAACD,QAAQ;IACvM,OAAO,IAAIP,IAAI,CAACE,IAAI,EAAEC,MAAM,EAAEC,MAAM,EAAEC,SAAS,EAAEC,OAAO,EAAEC,QAAQ,EAAE,IAAI,CAACG,UAAU,CAAC;EACxF;EAEO4B,KAAKA,CAACnC,MAAc,EAAEC,MAAc;IACvC,MAAM;MAAEY,MAAM;MAAEO,MAAM;MAAEhB;IAAQ,CAAE,GAAG,IAAI;IACzC;IACA;IACA;IACA,MAAMF,SAAS,GAAG,EAAE,IAAI,CAACS,UAAU,KAAK,CAAC,CAAC,GAAG,CAAC;IAC9C,MAAMyB,WAAW,GAAGhB,MAAM,KAAK,EAAE,CAAC,sBAAsBP,MAAM,GAAG,CAAC;IAClE,MAAMV,OAAO,GAAG,IAAI,CAACkC,aAAa,CAACrC,MAAM,EAAEC,MAAM,EAAEY,MAAM,EAAEO,MAAM,CAAC;IAClE,OAAO,IAAI,CAACc,KAAK,CAAI,IAAI,CAACnC,IAAI,EAAE,IAAI,CAACC,MAAM,GAAGA,MAAM,EAAEC,MAAM,EAAEC,SAAS,EAAEC,OAAO;IAC5E;IACCC,QAAQ,CAACH,MAAM,KAAK,CAAC,IAAI,IAAI,CAACgB,YAAY,GAAIb,QAAQ,GAAG,IAAI,CAACkC,cAAc,CAAClC,QAAQ,EAAEgC,WAAW,GAAGpC,MAAM,EAAEoC,WAAW,GAAGnC,MAAM,CAAC,CAAC;EAC5I;EAEO6B,kCAAkCA,CAACS,SAAiB;IACvD,IAAI,IAAI,CAACnB,MAAM,KAAK7B,IAAI,CAACiD,IAAI,EAAE;MAC3B,OAAO,IAAI,CAACN,KAAK,CAAC,IAAI,CAACnC,IAAI,EAAE,CAAC,EAAEwC,SAAS,EAAE,CAAC,CAAC;;IAEjD,MAAM;MAAEtC,MAAM;MAAEC;IAAS,CAAE,GAAG,IAAI;IAClC;IACA,MAAMuC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAEH,SAAS,GAAG,EAAE,GAAI,CAAC,EAAE,KAAK,CAAC,CAAC,CAACI,IAAI,CAAC,GAAG,EAAE,CAAC,EAAE1C,MAAM,IAAI,CAAC,CAAC;IACtF;IACAwC,MAAM,CAACxC,MAAM,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,IAAKA,MAAM,IAAIA,MAAM,GAAG,CAAC,CAAC,CAAE,IAAI,CAAC;IACzD;IACA,IAAIC,SAAS,GAAG,CAAC,EAAE;MACfuC,MAAM,CAACG,GAAG,CAACjD,cAAc,CAAC,IAAI,CAACK,MAAM,EAAEC,MAAM,EAAE,IAAI,CAACe,UAAU,CAAC,EAAE,CAAC,CAAC;;IAEvE,MAAMb,OAAO,GAAG,IAAI,CAACA,OAAO;IAC5BA,OAAO,CAACb,UAAU,CAACuD,QAAQ,CAAC,GAAGJ,MAAM;IACrC,OAAO,IAAI,CAACP,KAAK,CAAC,IAAI,CAACnC,IAAI,EAAE,CAAC,EAAEwC,SAAS,EAAErC,SAAS,IAAIqC,SAAS,GAAGtC,MAAM,CAAC,EAAEE,OAAO,CAAC;EACzF;EAEUkC,aAAaA,CAACrC,MAAc,EAAEC,MAAc,EAAEY,MAAc,EAAEO,MAAkB;IACtF,IAAI0B,GAAQ;IACZ,MAAM;MAAE3C;IAAO,CAAE,GAAG,IAAI;IACxB;IACA,CAAC2C,GAAG,GAAG3C,OAAO,CAACb,UAAU,CAACyD,IAAI,CAAC,MAAM5C,OAAO,CAACb,UAAU,CAACyD,IAAI,CAAC,GAAGD,GAAG,CAACE,QAAQ,CAAChD,MAAM,EAAEA,MAAM,GAAGC,MAAM,CAAC,CAAC;IACtG;IACA,CAAC6C,GAAG,GAAG3C,OAAO,CAACb,UAAU,CAAC2D,MAAM,CAAC,MAAM9C,OAAO,CAACb,UAAU,CAAC2D,MAAM,CAAC,GAAGH,GAAG,CAACE,QAAQ,CAAChD,MAAM,EAAEA,MAAM,GAAGC,MAAM,GAAG,CAAC,CAAC,CAAC;IAC1G;IACA,CAAC6C,GAAG,GAAG3C,OAAO,CAACb,UAAU,CAAC4D,IAAI,CAAC,MAAM/C,OAAO,CAACb,UAAU,CAAC4D,IAAI,CAAC,GAAG9B,MAAM,KAAK,CAAC,GAAG0B,GAAG,GAAGA,GAAG,CAACE,QAAQ,CAACnC,MAAM,GAAGb,MAAM,EAAEa,MAAM,IAAIb,MAAM,GAAGC,MAAM,CAAC,CAAC,CAAC;IACnJ,OAAOE,OAAO;EAClB;EAEUmC,cAAcA,CAAClC,QAAgB,EAAEJ,MAAc,EAAEC,MAAc;IACrE,OAAOG,QAAQ,CAAC+C,GAAG,CAAE5B,KAAK,IAAKA,KAAK,CAACY,KAAK,CAACnC,MAAM,EAAEC,MAAM,CAAC,CAAC;EAC/D;;AAGHJ,IAAI,CAACuD,SAAiB,CAAChD,QAAQ,GAAG2B,MAAM,CAACsB,MAAM,CAAC,EAAE,CAAC;AAcpD,SAASC,OAAO,QAAQ,eAAe;AACvC,SAASC,iBAAiB,EAAEC,YAAY,EAAEC,YAAY,QAAQ,mBAAmB;AAEjF,MAAMC,eAAgB,SAAQJ,OAAO;EAC1BK,KAAKA,CAAqBC,KAAU;IACvC,OAAO,IAAI,CAACC,UAAU,CAACD,KAAK,CAAC,MAAM,CAAC,CAAC,CAACE,IAAI,CAAC,IAAI,EAAEF,KAAK,CAAC;EAC3D;EACOG,SAASA,CAAiBH,KAAuB;IACpD,MAAM;MACF,CAAC,MAAM,GAAG7D,IAAI;MACd,CAAC,QAAQ,GAAGC,MAAM,GAAG,CAAC;MACtB,CAAC,QAAQ,GAAGC,MAAM,GAAG;IAAC,CACzB,GAAG2D,KAAK;IACT,OAAO,IAAI/D,IAAI,CAACE,IAAI,EAAEC,MAAM,EAAEC,MAAM,EAAE,CAAC,CAAC;EAC5C;EACO+D,SAASA,CAAiBJ,KAAuB;IACpD,MAAM;MAAE,CAAC,MAAM,GAAG7D,IAAI;MAAE,CAAC,QAAQ,GAAGC,MAAM,GAAG;IAAC,CAAE,GAAG4D,KAAK;IACxD,MAAM5C,UAAU,GAAGyC,YAAY,CAACG,KAAK,CAAC,YAAY,CAAC,CAAC;IACpD,MAAMK,IAAI,GAAGV,iBAAiB,CAACxD,IAAI,CAACsB,SAAS,EAAEuC,KAAK,CAAC,MAAM,CAAC,CAAC;IAC7D,MAAM;MAAE,CAAC,QAAQ,GAAG3D,MAAM,GAAGgE,IAAI,CAAChE,MAAM,IAAI,CAAC;MAAE,CAAC,WAAW,GAAGC,SAAS,GAAG0D,KAAK,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,GAAG;IAAC,CAAG,GAAGA,KAAK;IACjH,OAAO,IAAI/D,IAAI,CAACE,IAAI,EAAEC,MAAM,EAAEC,MAAM,EAAEC,SAAS,EAAE,CAACI,SAAS,EAAE2D,IAAI,EAAEjD,UAAU,CAAC,CAAC;EACnF;EACOkD,QAAQA,CAAgBN,KAAsB;IACjD,MAAM;MAAE,CAAC,MAAM,GAAG7D,IAAI;MAAE,CAAC,QAAQ,GAAGC,MAAM,GAAG;IAAC,CAAE,GAAG4D,KAAK;IACxD,MAAM5C,UAAU,GAAGyC,YAAY,CAACG,KAAK,CAAC,YAAY,CAAC,CAAC;IACpD,MAAMK,IAAI,GAAGV,iBAAiB,CAACxD,IAAI,CAACsB,SAAS,EAAEuC,KAAK,CAAC,MAAM,CAAC,CAAC;IAC7D,MAAM;MAAE,CAAC,QAAQ,GAAG3D,MAAM,GAAGgE,IAAI,CAAChE,MAAM;MAAE,CAAC,WAAW,GAAGC,SAAS,GAAG0D,KAAK,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,GAAG;IAAC,CAAG,GAAGA,KAAK;IAC5G,OAAO,IAAI/D,IAAI,CAACE,IAAI,EAAEC,MAAM,EAAEC,MAAM,EAAEC,SAAS,EAAE,CAACI,SAAS,EAAE2D,IAAI,EAAEjD,UAAU,CAAC,CAAC;EACnF;EACOmD,UAAUA,CAAkBP,KAAwB;IACvD,MAAM;MAAE,CAAC,MAAM,GAAG7D,IAAI;MAAE,CAAC,QAAQ,GAAGC,MAAM,GAAG;IAAC,CAAE,GAAG4D,KAAK;IACxD,MAAM5C,UAAU,GAAGyC,YAAY,CAACG,KAAK,CAAC,YAAY,CAAC,CAAC;IACpD,MAAMK,IAAI,GAAGV,iBAAiB,CAACxD,IAAI,CAACsB,SAAS,EAAEuC,KAAK,CAAC,MAAM,CAAC,CAAC;IAC7D,MAAM;MAAE,CAAC,QAAQ,GAAG3D,MAAM,GAAGgE,IAAI,CAAChE,MAAM;MAAE,CAAC,WAAW,GAAGC,SAAS,GAAG0D,KAAK,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,GAAG;IAAC,CAAG,GAAGA,KAAK;IAC5G,OAAO,IAAI/D,IAAI,CAACE,IAAI,EAAEC,MAAM,EAAEC,MAAM,EAAEC,SAAS,EAAE,CAACI,SAAS,EAAE2D,IAAI,EAAEjD,UAAU,CAAC,CAAC;EACnF;EACOoD,SAASA,CAAiBR,KAAuB;IACpD,MAAM;MAAE,CAAC,MAAM,GAAG7D,IAAI;MAAE,CAAC,QAAQ,GAAGC,MAAM,GAAG;IAAC,CAAE,GAAG4D,KAAK;IACxD,MAAMK,IAAI,GAAGR,YAAY,CAACG,KAAK,CAAC,MAAM,CAAC,CAAC;IACxC,MAAM5C,UAAU,GAAGyC,YAAY,CAACG,KAAK,CAAC,YAAY,CAAC,CAAC;IACpD,MAAM3C,YAAY,GAAGuC,YAAY,CAACI,KAAK,CAAC,cAAc,CAAC,CAAC;IACxD,MAAM;MAAE,CAAC,QAAQ,GAAG3D,MAAM,GAAGgB,YAAY,CAAChB,MAAM,GAAG,CAAC;MAAE,CAAC,WAAW,GAAGC,SAAS,GAAG0D,KAAK,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,GAAG;IAAC,CAAE,GAAGA,KAAK;IACvH,OAAO,IAAI/D,IAAI,CAACE,IAAI,EAAEC,MAAM,EAAEC,MAAM,EAAEC,SAAS,EAAE,CAACe,YAAY,EAAEgD,IAAI,EAAEjD,UAAU,CAAC,CAAC;EACtF;EACOqD,WAAWA,CAAmBT,KAAyB;IAC1D,MAAM;MAAE,CAAC,MAAM,GAAG7D,IAAI;MAAE,CAAC,QAAQ,GAAGC,MAAM,GAAG;IAAC,CAAE,GAAG4D,KAAK;IACxD,MAAMK,IAAI,GAAGR,YAAY,CAACG,KAAK,CAAC,MAAM,CAAC,CAAC;IACxC,MAAM5C,UAAU,GAAGyC,YAAY,CAACG,KAAK,CAAC,YAAY,CAAC,CAAC;IACpD,MAAM3C,YAAY,GAAGuC,YAAY,CAACI,KAAK,CAAC,cAAc,CAAC,CAAC;IACxD,MAAM;MAAE,CAAC,QAAQ,GAAG3D,MAAM,GAAGgB,YAAY,CAAChB,MAAM,GAAG,CAAC;MAAE,CAAC,WAAW,GAAGC,SAAS,GAAG0D,KAAK,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,GAAG;IAAC,CAAE,GAAGA,KAAK;IACvH,OAAO,IAAI/D,IAAI,CAACE,IAAI,EAAEC,MAAM,EAAEC,MAAM,EAAEC,SAAS,EAAE,CAACe,YAAY,EAAEgD,IAAI,EAAEjD,UAAU,CAAC,CAAC;EACtF;EACOsD,oBAAoBA,CAA4BV,KAAkC;IACrF,MAAM;MAAE,CAAC,MAAM,GAAG7D,IAAI;MAAE,CAAC,QAAQ,GAAGC,MAAM,GAAG;IAAC,CAAE,GAAG4D,KAAK;IACxD,MAAM5C,UAAU,GAAGyC,YAAY,CAACG,KAAK,CAAC,YAAY,CAAC,CAAC;IACpD,MAAMK,IAAI,GAAGV,iBAAiB,CAACxD,IAAI,CAACsB,SAAS,EAAEuC,KAAK,CAAC,MAAM,CAAC,CAAC;IAC7D,MAAM;MAAE,CAAC,QAAQ,GAAG3D,MAAM,GAAGgE,IAAI,CAAChE,MAAM,GAAGR,aAAa,CAACM,IAAI,CAAC;MAAE,CAAC,WAAW,GAAGG,SAAS,GAAG0D,KAAK,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,GAAG;IAAC,CAAG,GAAGA,KAAK;IAClI,OAAO,IAAI/D,IAAI,CAACE,IAAI,EAAEC,MAAM,EAAEC,MAAM,EAAEC,SAAS,EAAE,CAACI,SAAS,EAAE2D,IAAI,EAAEjD,UAAU,CAAC,CAAC;EACnF;EACOuD,SAASA,CAAkBX,KAAwB;IACtD,MAAM;MAAE,CAAC,MAAM,GAAG7D,IAAI;MAAE,CAAC,QAAQ,GAAGC,MAAM,GAAG;IAAC,CAAE,GAAG4D,KAAK;IACxD,MAAM5C,UAAU,GAAGyC,YAAY,CAACG,KAAK,CAAC,YAAY,CAAC,CAAC;IACpD,MAAMK,IAAI,GAAGV,iBAAiB,CAACxD,IAAI,CAACsB,SAAS,EAAEuC,KAAK,CAAC,MAAM,CAAC,CAAC;IAC7D,MAAM;MAAE,CAAC,QAAQ,GAAG3D,MAAM,GAAGgE,IAAI,CAAChE,MAAM,GAAGR,aAAa,CAACM,IAAI,CAAC;MAAE,CAAC,WAAW,GAAGG,SAAS,GAAG0D,KAAK,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,GAAG;IAAC,CAAG,GAAGA,KAAK;IAClI,OAAO,IAAI/D,IAAI,CAACE,IAAI,EAAEC,MAAM,EAAEC,MAAM,EAAEC,SAAS,EAAE,CAACI,SAAS,EAAE2D,IAAI,EAAEjD,UAAU,CAAC,CAAC;EACnF;EACOwD,cAAcA,CAAsBZ,KAA4B;IACnE,MAAM;MAAE,CAAC,MAAM,GAAG7D,IAAI;MAAE,CAAC,QAAQ,GAAGC,MAAM,GAAG;IAAC,CAAE,GAAG4D,KAAK;IACxD,MAAM5C,UAAU,GAAGyC,YAAY,CAACG,KAAK,CAAC,YAAY,CAAC,CAAC;IACpD,MAAMK,IAAI,GAAGV,iBAAiB,CAACxD,IAAI,CAACsB,SAAS,EAAEuC,KAAK,CAAC,MAAM,CAAC,CAAC;IAC7D,MAAM;MAAE,CAAC,QAAQ,GAAG3D,MAAM,GAAGgE,IAAI,CAAChE,MAAM,GAAGR,aAAa,CAACM,IAAI,CAAC;MAAE,CAAC,WAAW,GAAGG,SAAS,GAAG0D,KAAK,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,GAAG;IAAC,CAAG,GAAGA,KAAK;IAClI,OAAO,IAAI/D,IAAI,CAACE,IAAI,EAAEC,MAAM,EAAEC,MAAM,EAAEC,SAAS,EAAE,CAACI,SAAS,EAAE2D,IAAI,EAAEjD,UAAU,CAAC,CAAC;EACnF;EACOyD,SAASA,CAAiBb,KAAuB;IACpD,MAAM;MAAE,CAAC,MAAM,GAAG7D,IAAI;MAAE,CAAC,QAAQ,GAAGC,MAAM,GAAG;IAAC,CAAE,GAAG4D,KAAK;IACxD,MAAM5C,UAAU,GAAGyC,YAAY,CAACG,KAAK,CAAC,YAAY,CAAC,CAAC;IACpD,MAAMK,IAAI,GAAGV,iBAAiB,CAACxD,IAAI,CAACsB,SAAS,EAAEuC,KAAK,CAAC,MAAM,CAAC,CAAC;IAC7D,MAAM;MAAE,CAAC,QAAQ,GAAG3D,MAAM,GAAGgE,IAAI,CAAChE,MAAM,GAAGR,aAAa,CAACM,IAAI,CAAC;MAAE,CAAC,WAAW,GAAGG,SAAS,GAAG0D,KAAK,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,GAAG;IAAC,CAAG,GAAGA,KAAK;IAClI,OAAO,IAAI/D,IAAI,CAACE,IAAI,EAAEC,MAAM,EAAEC,MAAM,EAAEC,SAAS,EAAE,CAACI,SAAS,EAAE2D,IAAI,EAAEjD,UAAU,CAAC,CAAC;EACnF;EACO0D,YAAYA,CAAoBd,KAA0B;IAC7D,MAAM;MAAE,CAAC,MAAM,GAAG7D,IAAI;MAAE,CAAC,QAAQ,GAAGC,MAAM,GAAG;IAAC,CAAE,GAAG4D,KAAK;IACxD,MAAM5C,UAAU,GAAGyC,YAAY,CAACG,KAAK,CAAC,YAAY,CAAC,CAAC;IACpD,MAAMK,IAAI,GAAGV,iBAAiB,CAACxD,IAAI,CAACsB,SAAS,EAAEuC,KAAK,CAAC,MAAM,CAAC,CAAC;IAC7D,MAAM;MAAE,CAAC,QAAQ,GAAG3D,MAAM,GAAGgE,IAAI,CAAChE,MAAM,GAAGR,aAAa,CAACM,IAAI,CAAC;MAAE,CAAC,WAAW,GAAGG,SAAS,GAAG0D,KAAK,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,GAAG;IAAC,CAAG,GAAGA,KAAK;IAClI,OAAO,IAAI/D,IAAI,CAACE,IAAI,EAAEC,MAAM,EAAEC,MAAM,EAAEC,SAAS,EAAE,CAACI,SAAS,EAAE2D,IAAI,EAAEjD,UAAU,CAAC,CAAC;EACnF;EACO2D,SAASA,CAAiBf,KAAuB;IACpD,MAAM;MAAE,CAAC,MAAM,GAAG7D,IAAI;MAAE,CAAC,QAAQ,GAAGC,MAAM,GAAG,CAAC;MAAE,CAAC,OAAO,GAAGuB;IAAK,CAAE,GAAGqC,KAAK;IAC1E,MAAM5C,UAAU,GAAGyC,YAAY,CAACG,KAAK,CAAC,YAAY,CAAC,CAAC;IACpD,MAAM3C,YAAY,GAAGuC,YAAY,CAACI,KAAK,CAAC,cAAc,CAAC,CAAC;IACxD,MAAM;MAAE,CAAC,QAAQ,GAAG3D,MAAM,GAAGgB,YAAY,CAAChB,MAAM,GAAG,CAAC;MAAE,CAAC,WAAW,GAAGC,SAAS,GAAG0D,KAAK,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,GAAG;IAAC,CAAE,GAAGA,KAAK;IACvH,OAAO,IAAI/D,IAAI,CAACE,IAAI,EAAEC,MAAM,EAAEC,MAAM,EAAEC,SAAS,EAAE,CAACe,YAAY,EAAEX,SAAS,EAAEU,UAAU,CAAC,EAAE,CAACO,KAAK,CAAC,CAAC;EACpG;EACOqD,WAAWA,CAAmBhB,KAAyB;IAC1D,MAAM;MAAE,CAAC,MAAM,GAAG7D,IAAI;MAAE,CAAC,QAAQ,GAAGC,MAAM,GAAG,CAAC;MAAE,CAAC,UAAU,GAAGI,QAAQ,GAAG;IAAE,CAAE,GAAGwD,KAAK;IACrF,MAAM5C,UAAU,GAAGyC,YAAY,CAACG,KAAK,CAAC,YAAY,CAAC,CAAC;IACpD,MAAM;MACF3D,MAAM,GAAGG,QAAQ,CAACkB,MAAM,CAAC,CAACuD,GAAG,EAAAC,IAAA;QAAA,IAAE;UAAE7E;QAAM,CAAE,GAAA6E,IAAA;QAAA,OAAKtE,IAAI,CAACE,GAAG,CAACmE,GAAG,EAAE5E,MAAM,CAAC;MAAA,GAAE,CAAC,CAAC;MACvEC,SAAS,GAAG0D,KAAK,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,GAAG;IAAC,CAC3C,GAAGA,KAAK;IACT,OAAO,IAAI/D,IAAI,CAACE,IAAI,EAAEC,MAAM,EAAEC,MAAM,EAAEC,SAAS,EAAE,CAACI,SAAS,EAAEA,SAAS,EAAEU,UAAU,CAAC,EAAEZ,QAAQ,CAAC;EAClG;EACO2E,UAAUA,CAAkBnB,KAAwB;IACvD,MAAM;MAAE,CAAC,MAAM,GAAG7D,IAAI;MAAE,CAAC,QAAQ,GAAGC,MAAM,GAAG,CAAC;MAAE,CAAC,UAAU,GAAGI,QAAQ,GAAG;IAAE,CAAE,GAAGwD,KAAK;IACrF,MAAM5C,UAAU,GAAGyC,YAAY,CAACG,KAAK,CAAC,YAAY,CAAC,CAAC;IACpD,MAAM7C,OAAO,GAAGwC,iBAAiB,CAACxD,IAAI,CAACsB,SAAS,EAAEuC,KAAK,CAAC,SAAS,CAAC,CAAC;IACnE,MAAM;MAAE,CAAC,QAAQ,GAAG3D,MAAM,GAAGc,OAAO,CAACd,MAAM;MAAE,CAAC,WAAW,GAAGC,SAAS,GAAG0D,KAAK,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,GAAG;IAAC,CAAG,GAAGA,KAAK;IAC/G,IAAIpE,QAAQ,CAACwF,aAAa,CAACjF,IAAI,CAAC,EAAE;MAC9B,OAAO,IAAIF,IAAI,CAACE,IAAI,EAAEC,MAAM,EAAEC,MAAM,EAAEC,SAAS,EAAE,CAACI,SAAS,EAAEA,SAAS,EAAEU,UAAU,EAAED,OAAO,CAAC,EAAEX,QAAQ,CAAC;;IAE3G,MAAMa,YAAY,GAAGuC,YAAY,CAACI,KAAK,CAAC,cAAc,CAAC,CAAC;IACxD,OAAO,IAAI/D,IAAI,CAACE,IAAI,EAAEC,MAAM,EAAEC,MAAM,EAAEC,SAAS,EAAE,CAACe,YAAY,EAAEX,SAAS,EAAEU,UAAU,EAAED,OAAO,CAAC,EAAEX,QAAQ,CAAC;EAC9G;EACO6E,eAAeA,CAAuBrB,KAA6B;IACtE,MAAM;MAAE,CAAC,MAAM,GAAG7D,IAAI;MAAE,CAAC,QAAQ,GAAGC,MAAM,GAAG;IAAC,CAAE,GAAG4D,KAAK;IACxD,MAAM5C,UAAU,GAAGyC,YAAY,CAACG,KAAK,CAAC,YAAY,CAAC,CAAC;IACpD,MAAMK,IAAI,GAAGV,iBAAiB,CAACxD,IAAI,CAACmF,OAAO,CAAC7D,SAAS,EAAEuC,KAAK,CAAC,MAAM,CAAC,CAAC;IACrE,MAAM;MAAE,CAAC,YAAY,GAAGrD,UAAU,GAAG,IAAIlB,MAAM,CAAC,CAAC,IAAIqE,eAAe,EAAE,CAACC,KAAK,CAAC;QAAE5D,IAAI,EAAEA,IAAI,CAACQ;MAAU,CAAE,CAAC,CAAC;IAAC,CAAE,GAAGqD,KAAK;IACnH,MAAM;MAAE,CAAC,QAAQ,GAAG3D,MAAM,GAAGgE,IAAI,CAAChE,MAAM;MAAE,CAAC,WAAW,GAAGC,SAAS,GAAG0D,KAAK,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,GAAG;IAAC,CAAE,GAAGA,KAAK;IAC3G,OAAO,IAAI/D,IAAI,CAACE,IAAI,EAAEC,MAAM,EAAEC,MAAM,EAAEC,SAAS,EAAE,CAACI,SAAS,EAAE2D,IAAI,EAAEjD,UAAU,CAAC,EAAE,EAAE,EAAET,UAAU,CAAC;EACnG;EACO4E,aAAaA,CAAqBvB,KAA2B;IAChE,MAAM;MAAE,CAAC,MAAM,GAAG7D,IAAI;MAAE,CAAC,QAAQ,GAAGC,MAAM,GAAG;IAAC,CAAE,GAAG4D,KAAK;IACxD,MAAM5C,UAAU,GAAGyC,YAAY,CAACG,KAAK,CAAC,YAAY,CAAC,CAAC;IACpD,MAAMK,IAAI,GAAGV,iBAAiB,CAACxD,IAAI,CAACsB,SAAS,EAAEuC,KAAK,CAAC,MAAM,CAAC,CAAC;IAC7D,MAAM;MAAE,CAAC,QAAQ,GAAG3D,MAAM,GAAGgE,IAAI,CAAChE,MAAM,GAAGR,aAAa,CAACM,IAAI,CAAC;MAAE,CAAC,WAAW,GAAGG,SAAS,GAAG0D,KAAK,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,GAAG;IAAC,CAAG,GAAGA,KAAK;IAClI,OAAO,IAAI/D,IAAI,CAACE,IAAI,EAAEC,MAAM,EAAEC,MAAM,EAAEC,SAAS,EAAE,CAACI,SAAS,EAAE2D,IAAI,EAAEjD,UAAU,CAAC,CAAC;EACnF;EACOoE,kBAAkBA,CAA0BxB,KAAgC;IAC/E,MAAM;MAAE,CAAC,MAAM,GAAG7D,IAAI;MAAE,CAAC,QAAQ,GAAGC,MAAM,GAAG,CAAC;MAAE,CAAC,OAAO,GAAGuB,KAAK,GAAG,IAAImC,eAAe,EAAE,CAACC,KAAK,CAAC;QAAE5D,IAAI,EAAEA,IAAI,CAACsF;MAAS,CAAE;IAAC,CAAE,GAAGzB,KAAK;IAClI,MAAM5C,UAAU,GAAGyC,YAAY,CAACG,KAAK,CAAC,YAAY,CAAC,CAAC;IACpD,MAAM;MAAE,CAAC,QAAQ,GAAG3D,MAAM,GAAGsB,KAAK,CAACtB,MAAM,GAAGR,aAAa,CAACM,IAAI,CAAC;MAAE,CAAC,WAAW,GAAGG,SAAS,GAAG0D,KAAK,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,GAAG;IAAC,CAAE,GAAGA,KAAK;IAClI,OAAO,IAAI/D,IAAI,CAACE,IAAI,EAAEC,MAAM,EAAEC,MAAM,EAAEC,SAAS,EAAE,CAACI,SAAS,EAAEA,SAAS,EAAEU,UAAU,CAAC,EAAE,CAACO,KAAK,CAAC,CAAC;EACjG;EACO+D,QAAQA,CAAiB1B,KAAuB;IACnD,MAAM;MAAE,CAAC,MAAM,GAAG7D,IAAI;MAAE,CAAC,QAAQ,GAAGC,MAAM,GAAG,CAAC;MAAE,CAAC,OAAO,GAAGuB,KAAK,GAAG,IAAImC,eAAe,EAAE,CAACC,KAAK,CAAC;QAAE5D,IAAI,EAAEA,IAAI,CAACwF;MAAS,CAAE;IAAC,CAAE,GAAG3B,KAAK;IAClI,MAAM5C,UAAU,GAAGyC,YAAY,CAACG,KAAK,CAAC,YAAY,CAAC,CAAC;IACpD,MAAM3C,YAAY,GAAGuC,YAAY,CAACI,KAAK,CAAC,cAAc,CAAC,CAAC;IACxD,MAAM;MAAE,CAAC,QAAQ,GAAG3D,MAAM,GAAGgB,YAAY,CAAChB,MAAM,GAAG,CAAC;MAAE,CAAC,WAAW,GAAGC,SAAS,GAAG0D,KAAK,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,GAAG;IAAC,CAAG,GAAGA,KAAK;IACxH,OAAO,IAAI/D,IAAI,CAACE,IAAI,EAAEC,MAAM,EAAEC,MAAM,EAAEC,SAAS,EAAE,CAACe,YAAY,EAAEX,SAAS,EAAEU,UAAU,CAAC,EAAE,CAACO,KAAK,CAAC,CAAC;EACpG;;AA8EJ,OAAM,SAAUiE,QAAQA,CAAC5B,KAAU;EAC/B,OAAO,IAAIF,eAAe,EAAE,CAACC,KAAK,CAACC,KAAK,CAAC;AAC7C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}