{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { makeData } from '../data.mjs';\nimport { Field } from '../schema.mjs';\nimport { DataType } from '../type.mjs';\nimport { Visitor } from '../visitor.mjs';\nimport { packBools } from '../util/bit.mjs';\nimport { encodeUtf8 } from '../util/utf8.mjs';\nimport { Int64, Int128 } from '../util/int.mjs';\nimport { UnionMode, DateUnit } from '../enum.mjs';\nimport { toArrayBufferView } from '../util/buffer.mjs';\n/** @ignore */\nexport class VectorLoader extends Visitor {\n  constructor(bytes, nodes, buffers, dictionaries) {\n    super();\n    this.nodesIndex = -1;\n    this.buffersIndex = -1;\n    this.bytes = bytes;\n    this.nodes = nodes;\n    this.buffers = buffers;\n    this.dictionaries = dictionaries;\n  }\n  visit(node) {\n    return super.visit(node instanceof Field ? node.type : node);\n  }\n  visitNull(type, {\n    length\n  } = this.nextFieldNode()) {\n    return makeData({\n      type,\n      length\n    });\n  }\n  visitBool(type, {\n    length,\n    nullCount\n  } = this.nextFieldNode()) {\n    return makeData({\n      type,\n      length,\n      nullCount,\n      nullBitmap: this.readNullBitmap(type, nullCount),\n      data: this.readData(type)\n    });\n  }\n  visitInt(type, {\n    length,\n    nullCount\n  } = this.nextFieldNode()) {\n    return makeData({\n      type,\n      length,\n      nullCount,\n      nullBitmap: this.readNullBitmap(type, nullCount),\n      data: this.readData(type)\n    });\n  }\n  visitFloat(type, {\n    length,\n    nullCount\n  } = this.nextFieldNode()) {\n    return makeData({\n      type,\n      length,\n      nullCount,\n      nullBitmap: this.readNullBitmap(type, nullCount),\n      data: this.readData(type)\n    });\n  }\n  visitUtf8(type, {\n    length,\n    nullCount\n  } = this.nextFieldNode()) {\n    return makeData({\n      type,\n      length,\n      nullCount,\n      nullBitmap: this.readNullBitmap(type, nullCount),\n      valueOffsets: this.readOffsets(type),\n      data: this.readData(type)\n    });\n  }\n  visitBinary(type, {\n    length,\n    nullCount\n  } = this.nextFieldNode()) {\n    return makeData({\n      type,\n      length,\n      nullCount,\n      nullBitmap: this.readNullBitmap(type, nullCount),\n      valueOffsets: this.readOffsets(type),\n      data: this.readData(type)\n    });\n  }\n  visitFixedSizeBinary(type, {\n    length,\n    nullCount\n  } = this.nextFieldNode()) {\n    return makeData({\n      type,\n      length,\n      nullCount,\n      nullBitmap: this.readNullBitmap(type, nullCount),\n      data: this.readData(type)\n    });\n  }\n  visitDate(type, {\n    length,\n    nullCount\n  } = this.nextFieldNode()) {\n    return makeData({\n      type,\n      length,\n      nullCount,\n      nullBitmap: this.readNullBitmap(type, nullCount),\n      data: this.readData(type)\n    });\n  }\n  visitTimestamp(type, {\n    length,\n    nullCount\n  } = this.nextFieldNode()) {\n    return makeData({\n      type,\n      length,\n      nullCount,\n      nullBitmap: this.readNullBitmap(type, nullCount),\n      data: this.readData(type)\n    });\n  }\n  visitTime(type, {\n    length,\n    nullCount\n  } = this.nextFieldNode()) {\n    return makeData({\n      type,\n      length,\n      nullCount,\n      nullBitmap: this.readNullBitmap(type, nullCount),\n      data: this.readData(type)\n    });\n  }\n  visitDecimal(type, {\n    length,\n    nullCount\n  } = this.nextFieldNode()) {\n    return makeData({\n      type,\n      length,\n      nullCount,\n      nullBitmap: this.readNullBitmap(type, nullCount),\n      data: this.readData(type)\n    });\n  }\n  visitList(type, {\n    length,\n    nullCount\n  } = this.nextFieldNode()) {\n    return makeData({\n      type,\n      length,\n      nullCount,\n      nullBitmap: this.readNullBitmap(type, nullCount),\n      valueOffsets: this.readOffsets(type),\n      'child': this.visit(type.children[0])\n    });\n  }\n  visitStruct(type, {\n    length,\n    nullCount\n  } = this.nextFieldNode()) {\n    return makeData({\n      type,\n      length,\n      nullCount,\n      nullBitmap: this.readNullBitmap(type, nullCount),\n      children: this.visitMany(type.children)\n    });\n  }\n  visitUnion(type) {\n    return type.mode === UnionMode.Sparse ? this.visitSparseUnion(type) : this.visitDenseUnion(type);\n  }\n  visitDenseUnion(type, {\n    length,\n    nullCount\n  } = this.nextFieldNode()) {\n    return makeData({\n      type,\n      length,\n      nullCount,\n      nullBitmap: this.readNullBitmap(type, nullCount),\n      typeIds: this.readTypeIds(type),\n      valueOffsets: this.readOffsets(type),\n      children: this.visitMany(type.children)\n    });\n  }\n  visitSparseUnion(type, {\n    length,\n    nullCount\n  } = this.nextFieldNode()) {\n    return makeData({\n      type,\n      length,\n      nullCount,\n      nullBitmap: this.readNullBitmap(type, nullCount),\n      typeIds: this.readTypeIds(type),\n      children: this.visitMany(type.children)\n    });\n  }\n  visitDictionary(type, {\n    length,\n    nullCount\n  } = this.nextFieldNode()) {\n    return makeData({\n      type,\n      length,\n      nullCount,\n      nullBitmap: this.readNullBitmap(type, nullCount),\n      data: this.readData(type.indices),\n      dictionary: this.readDictionary(type)\n    });\n  }\n  visitInterval(type, {\n    length,\n    nullCount\n  } = this.nextFieldNode()) {\n    return makeData({\n      type,\n      length,\n      nullCount,\n      nullBitmap: this.readNullBitmap(type, nullCount),\n      data: this.readData(type)\n    });\n  }\n  visitFixedSizeList(type, {\n    length,\n    nullCount\n  } = this.nextFieldNode()) {\n    return makeData({\n      type,\n      length,\n      nullCount,\n      nullBitmap: this.readNullBitmap(type, nullCount),\n      'child': this.visit(type.children[0])\n    });\n  }\n  visitMap(type, {\n    length,\n    nullCount\n  } = this.nextFieldNode()) {\n    return makeData({\n      type,\n      length,\n      nullCount,\n      nullBitmap: this.readNullBitmap(type, nullCount),\n      valueOffsets: this.readOffsets(type),\n      'child': this.visit(type.children[0])\n    });\n  }\n  nextFieldNode() {\n    return this.nodes[++this.nodesIndex];\n  }\n  nextBufferRange() {\n    return this.buffers[++this.buffersIndex];\n  }\n  readNullBitmap(type, nullCount, buffer = this.nextBufferRange()) {\n    return nullCount > 0 && this.readData(type, buffer) || new Uint8Array(0);\n  }\n  readOffsets(type, buffer) {\n    return this.readData(type, buffer);\n  }\n  readTypeIds(type, buffer) {\n    return this.readData(type, buffer);\n  }\n  readData(_type, {\n    length,\n    offset\n  } = this.nextBufferRange()) {\n    return this.bytes.subarray(offset, offset + length);\n  }\n  readDictionary(type) {\n    return this.dictionaries.get(type.id);\n  }\n}\n/** @ignore */\nexport class JSONVectorLoader extends VectorLoader {\n  constructor(sources, nodes, buffers, dictionaries) {\n    super(new Uint8Array(0), nodes, buffers, dictionaries);\n    this.sources = sources;\n  }\n  readNullBitmap(_type, nullCount, {\n    offset\n  } = this.nextBufferRange()) {\n    return nullCount <= 0 ? new Uint8Array(0) : packBools(this.sources[offset]);\n  }\n  readOffsets(_type, {\n    offset\n  } = this.nextBufferRange()) {\n    return toArrayBufferView(Uint8Array, toArrayBufferView(Int32Array, this.sources[offset]));\n  }\n  readTypeIds(type, {\n    offset\n  } = this.nextBufferRange()) {\n    return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, this.sources[offset]));\n  }\n  readData(type, {\n    offset\n  } = this.nextBufferRange()) {\n    const {\n      sources\n    } = this;\n    if (DataType.isTimestamp(type)) {\n      return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset]));\n    } else if ((DataType.isInt(type) || DataType.isTime(type)) && type.bitWidth === 64) {\n      return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset]));\n    } else if (DataType.isDate(type) && type.unit === DateUnit.MILLISECOND) {\n      return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset]));\n    } else if (DataType.isDecimal(type)) {\n      return toArrayBufferView(Uint8Array, Int128.convertArray(sources[offset]));\n    } else if (DataType.isBinary(type) || DataType.isFixedSizeBinary(type)) {\n      return binaryDataFromJSON(sources[offset]);\n    } else if (DataType.isBool(type)) {\n      return packBools(sources[offset]);\n    } else if (DataType.isUtf8(type)) {\n      return encodeUtf8(sources[offset].join(''));\n    }\n    return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, sources[offset].map(x => +x)));\n  }\n}\n/** @ignore */\nfunction binaryDataFromJSON(values) {\n  // \"DATA\": [\"49BC7D5B6C47D2\",\"3F5FB6D9322026\"]\n  // There are definitely more efficient ways to do this... but it gets the\n  // job done.\n  const joined = values.join('');\n  const data = new Uint8Array(joined.length / 2);\n  for (let i = 0; i < joined.length; i += 2) {\n    data[i >> 1] = Number.parseInt(joined.slice(i, i + 2), 16);\n  }\n  return data;\n}","map":{"version":3,"names":["makeData","Field","DataType","Visitor","packBools","encodeUtf8","Int64","Int128","UnionMode","DateUnit","toArrayBufferView","VectorLoader","constructor","bytes","nodes","buffers","dictionaries","nodesIndex","buffersIndex","visit","node","type","visitNull","length","nextFieldNode","visitBool","nullCount","nullBitmap","readNullBitmap","data","readData","visitInt","visitFloat","visitUtf8","valueOffsets","readOffsets","visitBinary","visitFixedSizeBinary","visitDate","visitTimestamp","visitTime","visitDecimal","visitList","children","visitStruct","visitMany","visitUnion","mode","Sparse","visitSparseUnion","visitDenseUnion","typeIds","readTypeIds","visitDictionary","indices","dictionary","readDictionary","visitInterval","visitFixedSizeList","visitMap","nextBufferRange","buffer","Uint8Array","_type","offset","subarray","get","id","JSONVectorLoader","sources","Int32Array","ArrayType","isTimestamp","convertArray","isInt","isTime","bitWidth","isDate","unit","MILLISECOND","isDecimal","isBinary","isFixedSizeBinary","binaryDataFromJSON","isBool","isUtf8","join","map","x","values","joined","i","Number","parseInt","slice"],"sources":["C:\\Users\\mvlor\\OneDrive\\Desktop\\custom_component\\multi_menu\\template\\my_component\\frontend\\node_modules\\apache-arrow\\src\\visitor\\vectorloader.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data, makeData } from '../data.js';\nimport * as type from '../type.js';\nimport { Field } from '../schema.js';\nimport { Vector } from '../vector.js';\nimport { DataType } from '../type.js';\nimport { Visitor } from '../visitor.js';\nimport { packBools } from '../util/bit.js';\nimport { encodeUtf8 } from '../util/utf8.js';\nimport { Int64, Int128 } from '../util/int.js';\nimport { UnionMode, DateUnit } from '../enum.js';\nimport { toArrayBufferView } from '../util/buffer.js';\nimport { BufferRegion, FieldNode } from '../ipc/metadata/message.js';\n\n/** @ignore */\nexport interface VectorLoader extends Visitor {\n    visit<T extends DataType>(node: Field<T> | T): Data<T>;\n    visitMany<T extends DataType>(nodes: (Field<T> | T)[]): Data<T>[];\n}\n\n/** @ignore */\nexport class VectorLoader extends Visitor {\n    private bytes: Uint8Array;\n    private nodes: FieldNode[];\n    private nodesIndex = -1;\n    private buffers: BufferRegion[];\n    private buffersIndex = -1;\n    private dictionaries: Map<number, Vector<any>>;\n    constructor(bytes: Uint8Array, nodes: FieldNode[], buffers: BufferRegion[], dictionaries: Map<number, Vector<any>>) {\n        super();\n        this.bytes = bytes;\n        this.nodes = nodes;\n        this.buffers = buffers;\n        this.dictionaries = dictionaries;\n    }\n\n    public visit<T extends DataType>(node: Field<T> | T): Data<T> {\n        return super.visit(node instanceof Field ? node.type : node);\n    }\n\n    public visitNull<T extends type.Null>(type: T, { length } = this.nextFieldNode()) {\n        return makeData({ type, length });\n    }\n    public visitBool<T extends type.Bool>(type: T, { length, nullCount } = this.nextFieldNode()) {\n        return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), data: this.readData(type) });\n    }\n    public visitInt<T extends type.Int>(type: T, { length, nullCount } = this.nextFieldNode()) {\n        return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), data: this.readData(type) });\n    }\n    public visitFloat<T extends type.Float>(type: T, { length, nullCount } = this.nextFieldNode()) {\n        return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), data: this.readData(type) });\n    }\n    public visitUtf8<T extends type.Utf8>(type: T, { length, nullCount } = this.nextFieldNode()) {\n        return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), valueOffsets: this.readOffsets(type), data: this.readData(type) });\n    }\n    public visitBinary<T extends type.Binary>(type: T, { length, nullCount } = this.nextFieldNode()) {\n        return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), valueOffsets: this.readOffsets(type), data: this.readData(type) });\n    }\n    public visitFixedSizeBinary<T extends type.FixedSizeBinary>(type: T, { length, nullCount } = this.nextFieldNode()) {\n        return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), data: this.readData(type) });\n    }\n    public visitDate<T extends type.Date_>(type: T, { length, nullCount } = this.nextFieldNode()) {\n        return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), data: this.readData(type) });\n    }\n    public visitTimestamp<T extends type.Timestamp>(type: T, { length, nullCount } = this.nextFieldNode()) {\n        return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), data: this.readData(type) });\n    }\n    public visitTime<T extends type.Time>(type: T, { length, nullCount } = this.nextFieldNode()) {\n        return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), data: this.readData(type) });\n    }\n    public visitDecimal<T extends type.Decimal>(type: T, { length, nullCount } = this.nextFieldNode()) {\n        return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), data: this.readData(type) });\n    }\n    public visitList<T extends type.List>(type: T, { length, nullCount } = this.nextFieldNode()) {\n        return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), valueOffsets: this.readOffsets(type), 'child': this.visit(type.children[0]) });\n    }\n    public visitStruct<T extends type.Struct>(type: T, { length, nullCount } = this.nextFieldNode()) {\n        return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), children: this.visitMany(type.children) });\n    }\n    public visitUnion<T extends type.Union>(type: T) {\n        return type.mode === UnionMode.Sparse ? this.visitSparseUnion(type as type.SparseUnion) : this.visitDenseUnion(type as type.DenseUnion);\n    }\n    public visitDenseUnion<T extends type.DenseUnion>(type: T, { length, nullCount } = this.nextFieldNode()) {\n        return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), typeIds: this.readTypeIds(type), valueOffsets: this.readOffsets(type), children: this.visitMany(type.children) });\n    }\n    public visitSparseUnion<T extends type.SparseUnion>(type: T, { length, nullCount } = this.nextFieldNode()) {\n        return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), typeIds: this.readTypeIds(type), children: this.visitMany(type.children) });\n    }\n    public visitDictionary<T extends type.Dictionary>(type: T, { length, nullCount } = this.nextFieldNode()) {\n        return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), data: this.readData(type.indices), dictionary: this.readDictionary(type) });\n    }\n    public visitInterval<T extends type.Interval>(type: T, { length, nullCount } = this.nextFieldNode()) {\n        return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), data: this.readData(type) });\n    }\n    public visitFixedSizeList<T extends type.FixedSizeList>(type: T, { length, nullCount } = this.nextFieldNode()) {\n        return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), 'child': this.visit(type.children[0]) });\n    }\n    public visitMap<T extends type.Map_>(type: T, { length, nullCount } = this.nextFieldNode()) {\n        return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), valueOffsets: this.readOffsets(type), 'child': this.visit(type.children[0]) });\n    }\n\n    protected nextFieldNode() { return this.nodes[++this.nodesIndex]; }\n    protected nextBufferRange() { return this.buffers[++this.buffersIndex]; }\n    protected readNullBitmap<T extends DataType>(type: T, nullCount: number, buffer = this.nextBufferRange()) {\n        return nullCount > 0 && this.readData(type, buffer) || new Uint8Array(0);\n    }\n    protected readOffsets<T extends DataType>(type: T, buffer?: BufferRegion) { return this.readData(type, buffer); }\n    protected readTypeIds<T extends DataType>(type: T, buffer?: BufferRegion) { return this.readData(type, buffer); }\n    protected readData<T extends DataType>(_type: T, { length, offset } = this.nextBufferRange()) {\n        return this.bytes.subarray(offset, offset + length);\n    }\n    protected readDictionary<T extends type.Dictionary>(type: T): Vector<T['dictionary']> {\n        return this.dictionaries.get(type.id)!;\n    }\n}\n\n/** @ignore */\nexport class JSONVectorLoader extends VectorLoader {\n    private sources: any[][];\n    constructor(sources: any[][], nodes: FieldNode[], buffers: BufferRegion[], dictionaries: Map<number, Vector<any>>) {\n        super(new Uint8Array(0), nodes, buffers, dictionaries);\n        this.sources = sources;\n    }\n    protected readNullBitmap<T extends DataType>(_type: T, nullCount: number, { offset } = this.nextBufferRange()) {\n        return nullCount <= 0 ? new Uint8Array(0) : packBools(this.sources[offset]);\n    }\n    protected readOffsets<T extends DataType>(_type: T, { offset } = this.nextBufferRange()) {\n        return toArrayBufferView(Uint8Array, toArrayBufferView(Int32Array, this.sources[offset]));\n    }\n    protected readTypeIds<T extends DataType>(type: T, { offset } = this.nextBufferRange()) {\n        return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, this.sources[offset]));\n    }\n    protected readData<T extends DataType>(type: T, { offset } = this.nextBufferRange()) {\n        const { sources } = this;\n        if (DataType.isTimestamp(type)) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if ((DataType.isInt(type) || DataType.isTime(type)) && type.bitWidth === 64) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if (DataType.isDate(type) && type.unit === DateUnit.MILLISECOND) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if (DataType.isDecimal(type)) {\n            return toArrayBufferView(Uint8Array, Int128.convertArray(sources[offset] as string[]));\n        } else if (DataType.isBinary(type) || DataType.isFixedSizeBinary(type)) {\n            return binaryDataFromJSON(sources[offset] as string[]);\n        } else if (DataType.isBool(type)) {\n            return packBools(sources[offset] as number[]);\n        } else if (DataType.isUtf8(type)) {\n            return encodeUtf8((sources[offset] as string[]).join(''));\n        }\n        return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, sources[offset].map((x) => +x)));\n    }\n}\n\n/** @ignore */\nfunction binaryDataFromJSON(values: string[]) {\n    // \"DATA\": [\"49BC7D5B6C47D2\",\"3F5FB6D9322026\"]\n    // There are definitely more efficient ways to do this... but it gets the\n    // job done.\n    const joined = values.join('');\n    const data = new Uint8Array(joined.length / 2);\n    for (let i = 0; i < joined.length; i += 2) {\n        data[i >> 1] = Number.parseInt(joined.slice(i, i + 2), 16);\n    }\n    return data;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}