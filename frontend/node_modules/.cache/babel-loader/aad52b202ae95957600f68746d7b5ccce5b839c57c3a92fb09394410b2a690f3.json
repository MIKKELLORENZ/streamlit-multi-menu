{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nvar _a;\nimport { Type } from './enum.mjs';\nimport { clampRange } from './util/vector.mjs';\nimport { DataType, strideForType } from './type.mjs';\nimport { Data, makeData } from './data.mjs';\nimport { isChunkedValid, computeChunkOffsets, computeChunkNullCounts, sliceChunks, wrapChunkedCall1, wrapChunkedCall2, wrapChunkedIndexOf } from './util/chunk.mjs';\nimport { BigInt64Array, BigUint64Array } from './util/compat.mjs';\nimport { instance as getVisitor } from './visitor/get.mjs';\nimport { instance as setVisitor } from './visitor/set.mjs';\nimport { instance as indexOfVisitor } from './visitor/indexof.mjs';\nimport { instance as iteratorVisitor } from './visitor/iterator.mjs';\nimport { instance as byteLengthVisitor } from './visitor/bytelength.mjs';\nconst visitorsByTypeId = {};\nconst vectorPrototypesByTypeId = {};\n/**\n * Array-like data structure. Use the convenience method {@link makeVector} and {@link vectorFromArray} to create vectors.\n */\nexport class Vector {\n  constructor(input) {\n    var _b, _c, _d;\n    const data = input[0] instanceof Vector ? input.flatMap(x => x.data) : input;\n    if (data.length === 0 || data.some(x => !(x instanceof Data))) {\n      throw new TypeError('Vector constructor expects an Array of Data instances.');\n    }\n    const type = (_b = data[0]) === null || _b === void 0 ? void 0 : _b.type;\n    switch (data.length) {\n      case 0:\n        this._offsets = [0];\n        break;\n      case 1:\n        {\n          // special case for unchunked vectors\n          const {\n            get,\n            set,\n            indexOf,\n            byteLength\n          } = visitorsByTypeId[type.typeId];\n          const unchunkedData = data[0];\n          this.isValid = index => isChunkedValid(unchunkedData, index);\n          this.get = index => get(unchunkedData, index);\n          this.set = (index, value) => set(unchunkedData, index, value);\n          this.indexOf = index => indexOf(unchunkedData, index);\n          this.getByteLength = index => byteLength(unchunkedData, index);\n          this._offsets = [0, unchunkedData.length];\n          break;\n        }\n      default:\n        Object.setPrototypeOf(this, vectorPrototypesByTypeId[type.typeId]);\n        this._offsets = computeChunkOffsets(data);\n        break;\n    }\n    this.data = data;\n    this.type = type;\n    this.stride = strideForType(type);\n    this.numChildren = (_d = (_c = type.children) === null || _c === void 0 ? void 0 : _c.length) !== null && _d !== void 0 ? _d : 0;\n    this.length = this._offsets[this._offsets.length - 1];\n  }\n  /**\n   * The aggregate size (in bytes) of this Vector's buffers and/or child Vectors.\n   */\n  get byteLength() {\n    if (this._byteLength === -1) {\n      this._byteLength = this.data.reduce((byteLength, data) => byteLength + data.byteLength, 0);\n    }\n    return this._byteLength;\n  }\n  /**\n   * The number of null elements in this Vector.\n   */\n  get nullCount() {\n    if (this._nullCount === -1) {\n      this._nullCount = computeChunkNullCounts(this.data);\n    }\n    return this._nullCount;\n  }\n  /**\n   * The Array or TypedAray constructor used for the JS representation\n   *  of the element's values in {@link Vector.prototype.toArray `toArray()`}.\n   */\n  get ArrayType() {\n    return this.type.ArrayType;\n  }\n  /**\n   * The name that should be printed when the Vector is logged in a message.\n   */\n  get [Symbol.toStringTag]() {\n    return `${this.VectorName}<${this.type[Symbol.toStringTag]}>`;\n  }\n  /**\n   * The name of this Vector.\n   */\n  get VectorName() {\n    return `${Type[this.type.typeId]}Vector`;\n  }\n  /**\n   * Check whether an element is null.\n   * @param index The index at which to read the validity bitmap.\n   */\n  // @ts-ignore\n  isValid(index) {\n    return false;\n  }\n  /**\n   * Get an element value by position.\n   * @param index The index of the element to read.\n   */\n  // @ts-ignore\n  get(index) {\n    return null;\n  }\n  /**\n   * Set an element value by position.\n   * @param index The index of the element to write.\n   * @param value The value to set.\n   */\n  // @ts-ignore\n  set(index, value) {\n    return;\n  }\n  /**\n   * Retrieve the index of the first occurrence of a value in an Vector.\n   * @param element The value to locate in the Vector.\n   * @param offset The index at which to begin the search. If offset is omitted, the search starts at index 0.\n   */\n  // @ts-ignore\n  indexOf(element, offset) {\n    return -1;\n  }\n  includes(element, offset) {\n    return this.indexOf(element, offset) > 0;\n  }\n  /**\n   * Get the size in bytes of an element by index.\n   * @param index The index at which to get the byteLength.\n   */\n  // @ts-ignore\n  getByteLength(index) {\n    return 0;\n  }\n  /**\n   * Iterator for the Vector's elements.\n   */\n  [Symbol.iterator]() {\n    return iteratorVisitor.visit(this);\n  }\n  /**\n   * Combines two or more Vectors of the same type.\n   * @param others Additional Vectors to add to the end of this Vector.\n   */\n  concat(...others) {\n    return new Vector(this.data.concat(others.flatMap(x => x.data).flat(Number.POSITIVE_INFINITY)));\n  }\n  /**\n   * Return a zero-copy sub-section of this Vector.\n   * @param start The beginning of the specified portion of the Vector.\n   * @param end The end of the specified portion of the Vector. This is exclusive of the element at the index 'end'.\n   */\n  slice(begin, end) {\n    return new Vector(clampRange(this, begin, end, ({\n      data,\n      _offsets\n    }, begin, end) => sliceChunks(data, _offsets, begin, end)));\n  }\n  toJSON() {\n    return [...this];\n  }\n  /**\n   * Return a JavaScript Array or TypedArray of the Vector's elements.\n   *\n   * @note If this Vector contains a single Data chunk and the Vector's type is a\n   *  primitive numeric type corresponding to one of the JavaScript TypedArrays, this\n   *  method returns a zero-copy slice of the underlying TypedArray values. If there's\n   *  more than one chunk, the resulting TypedArray will be a copy of the data from each\n   *  chunk's underlying TypedArray values.\n   *\n   * @returns An Array or TypedArray of the Vector's elements, based on the Vector's DataType.\n   */\n  toArray() {\n    const {\n      type,\n      data,\n      length,\n      stride,\n      ArrayType\n    } = this;\n    // Fast case, return subarray if possible\n    switch (type.typeId) {\n      case Type.Int:\n      case Type.Float:\n      case Type.Decimal:\n      case Type.Time:\n      case Type.Timestamp:\n        switch (data.length) {\n          case 0:\n            return new ArrayType();\n          case 1:\n            return data[0].values.subarray(0, length * stride);\n          default:\n            return data.reduce((memo, {\n              values,\n              length: chunk_length\n            }) => {\n              memo.array.set(values.subarray(0, chunk_length * stride), memo.offset);\n              memo.offset += chunk_length * stride;\n              return memo;\n            }, {\n              array: new ArrayType(length * stride),\n              offset: 0\n            }).array;\n        }\n    }\n    // Otherwise if not primitive, slow copy\n    return [...this];\n  }\n  /**\n   * Returns a string representation of the Vector.\n   *\n   * @returns A string representation of the Vector.\n   */\n  toString() {\n    return `[${[...this].join(',')}]`;\n  }\n  /**\n   * Returns a child Vector by name, or null if this Vector has no child with the given name.\n   * @param name The name of the child to retrieve.\n   */\n  getChild(name) {\n    var _b;\n    return this.getChildAt((_b = this.type.children) === null || _b === void 0 ? void 0 : _b.findIndex(f => f.name === name));\n  }\n  /**\n   * Returns a child Vector by index, or null if this Vector has no child at the supplied index.\n   * @param index The index of the child to retrieve.\n   */\n  getChildAt(index) {\n    if (index > -1 && index < this.numChildren) {\n      return new Vector(this.data.map(({\n        children\n      }) => children[index]));\n    }\n    return null;\n  }\n  get isMemoized() {\n    if (DataType.isDictionary(this.type)) {\n      return this.data[0].dictionary.isMemoized;\n    }\n    return false;\n  }\n  /**\n   * Adds memoization to the Vector's {@link get} method. For dictionary\n   * vectors, this method return a vector that memoizes only the dictionary\n   * values.\n   *\n   * Memoization is very useful when decoding a value is expensive such as\n   * Uft8. The memoization creates a cache of the size of the Vector and\n   * therfore increases memory usage.\n   *\n   * @returns A new vector that memoizes calls to {@link get}.\n   */\n  memoize() {\n    if (DataType.isDictionary(this.type)) {\n      const dictionary = new MemoizedVector(this.data[0].dictionary);\n      const newData = this.data.map(data => {\n        const cloned = data.clone();\n        cloned.dictionary = dictionary;\n        return cloned;\n      });\n      return new Vector(newData);\n    }\n    return new MemoizedVector(this);\n  }\n  /**\n   * Returns a vector without memoization of the {@link get} method. If this\n   * vector is not memoized, this method returns this vector.\n   *\n   * @returns A a vector without memoization.\n   */\n  unmemoize() {\n    if (DataType.isDictionary(this.type) && this.isMemoized) {\n      const dictionary = this.data[0].dictionary.unmemoize();\n      const newData = this.data.map(data => {\n        const newData = data.clone();\n        newData.dictionary = dictionary;\n        return newData;\n      });\n      return new Vector(newData);\n    }\n    return this;\n  }\n}\n_a = Symbol.toStringTag;\n// Initialize this static property via an IIFE so bundlers don't tree-shake\n// out this logic, but also so we're still compliant with `\"sideEffects\": false`\nVector[_a] = (proto => {\n  proto.type = DataType.prototype;\n  proto.data = [];\n  proto.length = 0;\n  proto.stride = 1;\n  proto.numChildren = 0;\n  proto._nullCount = -1;\n  proto._byteLength = -1;\n  proto._offsets = new Uint32Array([0]);\n  proto[Symbol.isConcatSpreadable] = true;\n  const typeIds = Object.keys(Type).map(T => Type[T]).filter(T => typeof T === 'number' && T !== Type.NONE);\n  for (const typeId of typeIds) {\n    const get = getVisitor.getVisitFnByTypeId(typeId);\n    const set = setVisitor.getVisitFnByTypeId(typeId);\n    const indexOf = indexOfVisitor.getVisitFnByTypeId(typeId);\n    const byteLength = byteLengthVisitor.getVisitFnByTypeId(typeId);\n    visitorsByTypeId[typeId] = {\n      get,\n      set,\n      indexOf,\n      byteLength\n    };\n    vectorPrototypesByTypeId[typeId] = Object.create(proto, {\n      ['isValid']: {\n        value: wrapChunkedCall1(isChunkedValid)\n      },\n      ['get']: {\n        value: wrapChunkedCall1(getVisitor.getVisitFnByTypeId(typeId))\n      },\n      ['set']: {\n        value: wrapChunkedCall2(setVisitor.getVisitFnByTypeId(typeId))\n      },\n      ['indexOf']: {\n        value: wrapChunkedIndexOf(indexOfVisitor.getVisitFnByTypeId(typeId))\n      },\n      ['getByteLength']: {\n        value: wrapChunkedCall1(byteLengthVisitor.getVisitFnByTypeId(typeId))\n      }\n    });\n  }\n  return 'Vector';\n})(Vector.prototype);\nclass MemoizedVector extends Vector {\n  constructor(vector) {\n    super(vector.data);\n    const get = this.get;\n    const set = this.set;\n    const slice = this.slice;\n    const cache = new Array(this.length);\n    Object.defineProperty(this, 'get', {\n      value(index) {\n        const cachedValue = cache[index];\n        if (cachedValue !== undefined) {\n          return cachedValue;\n        }\n        const value = get.call(this, index);\n        cache[index] = value;\n        return value;\n      }\n    });\n    Object.defineProperty(this, 'set', {\n      value(index, value) {\n        set.call(this, index, value);\n        cache[index] = value;\n      }\n    });\n    Object.defineProperty(this, 'slice', {\n      value: (begin, end) => new MemoizedVector(slice.call(this, begin, end))\n    });\n    Object.defineProperty(this, 'isMemoized', {\n      value: true\n    });\n    Object.defineProperty(this, 'unmemoize', {\n      value: () => new Vector(this.data)\n    });\n    Object.defineProperty(this, 'memoize', {\n      value: () => this\n    });\n  }\n}\nimport * as dtypes from './type.mjs';\nexport function makeVector(init) {\n  if (init) {\n    if (init instanceof Data) {\n      return new Vector([init]);\n    }\n    if (init instanceof Vector) {\n      return new Vector(init.data);\n    }\n    if (init.type instanceof DataType) {\n      return new Vector([makeData(init)]);\n    }\n    if (Array.isArray(init)) {\n      return new Vector(init.flatMap(v => unwrapInputs(v)));\n    }\n    if (ArrayBuffer.isView(init)) {\n      if (init instanceof DataView) {\n        init = new Uint8Array(init.buffer);\n      }\n      const props = {\n        offset: 0,\n        length: init.length,\n        nullCount: 0,\n        data: init\n      };\n      if (init instanceof Int8Array) {\n        return new Vector([makeData(Object.assign(Object.assign({}, props), {\n          type: new dtypes.Int8()\n        }))]);\n      }\n      if (init instanceof Int16Array) {\n        return new Vector([makeData(Object.assign(Object.assign({}, props), {\n          type: new dtypes.Int16()\n        }))]);\n      }\n      if (init instanceof Int32Array) {\n        return new Vector([makeData(Object.assign(Object.assign({}, props), {\n          type: new dtypes.Int32()\n        }))]);\n      }\n      if (init instanceof BigInt64Array) {\n        return new Vector([makeData(Object.assign(Object.assign({}, props), {\n          type: new dtypes.Int64()\n        }))]);\n      }\n      if (init instanceof Uint8Array || init instanceof Uint8ClampedArray) {\n        return new Vector([makeData(Object.assign(Object.assign({}, props), {\n          type: new dtypes.Uint8()\n        }))]);\n      }\n      if (init instanceof Uint16Array) {\n        return new Vector([makeData(Object.assign(Object.assign({}, props), {\n          type: new dtypes.Uint16()\n        }))]);\n      }\n      if (init instanceof Uint32Array) {\n        return new Vector([makeData(Object.assign(Object.assign({}, props), {\n          type: new dtypes.Uint32()\n        }))]);\n      }\n      if (init instanceof BigUint64Array) {\n        return new Vector([makeData(Object.assign(Object.assign({}, props), {\n          type: new dtypes.Uint64()\n        }))]);\n      }\n      if (init instanceof Float32Array) {\n        return new Vector([makeData(Object.assign(Object.assign({}, props), {\n          type: new dtypes.Float32()\n        }))]);\n      }\n      if (init instanceof Float64Array) {\n        return new Vector([makeData(Object.assign(Object.assign({}, props), {\n          type: new dtypes.Float64()\n        }))]);\n      }\n      throw new Error('Unrecognized input');\n    }\n  }\n  throw new Error('Unrecognized input');\n}\nfunction unwrapInputs(x) {\n  return x instanceof Data ? [x] : x instanceof Vector ? x.data : makeVector(x).data;\n}","map":{"version":3,"names":["Type","clampRange","DataType","strideForType","Data","makeData","isChunkedValid","computeChunkOffsets","computeChunkNullCounts","sliceChunks","wrapChunkedCall1","wrapChunkedCall2","wrapChunkedIndexOf","BigInt64Array","BigUint64Array","instance","getVisitor","setVisitor","indexOfVisitor","iteratorVisitor","byteLengthVisitor","visitorsByTypeId","vectorPrototypesByTypeId","Vector","constructor","input","data","flatMap","x","length","some","TypeError","type","_b","_offsets","get","set","indexOf","byteLength","typeId","unchunkedData","isValid","index","value","getByteLength","Object","setPrototypeOf","stride","numChildren","_d","_c","children","_byteLength","reduce","nullCount","_nullCount","ArrayType","Symbol","toStringTag","VectorName","element","offset","includes","iterator","visit","concat","others","flat","Number","POSITIVE_INFINITY","slice","begin","end","toJSON","toArray","Int","Float","Decimal","Time","Timestamp","values","subarray","memo","chunk_length","array","toString","join","getChild","name","getChildAt","findIndex","f","map","isMemoized","isDictionary","dictionary","memoize","MemoizedVector","newData","cloned","clone","unmemoize","_a","proto","prototype","Uint32Array","isConcatSpreadable","typeIds","keys","T","filter","NONE","getVisitFnByTypeId","create","vector","cache","Array","defineProperty","cachedValue","undefined","call","dtypes","makeVector","init","isArray","v","unwrapInputs","ArrayBuffer","isView","DataView","Uint8Array","buffer","props","Int8Array","assign","Int8","Int16Array","Int16","Int32Array","Int32","Int64","Uint8ClampedArray","Uint8","Uint16Array","Uint16","Uint32","Uint64","Float32Array","Float32","Float64Array","Float64","Error"],"sources":["C:\\Users\\mvlor\\OneDrive\\Desktop\\custom_component\\streamlit_multi_menu\\streamlit_multi_menu\\frontend\\node_modules\\apache-arrow\\src\\vector.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Type } from './enum.js';\nimport { clampRange } from './util/vector.js';\nimport { DataType, strideForType } from './type.js';\nimport { Data, makeData, DataProps } from './data.js';\nimport { BigIntArray, TypedArray, TypedArrayDataType } from './interfaces.js';\n\nimport {\n    isChunkedValid,\n    computeChunkOffsets,\n    computeChunkNullCounts,\n    sliceChunks,\n    wrapChunkedCall1,\n    wrapChunkedCall2,\n    wrapChunkedIndexOf,\n} from './util/chunk.js';\nimport { BigInt64Array, BigUint64Array } from './util/compat.js';\n\nimport { instance as getVisitor } from './visitor/get.js';\nimport { instance as setVisitor } from './visitor/set.js';\nimport { instance as indexOfVisitor } from './visitor/indexof.js';\nimport { instance as iteratorVisitor } from './visitor/iterator.js';\nimport { instance as byteLengthVisitor } from './visitor/bytelength.js';\n\n// @ts-ignore\nimport type { vectorFromArray } from './factories.js';\n\nexport interface Vector<T extends DataType = any> {\n    ///\n    // Virtual properties for the TypeScript compiler.\n    // These do not exist at runtime.\n    ///\n    readonly TType: T['TType'];\n    readonly TArray: T['TArray'];\n    readonly TValue: T['TValue'];\n\n    /**\n     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/isConcatSpreadable\n     */\n    [Symbol.isConcatSpreadable]: true;\n}\n\nconst visitorsByTypeId = {} as { [typeId: number]: { get: any; set: any; indexOf: any; byteLength: any } };\nconst vectorPrototypesByTypeId = {} as { [typeId: number]: any };\n\n/**\n * Array-like data structure. Use the convenience method {@link makeVector} and {@link vectorFromArray} to create vectors.\n */\nexport class Vector<T extends DataType = any> {\n\n    constructor(input: readonly (Data<T> | Vector<T>)[]) {\n        const data: Data<T>[] = input[0] instanceof Vector\n            ? (input as Vector<T>[]).flatMap(x => x.data)\n            : input as Data<T>[];\n        if (data.length === 0 || data.some((x) => !(x instanceof Data))) {\n            throw new TypeError('Vector constructor expects an Array of Data instances.');\n        }\n        const type = data[0]?.type;\n        switch (data.length) {\n            case 0: this._offsets = [0]; break;\n            case 1: {\n                // special case for unchunked vectors\n                const { get, set, indexOf, byteLength } = visitorsByTypeId[type.typeId];\n                const unchunkedData = data[0];\n\n                this.isValid = (index: number) => isChunkedValid(unchunkedData, index);\n                this.get = (index: number) => get(unchunkedData, index);\n                this.set = (index: number, value: T) => set(unchunkedData, index, value);\n                this.indexOf = (index: number) => indexOf(unchunkedData, index);\n                this.getByteLength = (index: number) => byteLength(unchunkedData, index);\n                this._offsets = [0, unchunkedData.length];\n                break;\n            }\n            default:\n                Object.setPrototypeOf(this, vectorPrototypesByTypeId[type.typeId]);\n                this._offsets = computeChunkOffsets(data);\n                break;\n        }\n        this.data = data;\n        this.type = type;\n        this.stride = strideForType(type);\n        this.numChildren = type.children?.length ?? 0;\n        this.length = this._offsets[this._offsets.length - 1];\n    }\n\n    declare protected _offsets: number[] | Uint32Array;\n    declare protected _nullCount: number;\n    declare protected _byteLength: number;\n\n    /**\n     * The {@link DataType `DataType`} of this Vector.\n     */\n    public declare readonly type: T;\n\n    /**\n     * The primitive {@link Data `Data`} instances for this Vector's elements.\n     */\n    public declare readonly data: ReadonlyArray<Data<T>>;\n\n    /**\n     * The number of elements in this Vector.\n     */\n    public declare readonly length: number;\n\n    /**\n     * The number of primitive values per Vector element.\n     */\n    public declare readonly stride: number;\n\n    /**\n     * The number of child Vectors if this Vector is a nested dtype.\n     */\n    public declare readonly numChildren: number;\n\n    /**\n     * The aggregate size (in bytes) of this Vector's buffers and/or child Vectors.\n     */\n    public get byteLength() {\n        if (this._byteLength === -1) {\n            this._byteLength = this.data.reduce((byteLength, data) => byteLength + data.byteLength, 0);\n        }\n        return this._byteLength;\n    }\n\n    /**\n     * The number of null elements in this Vector.\n     */\n    public get nullCount() {\n        if (this._nullCount === -1) {\n            this._nullCount = computeChunkNullCounts(this.data);\n        }\n        return this._nullCount;\n    }\n\n    /**\n     * The Array or TypedAray constructor used for the JS representation\n     *  of the element's values in {@link Vector.prototype.toArray `toArray()`}.\n     */\n    public get ArrayType(): T['ArrayType'] { return this.type.ArrayType; }\n\n    /**\n     * The name that should be printed when the Vector is logged in a message.\n     */\n    public get [Symbol.toStringTag]() {\n        return `${this.VectorName}<${this.type[Symbol.toStringTag]}>`;\n    }\n\n    /**\n     * The name of this Vector.\n     */\n    public get VectorName() { return `${Type[this.type.typeId]}Vector`; }\n\n    /**\n     * Check whether an element is null.\n     * @param index The index at which to read the validity bitmap.\n     */\n    // @ts-ignore\n    public isValid(index: number): boolean { return false; }\n\n    /**\n     * Get an element value by position.\n     * @param index The index of the element to read.\n     */\n    // @ts-ignore\n    public get(index: number): T['TValue'] | null { return null; }\n\n    /**\n     * Set an element value by position.\n     * @param index The index of the element to write.\n     * @param value The value to set.\n     */\n    // @ts-ignore\n    public set(index: number, value: T['TValue'] | null): void { return; }\n\n    /**\n     * Retrieve the index of the first occurrence of a value in an Vector.\n     * @param element The value to locate in the Vector.\n     * @param offset The index at which to begin the search. If offset is omitted, the search starts at index 0.\n     */\n    // @ts-ignore\n    public indexOf(element: T['TValue'], offset?: number): number { return -1; }\n\n    public includes(element: T['TValue'], offset?: number): boolean { return this.indexOf(element, offset) > 0; }\n\n    /**\n     * Get the size in bytes of an element by index.\n     * @param index The index at which to get the byteLength.\n     */\n    // @ts-ignore\n    public getByteLength(index: number): number { return 0; }\n\n    /**\n     * Iterator for the Vector's elements.\n     */\n    public [Symbol.iterator](): IterableIterator<T['TValue'] | null> {\n        return iteratorVisitor.visit(this);\n    }\n\n    /**\n     * Combines two or more Vectors of the same type.\n     * @param others Additional Vectors to add to the end of this Vector.\n     */\n    public concat(...others: Vector<T>[]): Vector<T> {\n        return new Vector(this.data.concat(others.flatMap((x) => x.data).flat(Number.POSITIVE_INFINITY)));\n    }\n\n    /**\n     * Return a zero-copy sub-section of this Vector.\n     * @param start The beginning of the specified portion of the Vector.\n     * @param end The end of the specified portion of the Vector. This is exclusive of the element at the index 'end'.\n     */\n    public slice(begin?: number, end?: number): Vector<T> {\n        return new Vector(clampRange(this, begin, end, ({ data, _offsets }, begin, end) =>\n            sliceChunks(data, _offsets, begin, end)\n        ));\n    }\n\n    public toJSON() { return [...this]; }\n\n    /**\n     * Return a JavaScript Array or TypedArray of the Vector's elements.\n     *\n     * @note If this Vector contains a single Data chunk and the Vector's type is a\n     *  primitive numeric type corresponding to one of the JavaScript TypedArrays, this\n     *  method returns a zero-copy slice of the underlying TypedArray values. If there's\n     *  more than one chunk, the resulting TypedArray will be a copy of the data from each\n     *  chunk's underlying TypedArray values.\n     *\n     * @returns An Array or TypedArray of the Vector's elements, based on the Vector's DataType.\n     */\n    public toArray(): T['TArray'] {\n        const { type, data, length, stride, ArrayType } = this;\n        // Fast case, return subarray if possible\n        switch (type.typeId) {\n            case Type.Int:\n            case Type.Float:\n            case Type.Decimal:\n            case Type.Time:\n            case Type.Timestamp:\n                switch (data.length) {\n                    case 0: return new ArrayType();\n                    case 1: return data[0].values.subarray(0, length * stride);\n                    default: return data.reduce((memo, { values, length: chunk_length }) => {\n                        memo.array.set(values.subarray(0, chunk_length * stride), memo.offset);\n                        memo.offset += chunk_length * stride;\n                        return memo;\n                    }, { array: new ArrayType(length * stride), offset: 0 }).array;\n                }\n        }\n        // Otherwise if not primitive, slow copy\n        return [...this] as T['TArray'];\n    }\n\n    /**\n     * Returns a string representation of the Vector.\n     *\n     * @returns A string representation of the Vector.\n     */\n    public toString() {\n        return `[${[...this].join(',')}]`;\n    }\n\n    /**\n     * Returns a child Vector by name, or null if this Vector has no child with the given name.\n     * @param name The name of the child to retrieve.\n     */\n    public getChild<R extends keyof T['TChildren']>(name: R) {\n        return this.getChildAt(this.type.children?.findIndex((f) => f.name === name));\n    }\n\n    /**\n     * Returns a child Vector by index, or null if this Vector has no child at the supplied index.\n     * @param index The index of the child to retrieve.\n     */\n    public getChildAt<R extends DataType = any>(index: number): Vector<R> | null {\n        if (index > -1 && index < this.numChildren) {\n            return new Vector(this.data.map(({ children }) => children[index] as Data<R>));\n        }\n        return null;\n    }\n\n    public get isMemoized(): boolean {\n        if (DataType.isDictionary(this.type)) {\n            return this.data[0].dictionary!.isMemoized;\n        }\n        return false;\n    }\n\n    /**\n     * Adds memoization to the Vector's {@link get} method. For dictionary\n     * vectors, this method return a vector that memoizes only the dictionary\n     * values.\n     *\n     * Memoization is very useful when decoding a value is expensive such as\n     * Uft8. The memoization creates a cache of the size of the Vector and\n     * therfore increases memory usage.\n     *\n     * @returns A new vector that memoizes calls to {@link get}.\n     */\n    public memoize(): MemoizedVector<T> {\n        if (DataType.isDictionary(this.type)) {\n            const dictionary = new MemoizedVector(this.data[0].dictionary!);\n            const newData = this.data.map((data) => {\n                const cloned = data.clone();\n                cloned.dictionary = dictionary;\n                return cloned;\n            });\n            return new Vector(newData);\n        }\n        return new MemoizedVector(this);\n    }\n\n    /**\n     * Returns a vector without memoization of the {@link get} method. If this\n     * vector is not memoized, this method returns this vector.\n     *\n     * @returns A a vector without memoization.\n     */\n    public unmemoize(): Vector<T> {\n        if (DataType.isDictionary(this.type) && this.isMemoized) {\n            const dictionary = this.data[0].dictionary!.unmemoize();\n            const newData = this.data.map((data) => {\n                const newData = data.clone();\n                newData.dictionary = dictionary;\n                return newData;\n            });\n            return new Vector(newData);\n        }\n        return this;\n    }\n\n    // Initialize this static property via an IIFE so bundlers don't tree-shake\n    // out this logic, but also so we're still compliant with `\"sideEffects\": false`\n    protected static [Symbol.toStringTag] = ((proto: Vector) => {\n        (proto as any).type = DataType.prototype;\n        (proto as any).data = [];\n        (proto as any).length = 0;\n        (proto as any).stride = 1;\n        (proto as any).numChildren = 0;\n        (proto as any)._nullCount = -1;\n        (proto as any)._byteLength = -1;\n        (proto as any)._offsets = new Uint32Array([0]);\n        (proto as any)[Symbol.isConcatSpreadable] = true;\n\n        const typeIds: Type[] = Object.keys(Type)\n            .map((T: any) => Type[T] as any)\n            .filter((T: any) => typeof T === 'number' && T !== Type.NONE);\n\n        for (const typeId of typeIds) {\n            const get = getVisitor.getVisitFnByTypeId(typeId);\n            const set = setVisitor.getVisitFnByTypeId(typeId);\n            const indexOf = indexOfVisitor.getVisitFnByTypeId(typeId);\n            const byteLength = byteLengthVisitor.getVisitFnByTypeId(typeId);\n\n            visitorsByTypeId[typeId] = { get, set, indexOf, byteLength };\n            vectorPrototypesByTypeId[typeId] = Object.create(proto, {\n                ['isValid']: { value: wrapChunkedCall1(isChunkedValid) },\n                ['get']: { value: wrapChunkedCall1(getVisitor.getVisitFnByTypeId(typeId)) },\n                ['set']: { value: wrapChunkedCall2(setVisitor.getVisitFnByTypeId(typeId)) },\n                ['indexOf']: { value: wrapChunkedIndexOf(indexOfVisitor.getVisitFnByTypeId(typeId)) },\n                ['getByteLength']: { value: wrapChunkedCall1(byteLengthVisitor.getVisitFnByTypeId(typeId)) },\n            });\n        }\n\n        return 'Vector';\n    })(Vector.prototype);\n}\n\nclass MemoizedVector<T extends DataType = any> extends Vector<T> {\n\n    public constructor(vector: Vector<T>) {\n        super(vector.data);\n\n        const get = this.get;\n        const set = this.set;\n        const slice = this.slice;\n\n        const cache = new Array<T['TValue'] | null>(this.length);\n\n        Object.defineProperty(this, 'get', {\n            value(index: number) {\n                const cachedValue = cache[index];\n                if (cachedValue !== undefined) {\n                    return cachedValue;\n                }\n                const value = get.call(this, index);\n                cache[index] = value;\n                return value;\n            }\n        });\n\n        Object.defineProperty(this, 'set', {\n            value(index: number, value: T['TValue'] | null) {\n                set.call(this, index, value);\n                cache[index] = value;\n            }\n        });\n\n        Object.defineProperty(this, 'slice', {\n            value: (begin?: number, end?: number) => new MemoizedVector(slice.call(this, begin, end))\n        });\n\n        Object.defineProperty(this, 'isMemoized', { value: true });\n\n        Object.defineProperty(this, 'unmemoize', {\n            value: () => new Vector(this.data)\n        });\n\n        Object.defineProperty(this, 'memoize', {\n            value: () => this\n        });\n    }\n}\n\nimport * as dtypes from './type.js';\n\n/**\n * Creates a Vector without data copies.\n *\n * @example\n * ```ts\n * const vector = makeVector(new Int32Array([1, 2, 3]));\n * ```\n */\nexport function makeVector<T extends TypedArray | BigIntArray>(data: T | readonly T[]): Vector<TypedArrayDataType<T>>;\nexport function makeVector<T extends DataView>(data: T | readonly T[]): Vector<dtypes.Int8>;\nexport function makeVector<T extends DataType>(data: Data<T> | readonly Data<T>[]): Vector<T>;\nexport function makeVector<T extends DataType>(data: Vector<T> | readonly Vector<T>[]): Vector<T>;\nexport function makeVector<T extends DataType>(data: DataProps<T> | readonly DataProps<T>[]): Vector<T>;\n\nexport function makeVector(init: any) {\n    if (init) {\n        if (init instanceof Data) { return new Vector([init]); }\n        if (init instanceof Vector) { return new Vector(init.data); }\n        if (init.type instanceof DataType) { return new Vector([makeData(init)]); }\n        if (Array.isArray(init)) {\n            return new Vector(init.flatMap(v => unwrapInputs(v)));\n        }\n        if (ArrayBuffer.isView(init)) {\n            if (init instanceof DataView) {\n                init = new Uint8Array(init.buffer);\n            }\n            const props = { offset: 0, length: init.length, nullCount: 0, data: init };\n            if (init instanceof Int8Array) { return new Vector([makeData({ ...props, type: new dtypes.Int8 })]); }\n            if (init instanceof Int16Array) { return new Vector([makeData({ ...props, type: new dtypes.Int16 })]); }\n            if (init instanceof Int32Array) { return new Vector([makeData({ ...props, type: new dtypes.Int32 })]); }\n            if (init instanceof BigInt64Array) { return new Vector([makeData({ ...props, type: new dtypes.Int64 })]); }\n            if (init instanceof Uint8Array || init instanceof Uint8ClampedArray) { return new Vector([makeData({ ...props, type: new dtypes.Uint8 })]); }\n            if (init instanceof Uint16Array) { return new Vector([makeData({ ...props, type: new dtypes.Uint16 })]); }\n            if (init instanceof Uint32Array) { return new Vector([makeData({ ...props, type: new dtypes.Uint32 })]); }\n            if (init instanceof BigUint64Array) { return new Vector([makeData({ ...props, type: new dtypes.Uint64 })]); }\n            if (init instanceof Float32Array) { return new Vector([makeData({ ...props, type: new dtypes.Float32 })]); }\n            if (init instanceof Float64Array) { return new Vector([makeData({ ...props, type: new dtypes.Float64 })]); }\n            throw new Error('Unrecognized input');\n        }\n    }\n    throw new Error('Unrecognized input');\n}\n\nfunction unwrapInputs(x: any) {\n    return x instanceof Data ? [x] : (x instanceof Vector ? x.data : makeVector(x).data);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}