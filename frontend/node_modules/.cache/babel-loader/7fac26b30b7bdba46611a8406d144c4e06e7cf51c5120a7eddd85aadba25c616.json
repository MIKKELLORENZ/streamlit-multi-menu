{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Vector } from '../vector.mjs';\nimport { Visitor } from '../visitor.mjs';\nimport { UnionMode } from '../enum.mjs';\nimport { RecordBatch } from '../recordbatch.mjs';\nimport { rebaseValueOffsets } from '../util/buffer.mjs';\nimport { packBools, truncateBitmap } from '../util/bit.mjs';\nimport { BufferRegion, FieldNode } from '../ipc/metadata/message.mjs';\nimport { DataType } from '../type.mjs';\n/** @ignore */\nexport class VectorAssembler extends Visitor {\n  constructor() {\n    super();\n    this._byteLength = 0;\n    this._nodes = [];\n    this._buffers = [];\n    this._bufferRegions = [];\n  }\n  /** @nocollapse */\n  static assemble(...args) {\n    const unwrap = nodes => nodes.flatMap(node => Array.isArray(node) ? unwrap(node) : node instanceof RecordBatch ? node.data.children : node.data);\n    const assembler = new VectorAssembler();\n    assembler.visitMany(unwrap(args));\n    return assembler;\n  }\n  visit(data) {\n    if (data instanceof Vector) {\n      this.visitMany(data.data);\n      return this;\n    }\n    const {\n      type\n    } = data;\n    if (!DataType.isDictionary(type)) {\n      const {\n        length,\n        nullCount\n      } = data;\n      if (length > 2147483647) {\n        /* istanbul ignore next */\n        throw new RangeError('Cannot write arrays larger than 2^31 - 1 in length');\n      }\n      if (!DataType.isNull(type)) {\n        addBuffer.call(this, nullCount <= 0 ? new Uint8Array(0) // placeholder validity buffer\n        : truncateBitmap(data.offset, length, data.nullBitmap));\n      }\n      this.nodes.push(new FieldNode(length, nullCount));\n    }\n    return super.visit(data);\n  }\n  visitNull(_null) {\n    return this;\n  }\n  visitDictionary(data) {\n    // Assemble the indices here, Dictionary assembled separately.\n    return this.visit(data.clone(data.type.indices));\n  }\n  get nodes() {\n    return this._nodes;\n  }\n  get buffers() {\n    return this._buffers;\n  }\n  get byteLength() {\n    return this._byteLength;\n  }\n  get bufferRegions() {\n    return this._bufferRegions;\n  }\n}\n/** @ignore */\nfunction addBuffer(values) {\n  const byteLength = values.byteLength + 7 & ~7; // Round up to a multiple of 8\n  this.buffers.push(values);\n  this.bufferRegions.push(new BufferRegion(this._byteLength, byteLength));\n  this._byteLength += byteLength;\n  return this;\n}\n/** @ignore */\nfunction assembleUnion(data) {\n  const {\n    type,\n    length,\n    typeIds,\n    valueOffsets\n  } = data;\n  // All Union Vectors have a typeIds buffer\n  addBuffer.call(this, typeIds);\n  // If this is a Sparse Union, treat it like all other Nested types\n  if (type.mode === UnionMode.Sparse) {\n    return assembleNestedVector.call(this, data);\n  } else if (type.mode === UnionMode.Dense) {\n    // If this is a Dense Union, add the valueOffsets buffer and potentially slice the children\n    if (data.offset <= 0) {\n      // If the Vector hasn't been sliced, write the existing valueOffsets\n      addBuffer.call(this, valueOffsets);\n      // We can treat this like all other Nested types\n      return assembleNestedVector.call(this, data);\n    } else {\n      // A sliced Dense Union is an unpleasant case. Because the offsets are different for\n      // each child vector, we need to \"rebase\" the valueOffsets for each child\n      // Union typeIds are not necessary 0-indexed\n      const maxChildTypeId = typeIds.reduce((x, y) => Math.max(x, y), typeIds[0]);\n      const childLengths = new Int32Array(maxChildTypeId + 1);\n      // Set all to -1 to indicate that we haven't observed a first occurrence of a particular child yet\n      const childOffsets = new Int32Array(maxChildTypeId + 1).fill(-1);\n      const shiftedOffsets = new Int32Array(length);\n      // If we have a non-zero offset, then the value offsets do not start at\n      // zero. We must a) create a new offsets array with shifted offsets and\n      // b) slice the values array accordingly\n      const unshiftedOffsets = rebaseValueOffsets(-valueOffsets[0], length, valueOffsets);\n      for (let typeId, shift, index = -1; ++index < length;) {\n        if ((shift = childOffsets[typeId = typeIds[index]]) === -1) {\n          shift = childOffsets[typeId] = unshiftedOffsets[typeId];\n        }\n        shiftedOffsets[index] = unshiftedOffsets[index] - shift;\n        ++childLengths[typeId];\n      }\n      addBuffer.call(this, shiftedOffsets);\n      // Slice and visit children accordingly\n      for (let child, childIndex = -1, numChildren = type.children.length; ++childIndex < numChildren;) {\n        if (child = data.children[childIndex]) {\n          const typeId = type.typeIds[childIndex];\n          const childLength = Math.min(length, childLengths[typeId]);\n          this.visit(child.slice(childOffsets[typeId], childLength));\n        }\n      }\n    }\n  }\n  return this;\n}\n/** @ignore */\nfunction assembleBoolVector(data) {\n  // Bool vector is a special case of FlatVector, as its data buffer needs to stay packed\n  let values;\n  if (data.nullCount >= data.length) {\n    // If all values are null, just insert a placeholder empty data buffer (fastest path)\n    return addBuffer.call(this, new Uint8Array(0));\n  } else if ((values = data.values) instanceof Uint8Array) {\n    // If values is already a Uint8Array, slice the bitmap (fast path)\n    return addBuffer.call(this, truncateBitmap(data.offset, data.length, values));\n  }\n  // Otherwise if the underlying data *isn't* a Uint8Array, enumerate the\n  // values as bools and re-pack them into a Uint8Array. This code isn't\n  // reachable unless you're trying to manipulate the Data internals,\n  // we're only doing this for safety.\n  /* istanbul ignore next */\n  return addBuffer.call(this, packBools(data.values));\n}\n/** @ignore */\nfunction assembleFlatVector(data) {\n  return addBuffer.call(this, data.values.subarray(0, data.length * data.stride));\n}\n/** @ignore */\nfunction assembleFlatListVector(data) {\n  const {\n    length,\n    values,\n    valueOffsets\n  } = data;\n  const firstOffset = valueOffsets[0];\n  const lastOffset = valueOffsets[length];\n  const byteLength = Math.min(lastOffset - firstOffset, values.byteLength - firstOffset);\n  // Push in the order FlatList types read their buffers\n  addBuffer.call(this, rebaseValueOffsets(-valueOffsets[0], length, valueOffsets)); // valueOffsets buffer first\n  addBuffer.call(this, values.subarray(firstOffset, firstOffset + byteLength)); // sliced values buffer second\n  return this;\n}\n/** @ignore */\nfunction assembleListVector(data) {\n  const {\n    length,\n    valueOffsets\n  } = data;\n  // If we have valueOffsets (MapVector, ListVector), push that buffer first\n  if (valueOffsets) {\n    addBuffer.call(this, rebaseValueOffsets(valueOffsets[0], length, valueOffsets));\n  }\n  // Then insert the List's values child\n  return this.visit(data.children[0]);\n}\n/** @ignore */\nfunction assembleNestedVector(data) {\n  return this.visitMany(data.type.children.map((_, i) => data.children[i]).filter(Boolean))[0];\n}\nVectorAssembler.prototype.visitBool = assembleBoolVector;\nVectorAssembler.prototype.visitInt = assembleFlatVector;\nVectorAssembler.prototype.visitFloat = assembleFlatVector;\nVectorAssembler.prototype.visitUtf8 = assembleFlatListVector;\nVectorAssembler.prototype.visitBinary = assembleFlatListVector;\nVectorAssembler.prototype.visitFixedSizeBinary = assembleFlatVector;\nVectorAssembler.prototype.visitDate = assembleFlatVector;\nVectorAssembler.prototype.visitTimestamp = assembleFlatVector;\nVectorAssembler.prototype.visitTime = assembleFlatVector;\nVectorAssembler.prototype.visitDecimal = assembleFlatVector;\nVectorAssembler.prototype.visitList = assembleListVector;\nVectorAssembler.prototype.visitStruct = assembleNestedVector;\nVectorAssembler.prototype.visitUnion = assembleUnion;\nVectorAssembler.prototype.visitInterval = assembleFlatVector;\nVectorAssembler.prototype.visitFixedSizeList = assembleListVector;\nVectorAssembler.prototype.visitMap = assembleListVector;","map":{"version":3,"names":["Vector","Visitor","UnionMode","RecordBatch","rebaseValueOffsets","packBools","truncateBitmap","BufferRegion","FieldNode","DataType","VectorAssembler","constructor","_byteLength","_nodes","_buffers","_bufferRegions","assemble","args","unwrap","nodes","flatMap","node","Array","isArray","data","children","assembler","visitMany","visit","type","isDictionary","length","nullCount","RangeError","isNull","addBuffer","call","Uint8Array","offset","nullBitmap","push","visitNull","_null","visitDictionary","clone","indices","buffers","byteLength","bufferRegions","values","assembleUnion","typeIds","valueOffsets","mode","Sparse","assembleNestedVector","Dense","maxChildTypeId","reduce","x","y","Math","max","childLengths","Int32Array","childOffsets","fill","shiftedOffsets","unshiftedOffsets","typeId","shift","index","child","childIndex","numChildren","childLength","min","slice","assembleBoolVector","assembleFlatVector","subarray","stride","assembleFlatListVector","firstOffset","lastOffset","assembleListVector","map","_","i","filter","Boolean","prototype","visitBool","visitInt","visitFloat","visitUtf8","visitBinary","visitFixedSizeBinary","visitDate","visitTimestamp","visitTime","visitDecimal","visitList","visitStruct","visitUnion","visitInterval","visitFixedSizeList","visitMap"],"sources":["C:\\Users\\mvlor\\OneDrive\\Desktop\\custom_component\\multi_menu\\template\\multi_menu\\frontend\\node_modules\\apache-arrow\\src\\visitor\\vectorassembler.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data.js';\nimport { Vector } from '../vector.js';\nimport { Visitor } from '../visitor.js';\nimport { Type, UnionMode } from '../enum.js';\nimport { RecordBatch } from '../recordbatch.js';\nimport { TypeToDataType } from '../interfaces.js';\nimport { rebaseValueOffsets } from '../util/buffer.js';\nimport { packBools, truncateBitmap } from '../util/bit.js';\nimport { BufferRegion, FieldNode } from '../ipc/metadata/message.js';\nimport {\n    DataType, Dictionary,\n    Float, Int, Date_, Interval, Time, Timestamp, Union,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n} from '../type.js';\n\n/** @ignore */\nexport interface VectorAssembler extends Visitor {\n    visit<T extends DataType>(node: Vector<T> | Data<T>): this;\n    visitMany<T extends DataType>(nodes: readonly Data<T>[]): this[];\n    getVisitFn<T extends Type>(node: T): (data: Data<TypeToDataType<T>>) => this;\n    getVisitFn<T extends DataType>(node: Vector<T> | Data<T> | T): (data: Data<T>) => this;\n\n    visitBool<T extends Bool>(data: Data<T>): this;\n    visitInt<T extends Int>(data: Data<T>): this;\n    visitFloat<T extends Float>(data: Data<T>): this;\n    visitUtf8<T extends Utf8>(data: Data<T>): this;\n    visitBinary<T extends Binary>(data: Data<T>): this;\n    visitFixedSizeBinary<T extends FixedSizeBinary>(data: Data<T>): this;\n    visitDate<T extends Date_>(data: Data<T>): this;\n    visitTimestamp<T extends Timestamp>(data: Data<T>): this;\n    visitTime<T extends Time>(data: Data<T>): this;\n    visitDecimal<T extends Decimal>(data: Data<T>): this;\n    visitList<T extends List>(data: Data<T>): this;\n    visitStruct<T extends Struct>(data: Data<T>): this;\n    visitUnion<T extends Union>(data: Data<T>): this;\n    visitInterval<T extends Interval>(data: Data<T>): this;\n    visitFixedSizeList<T extends FixedSizeList>(data: Data<T>): this;\n    visitMap<T extends Map_>(data: Data<T>): this;\n}\n\n/** @ignore */\nexport class VectorAssembler extends Visitor {\n\n    /** @nocollapse */\n    public static assemble<T extends Vector | RecordBatch>(...args: (T | T[])[]) {\n        const unwrap = (nodes: (T | T[])[]): Data[] =>\n            nodes.flatMap((node: T | T[]) => Array.isArray(node) ? unwrap(node) :\n                (node instanceof RecordBatch) ? node.data.children : node.data);\n        const assembler = new VectorAssembler();\n        assembler.visitMany(unwrap(args));\n        return assembler;\n    }\n\n    private constructor() { super(); }\n\n    public visit<T extends DataType>(data: Vector<T> | Data<T>): this {\n        if (data instanceof Vector) {\n            this.visitMany(data.data);\n            return this;\n        }\n        const { type } = data;\n        if (!DataType.isDictionary(type)) {\n            const { length, nullCount } = data;\n            if (length > 2147483647) {\n                /* istanbul ignore next */\n                throw new RangeError('Cannot write arrays larger than 2^31 - 1 in length');\n            }\n            if (!DataType.isNull(type)) {\n                addBuffer.call(this, nullCount <= 0\n                    ? new Uint8Array(0) // placeholder validity buffer\n                    : truncateBitmap(data.offset, length, data.nullBitmap)\n                );\n            }\n            this.nodes.push(new FieldNode(length, nullCount));\n        }\n        return super.visit(data);\n    }\n\n    public visitNull<T extends Null>(_null: Data<T>) {\n        return this;\n    }\n\n    public visitDictionary<T extends Dictionary>(data: Data<T>) {\n        // Assemble the indices here, Dictionary assembled separately.\n        return this.visit(data.clone(data.type.indices));\n    }\n\n    public get nodes() { return this._nodes; }\n    public get buffers() { return this._buffers; }\n    public get byteLength() { return this._byteLength; }\n    public get bufferRegions() { return this._bufferRegions; }\n\n    protected _byteLength = 0;\n    protected _nodes: FieldNode[] = [];\n    protected _buffers: ArrayBufferView[] = [];\n    protected _bufferRegions: BufferRegion[] = [];\n}\n\n/** @ignore */\nfunction addBuffer(this: VectorAssembler, values: ArrayBufferView) {\n    const byteLength = (values.byteLength + 7) & ~7; // Round up to a multiple of 8\n    this.buffers.push(values);\n    this.bufferRegions.push(new BufferRegion(this._byteLength, byteLength));\n    this._byteLength += byteLength;\n    return this;\n}\n\n/** @ignore */\nfunction assembleUnion<T extends Union>(this: VectorAssembler, data: Data<T>) {\n    const { type, length, typeIds, valueOffsets } = data;\n    // All Union Vectors have a typeIds buffer\n    addBuffer.call(this, typeIds);\n    // If this is a Sparse Union, treat it like all other Nested types\n    if (type.mode === UnionMode.Sparse) {\n        return assembleNestedVector.call(this, data);\n    } else if (type.mode === UnionMode.Dense) {\n        // If this is a Dense Union, add the valueOffsets buffer and potentially slice the children\n        if (data.offset <= 0) {\n            // If the Vector hasn't been sliced, write the existing valueOffsets\n            addBuffer.call(this, valueOffsets);\n            // We can treat this like all other Nested types\n            return assembleNestedVector.call(this, data);\n        } else {\n            // A sliced Dense Union is an unpleasant case. Because the offsets are different for\n            // each child vector, we need to \"rebase\" the valueOffsets for each child\n            // Union typeIds are not necessary 0-indexed\n            const maxChildTypeId = typeIds.reduce((x, y) => Math.max(x, y), typeIds[0]);\n            const childLengths = new Int32Array(maxChildTypeId + 1);\n            // Set all to -1 to indicate that we haven't observed a first occurrence of a particular child yet\n            const childOffsets = new Int32Array(maxChildTypeId + 1).fill(-1);\n            const shiftedOffsets = new Int32Array(length);\n            // If we have a non-zero offset, then the value offsets do not start at\n            // zero. We must a) create a new offsets array with shifted offsets and\n            // b) slice the values array accordingly\n            const unshiftedOffsets = rebaseValueOffsets(-valueOffsets[0], length, valueOffsets);\n            for (let typeId, shift, index = -1; ++index < length;) {\n                if ((shift = childOffsets[typeId = typeIds[index]]) === -1) {\n                    shift = childOffsets[typeId] = unshiftedOffsets[typeId];\n                }\n                shiftedOffsets[index] = unshiftedOffsets[index] - shift;\n                ++childLengths[typeId];\n            }\n            addBuffer.call(this, shiftedOffsets);\n            // Slice and visit children accordingly\n            for (let child: Data | null, childIndex = -1, numChildren = type.children.length; ++childIndex < numChildren;) {\n                if (child = data.children[childIndex]) {\n                    const typeId = type.typeIds[childIndex];\n                    const childLength = Math.min(length, childLengths[typeId]);\n                    this.visit(child.slice(childOffsets[typeId], childLength));\n                }\n            }\n        }\n    }\n    return this;\n}\n\n/** @ignore */\nfunction assembleBoolVector<T extends Bool>(this: VectorAssembler, data: Data<T>) {\n    // Bool vector is a special case of FlatVector, as its data buffer needs to stay packed\n    let values: Uint8Array;\n    if (data.nullCount >= data.length) {\n        // If all values are null, just insert a placeholder empty data buffer (fastest path)\n        return addBuffer.call(this, new Uint8Array(0));\n    } else if ((values = data.values) instanceof Uint8Array) {\n        // If values is already a Uint8Array, slice the bitmap (fast path)\n        return addBuffer.call(this, truncateBitmap(data.offset, data.length, values));\n    }\n    // Otherwise if the underlying data *isn't* a Uint8Array, enumerate the\n    // values as bools and re-pack them into a Uint8Array. This code isn't\n    // reachable unless you're trying to manipulate the Data internals,\n    // we're only doing this for safety.\n    /* istanbul ignore next */\n    return addBuffer.call(this, packBools(data.values));\n}\n\n/** @ignore */\nfunction assembleFlatVector<T extends Int | Float | FixedSizeBinary | Date_ | Timestamp | Time | Decimal | Interval>(this: VectorAssembler, data: Data<T>) {\n    return addBuffer.call(this, data.values.subarray(0, data.length * data.stride));\n}\n\n/** @ignore */\nfunction assembleFlatListVector<T extends Utf8 | Binary>(this: VectorAssembler, data: Data<T>) {\n    const { length, values, valueOffsets } = data;\n    const firstOffset = valueOffsets[0];\n    const lastOffset = valueOffsets[length];\n    const byteLength = Math.min(lastOffset - firstOffset, values.byteLength - firstOffset);\n    // Push in the order FlatList types read their buffers\n    addBuffer.call(this, rebaseValueOffsets(-valueOffsets[0], length, valueOffsets)); // valueOffsets buffer first\n    addBuffer.call(this, values.subarray(firstOffset, firstOffset + byteLength)); // sliced values buffer second\n    return this;\n}\n\n/** @ignore */\nfunction assembleListVector<T extends Map_ | List | FixedSizeList>(this: VectorAssembler, data: Data<T>) {\n    const { length, valueOffsets } = data;\n    // If we have valueOffsets (MapVector, ListVector), push that buffer first\n    if (valueOffsets) {\n        addBuffer.call(this, rebaseValueOffsets(valueOffsets[0], length, valueOffsets));\n    }\n    // Then insert the List's values child\n    return this.visit(data.children[0]);\n}\n\n/** @ignore */\nfunction assembleNestedVector<T extends Struct | Union>(this: VectorAssembler, data: Data<T>) {\n    return this.visitMany(data.type.children.map((_, i) => data.children[i]).filter(Boolean))[0];\n}\n\nVectorAssembler.prototype.visitBool = assembleBoolVector;\nVectorAssembler.prototype.visitInt = assembleFlatVector;\nVectorAssembler.prototype.visitFloat = assembleFlatVector;\nVectorAssembler.prototype.visitUtf8 = assembleFlatListVector;\nVectorAssembler.prototype.visitBinary = assembleFlatListVector;\nVectorAssembler.prototype.visitFixedSizeBinary = assembleFlatVector;\nVectorAssembler.prototype.visitDate = assembleFlatVector;\nVectorAssembler.prototype.visitTimestamp = assembleFlatVector;\nVectorAssembler.prototype.visitTime = assembleFlatVector;\nVectorAssembler.prototype.visitDecimal = assembleFlatVector;\nVectorAssembler.prototype.visitList = assembleListVector;\nVectorAssembler.prototype.visitStruct = assembleNestedVector;\nVectorAssembler.prototype.visitUnion = assembleUnion;\nVectorAssembler.prototype.visitInterval = assembleFlatVector;\nVectorAssembler.prototype.visitFixedSizeList = assembleListVector;\nVectorAssembler.prototype.visitMap = assembleListVector;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}