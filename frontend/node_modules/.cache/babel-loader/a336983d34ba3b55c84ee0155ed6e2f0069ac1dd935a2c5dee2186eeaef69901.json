{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Vector } from '../vector.mjs';\nimport { Visitor } from '../visitor.mjs';\nimport { encodeUtf8 } from '../util/utf8.mjs';\nimport { float64ToUint16 } from '../util/math.mjs';\nimport { UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum.mjs';\n/** @ignore */\nexport class SetVisitor extends Visitor {}\n/** @ignore */\nfunction wrapSet(fn) {\n  return (data, _1, _2) => {\n    if (data.setValid(_1, _2 != null)) {\n      return fn(data, _1, _2);\n    }\n  };\n}\n/** @ignore */\nexport const setEpochMsToDays = (data, index, epochMs) => {\n  data[index] = Math.trunc(epochMs / 86400000);\n};\n/** @ignore */\nexport const setEpochMsToMillisecondsLong = (data, index, epochMs) => {\n  data[index] = Math.trunc(epochMs % 4294967296);\n  data[index + 1] = Math.trunc(epochMs / 4294967296);\n};\n/** @ignore */\nexport const setEpochMsToMicrosecondsLong = (data, index, epochMs) => {\n  data[index] = Math.trunc(epochMs * 1000 % 4294967296);\n  data[index + 1] = Math.trunc(epochMs * 1000 / 4294967296);\n};\n/** @ignore */\nexport const setEpochMsToNanosecondsLong = (data, index, epochMs) => {\n  data[index] = Math.trunc(epochMs * 1000000 % 4294967296);\n  data[index + 1] = Math.trunc(epochMs * 1000000 / 4294967296);\n};\n/** @ignore */\nexport const setVariableWidthBytes = (values, valueOffsets, index, value) => {\n  if (index + 1 < valueOffsets.length) {\n    const {\n      [index]: x,\n      [index + 1]: y\n    } = valueOffsets;\n    values.set(value.subarray(0, y - x), x);\n  }\n};\n/** @ignore */\nconst setBool = ({\n  offset,\n  values\n}, index, val) => {\n  const idx = offset + index;\n  val ? values[idx >> 3] |= 1 << idx % 8 // true\n  : values[idx >> 3] &= ~(1 << idx % 8); // false\n};\n/** @ignore */\nexport const setInt = ({\n  values\n}, index, value) => {\n  values[index] = value;\n};\n/** @ignore */\nexport const setFloat = ({\n  values\n}, index, value) => {\n  values[index] = value;\n};\n/** @ignore */\nexport const setFloat16 = ({\n  values\n}, index, value) => {\n  values[index] = float64ToUint16(value);\n};\n/* istanbul ignore next */\n/** @ignore */\nexport const setAnyFloat = (data, index, value) => {\n  switch (data.type.precision) {\n    case Precision.HALF:\n      return setFloat16(data, index, value);\n    case Precision.SINGLE:\n    case Precision.DOUBLE:\n      return setFloat(data, index, value);\n  }\n};\n/** @ignore */\nexport const setDateDay = ({\n  values\n}, index, value) => {\n  setEpochMsToDays(values, index, value.valueOf());\n};\n/** @ignore */\nexport const setDateMillisecond = ({\n  values\n}, index, value) => {\n  setEpochMsToMillisecondsLong(values, index * 2, value.valueOf());\n};\n/** @ignore */\nexport const setFixedSizeBinary = ({\n  stride,\n  values\n}, index, value) => {\n  values.set(value.subarray(0, stride), stride * index);\n};\n/** @ignore */\nconst setBinary = ({\n  values,\n  valueOffsets\n}, index, value) => setVariableWidthBytes(values, valueOffsets, index, value);\n/** @ignore */\nconst setUtf8 = ({\n  values,\n  valueOffsets\n}, index, value) => {\n  setVariableWidthBytes(values, valueOffsets, index, encodeUtf8(value));\n};\n/* istanbul ignore next */\nexport const setDate = (data, index, value) => {\n  data.type.unit === DateUnit.DAY ? setDateDay(data, index, value) : setDateMillisecond(data, index, value);\n};\n/** @ignore */\nexport const setTimestampSecond = ({\n  values\n}, index, value) => setEpochMsToMillisecondsLong(values, index * 2, value / 1000);\n/** @ignore */\nexport const setTimestampMillisecond = ({\n  values\n}, index, value) => setEpochMsToMillisecondsLong(values, index * 2, value);\n/** @ignore */\nexport const setTimestampMicrosecond = ({\n  values\n}, index, value) => setEpochMsToMicrosecondsLong(values, index * 2, value);\n/** @ignore */\nexport const setTimestampNanosecond = ({\n  values\n}, index, value) => setEpochMsToNanosecondsLong(values, index * 2, value);\n/* istanbul ignore next */\n/** @ignore */\nexport const setTimestamp = (data, index, value) => {\n  switch (data.type.unit) {\n    case TimeUnit.SECOND:\n      return setTimestampSecond(data, index, value);\n    case TimeUnit.MILLISECOND:\n      return setTimestampMillisecond(data, index, value);\n    case TimeUnit.MICROSECOND:\n      return setTimestampMicrosecond(data, index, value);\n    case TimeUnit.NANOSECOND:\n      return setTimestampNanosecond(data, index, value);\n  }\n};\n/** @ignore */\nexport const setTimeSecond = ({\n  values\n}, index, value) => {\n  values[index] = value;\n};\n/** @ignore */\nexport const setTimeMillisecond = ({\n  values\n}, index, value) => {\n  values[index] = value;\n};\n/** @ignore */\nexport const setTimeMicrosecond = ({\n  values\n}, index, value) => {\n  values[index] = value;\n};\n/** @ignore */\nexport const setTimeNanosecond = ({\n  values\n}, index, value) => {\n  values[index] = value;\n};\n/* istanbul ignore next */\n/** @ignore */\nexport const setTime = (data, index, value) => {\n  switch (data.type.unit) {\n    case TimeUnit.SECOND:\n      return setTimeSecond(data, index, value);\n    case TimeUnit.MILLISECOND:\n      return setTimeMillisecond(data, index, value);\n    case TimeUnit.MICROSECOND:\n      return setTimeMicrosecond(data, index, value);\n    case TimeUnit.NANOSECOND:\n      return setTimeNanosecond(data, index, value);\n  }\n};\n/** @ignore */\nexport const setDecimal = ({\n  values,\n  stride\n}, index, value) => {\n  values.set(value.subarray(0, stride), stride * index);\n};\n/** @ignore */\nconst setList = (data, index, value) => {\n  const values = data.children[0];\n  const valueOffsets = data.valueOffsets;\n  const set = instance.getVisitFn(values);\n  if (Array.isArray(value)) {\n    for (let idx = -1, itr = valueOffsets[index], end = valueOffsets[index + 1]; itr < end;) {\n      set(values, itr++, value[++idx]);\n    }\n  } else {\n    for (let idx = -1, itr = valueOffsets[index], end = valueOffsets[index + 1]; itr < end;) {\n      set(values, itr++, value.get(++idx));\n    }\n  }\n};\n/** @ignore */\nconst setMap = (data, index, value) => {\n  const values = data.children[0];\n  const {\n    valueOffsets\n  } = data;\n  const set = instance.getVisitFn(values);\n  let {\n    [index]: idx,\n    [index + 1]: end\n  } = valueOffsets;\n  const entries = value instanceof Map ? value.entries() : Object.entries(value);\n  for (const val of entries) {\n    set(values, idx, val);\n    if (++idx >= end) break;\n  }\n};\n/** @ignore */\nconst _setStructArrayValue = (o, v) => (set, c, _, i) => c && set(c, o, v[i]);\n/** @ignore */\nconst _setStructVectorValue = (o, v) => (set, c, _, i) => c && set(c, o, v.get(i));\n/** @ignore */\nconst _setStructMapValue = (o, v) => (set, c, f, _) => c && set(c, o, v.get(f.name));\n/** @ignore */\nconst _setStructObjectValue = (o, v) => (set, c, f, _) => c && set(c, o, v[f.name]);\n/** @ignore */\nconst setStruct = (data, index, value) => {\n  const childSetters = data.type.children.map(f => instance.getVisitFn(f.type));\n  const set = value instanceof Map ? _setStructMapValue(index, value) : value instanceof Vector ? _setStructVectorValue(index, value) : Array.isArray(value) ? _setStructArrayValue(index, value) : _setStructObjectValue(index, value);\n  // eslint-disable-next-line unicorn/no-array-for-each\n  data.type.children.forEach((f, i) => set(childSetters[i], data.children[i], f, i));\n};\n/* istanbul ignore next */\n/** @ignore */\nconst setUnion = (data, index, value) => {\n  data.type.mode === UnionMode.Dense ? setDenseUnion(data, index, value) : setSparseUnion(data, index, value);\n};\n/** @ignore */\nconst setDenseUnion = (data, index, value) => {\n  const childIndex = data.type.typeIdToChildIndex[data.typeIds[index]];\n  const child = data.children[childIndex];\n  instance.visit(child, data.valueOffsets[index], value);\n};\n/** @ignore */\nconst setSparseUnion = (data, index, value) => {\n  const childIndex = data.type.typeIdToChildIndex[data.typeIds[index]];\n  const child = data.children[childIndex];\n  instance.visit(child, index, value);\n};\n/** @ignore */\nconst setDictionary = (data, index, value) => {\n  var _a;\n  (_a = data.dictionary) === null || _a === void 0 ? void 0 : _a.set(data.values[index], value);\n};\n/* istanbul ignore next */\n/** @ignore */\nexport const setIntervalValue = (data, index, value) => {\n  data.type.unit === IntervalUnit.DAY_TIME ? setIntervalDayTime(data, index, value) : setIntervalYearMonth(data, index, value);\n};\n/** @ignore */\nexport const setIntervalDayTime = ({\n  values\n}, index, value) => {\n  values.set(value.subarray(0, 2), 2 * index);\n};\n/** @ignore */\nexport const setIntervalYearMonth = ({\n  values\n}, index, value) => {\n  values[index] = value[0] * 12 + value[1] % 12;\n};\n/** @ignore */\nconst setFixedSizeList = (data, index, value) => {\n  const {\n    stride\n  } = data;\n  const child = data.children[0];\n  const set = instance.getVisitFn(child);\n  if (Array.isArray(value)) {\n    for (let idx = -1, offset = index * stride; ++idx < stride;) {\n      set(child, offset + idx, value[idx]);\n    }\n  } else {\n    for (let idx = -1, offset = index * stride; ++idx < stride;) {\n      set(child, offset + idx, value.get(idx));\n    }\n  }\n};\nSetVisitor.prototype.visitBool = wrapSet(setBool);\nSetVisitor.prototype.visitInt = wrapSet(setInt);\nSetVisitor.prototype.visitInt8 = wrapSet(setInt);\nSetVisitor.prototype.visitInt16 = wrapSet(setInt);\nSetVisitor.prototype.visitInt32 = wrapSet(setInt);\nSetVisitor.prototype.visitInt64 = wrapSet(setInt);\nSetVisitor.prototype.visitUint8 = wrapSet(setInt);\nSetVisitor.prototype.visitUint16 = wrapSet(setInt);\nSetVisitor.prototype.visitUint32 = wrapSet(setInt);\nSetVisitor.prototype.visitUint64 = wrapSet(setInt);\nSetVisitor.prototype.visitFloat = wrapSet(setAnyFloat);\nSetVisitor.prototype.visitFloat16 = wrapSet(setFloat16);\nSetVisitor.prototype.visitFloat32 = wrapSet(setFloat);\nSetVisitor.prototype.visitFloat64 = wrapSet(setFloat);\nSetVisitor.prototype.visitUtf8 = wrapSet(setUtf8);\nSetVisitor.prototype.visitBinary = wrapSet(setBinary);\nSetVisitor.prototype.visitFixedSizeBinary = wrapSet(setFixedSizeBinary);\nSetVisitor.prototype.visitDate = wrapSet(setDate);\nSetVisitor.prototype.visitDateDay = wrapSet(setDateDay);\nSetVisitor.prototype.visitDateMillisecond = wrapSet(setDateMillisecond);\nSetVisitor.prototype.visitTimestamp = wrapSet(setTimestamp);\nSetVisitor.prototype.visitTimestampSecond = wrapSet(setTimestampSecond);\nSetVisitor.prototype.visitTimestampMillisecond = wrapSet(setTimestampMillisecond);\nSetVisitor.prototype.visitTimestampMicrosecond = wrapSet(setTimestampMicrosecond);\nSetVisitor.prototype.visitTimestampNanosecond = wrapSet(setTimestampNanosecond);\nSetVisitor.prototype.visitTime = wrapSet(setTime);\nSetVisitor.prototype.visitTimeSecond = wrapSet(setTimeSecond);\nSetVisitor.prototype.visitTimeMillisecond = wrapSet(setTimeMillisecond);\nSetVisitor.prototype.visitTimeMicrosecond = wrapSet(setTimeMicrosecond);\nSetVisitor.prototype.visitTimeNanosecond = wrapSet(setTimeNanosecond);\nSetVisitor.prototype.visitDecimal = wrapSet(setDecimal);\nSetVisitor.prototype.visitList = wrapSet(setList);\nSetVisitor.prototype.visitStruct = wrapSet(setStruct);\nSetVisitor.prototype.visitUnion = wrapSet(setUnion);\nSetVisitor.prototype.visitDenseUnion = wrapSet(setDenseUnion);\nSetVisitor.prototype.visitSparseUnion = wrapSet(setSparseUnion);\nSetVisitor.prototype.visitDictionary = wrapSet(setDictionary);\nSetVisitor.prototype.visitInterval = wrapSet(setIntervalValue);\nSetVisitor.prototype.visitIntervalDayTime = wrapSet(setIntervalDayTime);\nSetVisitor.prototype.visitIntervalYearMonth = wrapSet(setIntervalYearMonth);\nSetVisitor.prototype.visitFixedSizeList = wrapSet(setFixedSizeList);\nSetVisitor.prototype.visitMap = wrapSet(setMap);\n/** @ignore */\nexport const instance = new SetVisitor();","map":{"version":3,"names":["Vector","Visitor","encodeUtf8","float64ToUint16","UnionMode","Precision","DateUnit","TimeUnit","IntervalUnit","SetVisitor","wrapSet","fn","data","_1","_2","setValid","setEpochMsToDays","index","epochMs","Math","trunc","setEpochMsToMillisecondsLong","setEpochMsToMicrosecondsLong","setEpochMsToNanosecondsLong","setVariableWidthBytes","values","valueOffsets","value","length","x","y","set","subarray","setBool","offset","val","idx","setInt","setFloat","setFloat16","setAnyFloat","type","precision","HALF","SINGLE","DOUBLE","setDateDay","valueOf","setDateMillisecond","setFixedSizeBinary","stride","setBinary","setUtf8","setDate","unit","DAY","setTimestampSecond","setTimestampMillisecond","setTimestampMicrosecond","setTimestampNanosecond","setTimestamp","SECOND","MILLISECOND","MICROSECOND","NANOSECOND","setTimeSecond","setTimeMillisecond","setTimeMicrosecond","setTimeNanosecond","setTime","setDecimal","setList","children","instance","getVisitFn","Array","isArray","itr","end","get","setMap","entries","Map","Object","_setStructArrayValue","o","v","c","_","i","_setStructVectorValue","_setStructMapValue","f","name","_setStructObjectValue","setStruct","childSetters","map","forEach","setUnion","mode","Dense","setDenseUnion","setSparseUnion","childIndex","typeIdToChildIndex","typeIds","child","visit","setDictionary","_a","dictionary","setIntervalValue","DAY_TIME","setIntervalDayTime","setIntervalYearMonth","setFixedSizeList","prototype","visitBool","visitInt","visitInt8","visitInt16","visitInt32","visitInt64","visitUint8","visitUint16","visitUint32","visitUint64","visitFloat","visitFloat16","visitFloat32","visitFloat64","visitUtf8","visitBinary","visitFixedSizeBinary","visitDate","visitDateDay","visitDateMillisecond","visitTimestamp","visitTimestampSecond","visitTimestampMillisecond","visitTimestampMicrosecond","visitTimestampNanosecond","visitTime","visitTimeSecond","visitTimeMillisecond","visitTimeMicrosecond","visitTimeNanosecond","visitDecimal","visitList","visitStruct","visitUnion","visitDenseUnion","visitSparseUnion","visitDictionary","visitInterval","visitIntervalDayTime","visitIntervalYearMonth","visitFixedSizeList","visitMap"],"sources":["C:\\Users\\mvlor\\OneDrive\\Desktop\\custom_component\\multi_menu\\template\\my_component\\frontend\\node_modules\\apache-arrow\\src\\visitor\\set.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data.js';\nimport { Field } from '../schema.js';\nimport { Vector } from '../vector.js';\nimport { Visitor } from '../visitor.js';\nimport { encodeUtf8 } from '../util/utf8.js';\nimport { TypeToDataType } from '../interfaces.js';\nimport { float64ToUint16 } from '../util/math.js';\nimport { Type, UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum.js';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type.js';\n\n/** @ignore */\nexport interface SetVisitor extends Visitor {\n    visit<T extends DataType>(node: Data<T>, index: number, value: T['TValue']): void;\n    visitMany<T extends DataType>(nodes: Data<T>[], indices: number[], values: T['TValue'][]): void[];\n    getVisitFn<T extends DataType>(node: Data<T> | T): (data: Data<T>, index: number, value: Data<T>['TValue']) => void;\n    getVisitFn<T extends Type>(node: T): (data: Data<TypeToDataType<T>>, index: number, value: TypeToDataType<T>['TValue']) => void;\n    visitNull<T extends Null>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitBool<T extends Bool>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitInt<T extends Int>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitInt8<T extends Int8>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitInt16<T extends Int16>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitInt32<T extends Int32>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitInt64<T extends Int64>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitUint8<T extends Uint8>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitUint16<T extends Uint16>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitUint32<T extends Uint32>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitUint64<T extends Uint64>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitFloat<T extends Float>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitFloat16<T extends Float16>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitFloat32<T extends Float32>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitFloat64<T extends Float64>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitUtf8<T extends Utf8>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitBinary<T extends Binary>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitFixedSizeBinary<T extends FixedSizeBinary>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitDate<T extends Date_>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitDateDay<T extends DateDay>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitDateMillisecond<T extends DateMillisecond>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitTimestamp<T extends Timestamp>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitTimestampSecond<T extends TimestampSecond>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitTimestampMillisecond<T extends TimestampMillisecond>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitTimestampMicrosecond<T extends TimestampMicrosecond>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitTimestampNanosecond<T extends TimestampNanosecond>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitTime<T extends Time>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitTimeSecond<T extends TimeSecond>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitTimeMillisecond<T extends TimeMillisecond>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitTimeMicrosecond<T extends TimeMicrosecond>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitTimeNanosecond<T extends TimeNanosecond>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitDecimal<T extends Decimal>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitList<T extends List>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitStruct<T extends Struct>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitUnion<T extends Union>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitDenseUnion<T extends DenseUnion>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitSparseUnion<T extends SparseUnion>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitDictionary<T extends Dictionary>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitInterval<T extends Interval>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitIntervalDayTime<T extends IntervalDayTime>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitIntervalYearMonth<T extends IntervalYearMonth>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitFixedSizeList<T extends FixedSizeList>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitMap<T extends Map_>(data: Data<T>, index: number, value: T['TValue']): void;\n}\n\n/** @ignore */\nexport class SetVisitor extends Visitor { }\n\n/** @ignore */\nfunction wrapSet<T extends DataType>(fn: (data: Data<T>, _1: any, _2: any) => void) {\n    return (data: Data<T>, _1: any, _2: any) => {\n        if (data.setValid(_1, _2 != null)) {\n            return fn(data, _1, _2);\n        }\n    };\n}\n\n/** @ignore */\nexport const setEpochMsToDays = (data: Int32Array, index: number, epochMs: number) => { data[index] = Math.trunc(epochMs / 86400000); };\n/** @ignore */\nexport const setEpochMsToMillisecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = Math.trunc(epochMs % 4294967296);\n    data[index + 1] = Math.trunc(epochMs / 4294967296);\n};\n/** @ignore */\nexport const setEpochMsToMicrosecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = Math.trunc((epochMs * 1000) % 4294967296);\n    data[index + 1] = Math.trunc((epochMs * 1000) / 4294967296);\n};\n/** @ignore */\nexport const setEpochMsToNanosecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = Math.trunc((epochMs * 1000000) % 4294967296);\n    data[index + 1] = Math.trunc((epochMs * 1000000) / 4294967296);\n};\n\n/** @ignore */\nexport const setVariableWidthBytes = (values: Uint8Array, valueOffsets: Int32Array, index: number, value: Uint8Array) => {\n    if (index + 1 < valueOffsets.length) {\n        const { [index]: x, [index + 1]: y } = valueOffsets;\n        values.set(value.subarray(0, y - x), x);\n    }\n};\n\n/** @ignore */\nconst setBool = <T extends Bool>({ offset, values }: Data<T>, index: number, val: boolean) => {\n    const idx = offset + index;\n    val ? (values[idx >> 3] |= (1 << (idx % 8)))  // true\n        : (values[idx >> 3] &= ~(1 << (idx % 8))); // false\n\n};\n/** @ignore */\nexport const setInt = <T extends Int>({ values }: Data<T>, index: number, value: T['TValue']): void => { values[index] = value; };\n/** @ignore */\nexport const setFloat = <T extends Float32 | Float64>({ values }: Data<T>, index: number, value: T['TValue']): void => { values[index] = value; };\n/** @ignore */\nexport const setFloat16 = <T extends Float16>({ values }: Data<T>, index: number, value: T['TValue']): void => { values[index] = float64ToUint16(value); };\n/* istanbul ignore next */\n/** @ignore */\nexport const setAnyFloat = <T extends Float>(data: Data<T>, index: number, value: T['TValue']): void => {\n    switch (data.type.precision) {\n        case Precision.HALF:\n            return setFloat16(data as Data<Float16>, index, value);\n        case Precision.SINGLE:\n        case Precision.DOUBLE:\n            return setFloat(data as Data<Float32 | Float64>, index, value);\n    }\n};\n/** @ignore */\nexport const setDateDay = <T extends DateDay>({ values }: Data<T>, index: number, value: T['TValue']): void => { setEpochMsToDays(values, index, value.valueOf()); };\n/** @ignore */\nexport const setDateMillisecond = <T extends DateMillisecond>({ values }: Data<T>, index: number, value: T['TValue']): void => { setEpochMsToMillisecondsLong(values, index * 2, value.valueOf()); };\n/** @ignore */\nexport const setFixedSizeBinary = <T extends FixedSizeBinary>({ stride, values }: Data<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, stride), stride * index); };\n\n/** @ignore */\nconst setBinary = <T extends Binary>({ values, valueOffsets }: Data<T>, index: number, value: T['TValue']) => setVariableWidthBytes(values, valueOffsets, index, value);\n/** @ignore */\nconst setUtf8 = <T extends Utf8>({ values, valueOffsets }: Data<T>, index: number, value: T['TValue']) => {\n    setVariableWidthBytes(values, valueOffsets, index, encodeUtf8(value));\n};\n\n/* istanbul ignore next */\nexport const setDate = <T extends Date_>(data: Data<T>, index: number, value: T['TValue']): void => {\n    data.type.unit === DateUnit.DAY\n        ? setDateDay(data as Data<DateDay>, index, value)\n        : setDateMillisecond(data as Data<DateMillisecond>, index, value);\n};\n\n/** @ignore */\nexport const setTimestampSecond = <T extends TimestampSecond>({ values }: Data<T>, index: number, value: T['TValue']): void => setEpochMsToMillisecondsLong(values, index * 2, value / 1000);\n/** @ignore */\nexport const setTimestampMillisecond = <T extends TimestampMillisecond>({ values }: Data<T>, index: number, value: T['TValue']): void => setEpochMsToMillisecondsLong(values, index * 2, value);\n/** @ignore */\nexport const setTimestampMicrosecond = <T extends TimestampMicrosecond>({ values }: Data<T>, index: number, value: T['TValue']): void => setEpochMsToMicrosecondsLong(values, index * 2, value);\n/** @ignore */\nexport const setTimestampNanosecond = <T extends TimestampNanosecond>({ values }: Data<T>, index: number, value: T['TValue']): void => setEpochMsToNanosecondsLong(values, index * 2, value);\n/* istanbul ignore next */\n/** @ignore */\nexport const setTimestamp = <T extends Timestamp>(data: Data<T>, index: number, value: T['TValue']): void => {\n    switch (data.type.unit) {\n        case TimeUnit.SECOND: return setTimestampSecond(data as Data<TimestampSecond>, index, value);\n        case TimeUnit.MILLISECOND: return setTimestampMillisecond(data as Data<TimestampMillisecond>, index, value);\n        case TimeUnit.MICROSECOND: return setTimestampMicrosecond(data as Data<TimestampMicrosecond>, index, value);\n        case TimeUnit.NANOSECOND: return setTimestampNanosecond(data as Data<TimestampNanosecond>, index, value);\n    }\n};\n\n/** @ignore */\nexport const setTimeSecond = <T extends TimeSecond>({ values }: Data<T>, index: number, value: T['TValue']): void => { values[index] = value; };\n/** @ignore */\nexport const setTimeMillisecond = <T extends TimeMillisecond>({ values }: Data<T>, index: number, value: T['TValue']): void => { values[index] = value; };\n/** @ignore */\nexport const setTimeMicrosecond = <T extends TimeMicrosecond>({ values }: Data<T>, index: number, value: T['TValue']): void => { values[index] = value; };\n/** @ignore */\nexport const setTimeNanosecond = <T extends TimeNanosecond>({ values }: Data<T>, index: number, value: T['TValue']): void => { values[index] = value; };\n/* istanbul ignore next */\n/** @ignore */\nexport const setTime = <T extends Time>(data: Data<T>, index: number, value: T['TValue']): void => {\n    switch (data.type.unit) {\n        case TimeUnit.SECOND: return setTimeSecond(data as Data<TimeSecond>, index, value as TimeSecond['TValue']);\n        case TimeUnit.MILLISECOND: return setTimeMillisecond(data as Data<TimeMillisecond>, index, value as TimeMillisecond['TValue']);\n        case TimeUnit.MICROSECOND: return setTimeMicrosecond(data as Data<TimeMicrosecond>, index, value as TimeMicrosecond['TValue']);\n        case TimeUnit.NANOSECOND: return setTimeNanosecond(data as Data<TimeNanosecond>, index, value as TimeNanosecond['TValue']);\n    }\n};\n\n/** @ignore */\nexport const setDecimal = <T extends Decimal>({ values, stride }: Data<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, stride), stride * index); };\n\n/** @ignore */\nconst setList = <T extends List>(data: Data<T>, index: number, value: T['TValue']): void => {\n    const values = data.children[0];\n    const valueOffsets = data.valueOffsets;\n    const set = instance.getVisitFn(values);\n    if (Array.isArray(value)) {\n        for (let idx = -1, itr = valueOffsets[index], end = valueOffsets[index + 1]; itr < end;) {\n            set(values, itr++, value[++idx]);\n        }\n    } else {\n        for (let idx = -1, itr = valueOffsets[index], end = valueOffsets[index + 1]; itr < end;) {\n            set(values, itr++, value.get(++idx));\n        }\n    }\n};\n\n/** @ignore */\nconst setMap = <T extends Map_>(data: Data<T>, index: number, value: T['TValue']) => {\n    const values = data.children[0];\n    const { valueOffsets } = data;\n    const set = instance.getVisitFn(values);\n    let { [index]: idx, [index + 1]: end } = valueOffsets;\n    const entries = value instanceof Map ? value.entries() : Object.entries(value);\n    for (const val of entries) {\n        set(values, idx, val);\n        if (++idx >= end) break;\n    }\n};\n\n/** @ignore */ type SetFunc<T extends DataType> = (data: Data<T>, i: number, v: T['TValue']) => void;\n\n/** @ignore */ const _setStructArrayValue = (o: number, v: any[]) =>\n    <T extends DataType>(set: SetFunc<T>, c: Data<T>, _: Field, i: number) => c && set(c, o, v[i]);\n\n/** @ignore */ const _setStructVectorValue = (o: number, v: Vector) =>\n    <T extends DataType>(set: SetFunc<T>, c: Data<T>, _: Field, i: number) => c && set(c, o, v.get(i));\n\n/** @ignore */ const _setStructMapValue = (o: number, v: Map<string, any>) =>\n    <T extends DataType>(set: SetFunc<T>, c: Data<T>, f: Field, _: number) => c && set(c, o, v.get(f.name));\n\n/** @ignore */ const _setStructObjectValue = (o: number, v: { [key: string]: any }) =>\n    <T extends DataType>(set: SetFunc<T>, c: Data<T>, f: Field, _: number) => c && set(c, o, v[f.name]);\n\n/** @ignore */\nconst setStruct = <T extends Struct>(data: Data<T>, index: number, value: T['TValue']) => {\n\n    const childSetters = data.type.children.map((f) => instance.getVisitFn(f.type));\n    const set = value instanceof Map ? _setStructMapValue(index, value) :\n        value instanceof Vector ? _setStructVectorValue(index, value) :\n            Array.isArray(value) ? _setStructArrayValue(index, value) :\n                _setStructObjectValue(index, value);\n\n    // eslint-disable-next-line unicorn/no-array-for-each\n    data.type.children.forEach((f: Field, i: number) => set(childSetters[i], data.children[i], f, i));\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setUnion = <\n    V extends Data<Union> | Data<DenseUnion> | Data<SparseUnion>\n>(data: V, index: number, value: V['TValue']) => {\n    data.type.mode === UnionMode.Dense ?\n        setDenseUnion(data as Data<DenseUnion>, index, value) :\n        setSparseUnion(data as Data<SparseUnion>, index, value);\n};\n\n/** @ignore */\nconst setDenseUnion = <T extends DenseUnion>(data: Data<T>, index: number, value: T['TValue']): void => {\n    const childIndex = data.type.typeIdToChildIndex[data.typeIds[index]];\n    const child = data.children[childIndex];\n    instance.visit(child, data.valueOffsets[index], value);\n};\n\n/** @ignore */\nconst setSparseUnion = <T extends SparseUnion>(data: Data<T>, index: number, value: T['TValue']): void => {\n    const childIndex = data.type.typeIdToChildIndex[data.typeIds[index]];\n    const child = data.children[childIndex];\n    instance.visit(child, index, value);\n};\n\n/** @ignore */\nconst setDictionary = <T extends Dictionary>(data: Data<T>, index: number, value: T['TValue']): void => {\n    data.dictionary?.set(data.values[index], value);\n};\n\n/* istanbul ignore next */\n/** @ignore */\nexport const setIntervalValue = <T extends Interval>(data: Data<T>, index: number, value: T['TValue']): void => {\n    (data.type.unit === IntervalUnit.DAY_TIME)\n        ? setIntervalDayTime(data as Data<IntervalDayTime>, index, value)\n        : setIntervalYearMonth(data as Data<IntervalYearMonth>, index, value);\n};\n\n/** @ignore */\nexport const setIntervalDayTime = <T extends IntervalDayTime>({ values }: Data<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\n/** @ignore */\nexport const setIntervalYearMonth = <T extends IntervalYearMonth>({ values }: Data<T>, index: number, value: T['TValue']): void => { values[index] = (value[0] * 12) + (value[1] % 12); };\n\n/** @ignore */\nconst setFixedSizeList = <T extends FixedSizeList>(data: Data<T>, index: number, value: T['TValue']): void => {\n    const { stride } = data;\n    const child = data.children[0];\n    const set = instance.getVisitFn(child);\n    if (Array.isArray(value)) {\n        for (let idx = -1, offset = index * stride; ++idx < stride;) {\n            set(child, offset + idx, value[idx]);\n        }\n    } else {\n        for (let idx = -1, offset = index * stride; ++idx < stride;) {\n            set(child, offset + idx, value.get(idx));\n        }\n    }\n};\n\nSetVisitor.prototype.visitBool = wrapSet(setBool);\nSetVisitor.prototype.visitInt = wrapSet(setInt);\nSetVisitor.prototype.visitInt8 = wrapSet(setInt);\nSetVisitor.prototype.visitInt16 = wrapSet(setInt);\nSetVisitor.prototype.visitInt32 = wrapSet(setInt);\nSetVisitor.prototype.visitInt64 = wrapSet(setInt);\nSetVisitor.prototype.visitUint8 = wrapSet(setInt);\nSetVisitor.prototype.visitUint16 = wrapSet(setInt);\nSetVisitor.prototype.visitUint32 = wrapSet(setInt);\nSetVisitor.prototype.visitUint64 = wrapSet(setInt);\nSetVisitor.prototype.visitFloat = wrapSet(setAnyFloat);\nSetVisitor.prototype.visitFloat16 = wrapSet(setFloat16);\nSetVisitor.prototype.visitFloat32 = wrapSet(setFloat);\nSetVisitor.prototype.visitFloat64 = wrapSet(setFloat);\nSetVisitor.prototype.visitUtf8 = wrapSet(setUtf8);\nSetVisitor.prototype.visitBinary = wrapSet(setBinary);\nSetVisitor.prototype.visitFixedSizeBinary = wrapSet(setFixedSizeBinary);\nSetVisitor.prototype.visitDate = wrapSet(setDate);\nSetVisitor.prototype.visitDateDay = wrapSet(setDateDay);\nSetVisitor.prototype.visitDateMillisecond = wrapSet(setDateMillisecond);\nSetVisitor.prototype.visitTimestamp = wrapSet(setTimestamp);\nSetVisitor.prototype.visitTimestampSecond = wrapSet(setTimestampSecond);\nSetVisitor.prototype.visitTimestampMillisecond = wrapSet(setTimestampMillisecond);\nSetVisitor.prototype.visitTimestampMicrosecond = wrapSet(setTimestampMicrosecond);\nSetVisitor.prototype.visitTimestampNanosecond = wrapSet(setTimestampNanosecond);\nSetVisitor.prototype.visitTime = wrapSet(setTime);\nSetVisitor.prototype.visitTimeSecond = wrapSet(setTimeSecond);\nSetVisitor.prototype.visitTimeMillisecond = wrapSet(setTimeMillisecond);\nSetVisitor.prototype.visitTimeMicrosecond = wrapSet(setTimeMicrosecond);\nSetVisitor.prototype.visitTimeNanosecond = wrapSet(setTimeNanosecond);\nSetVisitor.prototype.visitDecimal = wrapSet(setDecimal);\nSetVisitor.prototype.visitList = wrapSet(setList);\nSetVisitor.prototype.visitStruct = wrapSet(setStruct);\nSetVisitor.prototype.visitUnion = wrapSet(setUnion);\nSetVisitor.prototype.visitDenseUnion = wrapSet(setDenseUnion);\nSetVisitor.prototype.visitSparseUnion = wrapSet(setSparseUnion);\nSetVisitor.prototype.visitDictionary = wrapSet(setDictionary);\nSetVisitor.prototype.visitInterval = wrapSet(setIntervalValue);\nSetVisitor.prototype.visitIntervalDayTime = wrapSet(setIntervalDayTime);\nSetVisitor.prototype.visitIntervalYearMonth = wrapSet(setIntervalYearMonth);\nSetVisitor.prototype.visitFixedSizeList = wrapSet(setFixedSizeList);\nSetVisitor.prototype.visitMap = wrapSet(setMap);\n\n/** @ignore */\nexport const instance = new SetVisitor();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}