{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Table } from '../table.mjs';\nimport { isPromise } from '../util/compat.mjs';\nimport { RecordBatchReader } from './reader.mjs';\nimport { RecordBatchFileWriter, RecordBatchStreamWriter } from './writer.mjs';\nexport function tableFromIPC(input) {\n  const reader = RecordBatchReader.from(input);\n  if (isPromise(reader)) {\n    return reader.then(reader => tableFromIPC(reader));\n  }\n  if (reader.isAsync()) {\n    return reader.readAll().then(xs => new Table(xs));\n  }\n  return new Table(reader.readAll());\n}\n/**\n * Serialize a {@link Table} to the IPC format. This function is a convenience\n * wrapper for {@link RecordBatchStreamWriter} and {@link RecordBatchFileWriter}.\n * Opposite of {@link tableFromIPC}.\n *\n * @param table The Table to serialize.\n * @param type Whether to serialize the Table as a file or a stream.\n */\nexport function tableToIPC(table) {\n  let type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'stream';\n  return (type === 'stream' ? RecordBatchStreamWriter : RecordBatchFileWriter).writeAll(table).toUint8Array(true);\n}","map":{"version":3,"names":["Table","isPromise","RecordBatchReader","RecordBatchFileWriter","RecordBatchStreamWriter","tableFromIPC","input","reader","from","then","isAsync","readAll","xs","tableToIPC","table","type","arguments","length","undefined","writeAll","toUint8Array"],"sources":["C:\\Users\\mvlor\\OneDrive\\Desktop\\custom_component\\multi_menu\\template\\my_component\\frontend\\node_modules\\apache-arrow\\src\\ipc\\serialization.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Table } from '../table.js';\nimport { TypeMap } from '../type.js';\nimport { isPromise } from '../util/compat.js';\nimport {\n    FromArg0, FromArg1, FromArg2, FromArg3, FromArg4, FromArg5,\n    RecordBatchReader,\n    RecordBatchFileReader, RecordBatchStreamReader,\n    AsyncRecordBatchFileReader, AsyncRecordBatchStreamReader\n} from './reader.js';\nimport { RecordBatchFileWriter, RecordBatchStreamWriter } from './writer.js';\n\ntype RecordBatchReaders<T extends TypeMap = any> = RecordBatchFileReader<T> | RecordBatchStreamReader<T>;\ntype AsyncRecordBatchReaders<T extends TypeMap = any> = AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>;\n\n/**\n * Deserialize the IPC format into a {@link Table}. This function is a\n * convenience wrapper for {@link RecordBatchReader}. Opposite of {@link tableToIPC}.\n */\nexport function tableFromIPC<T extends TypeMap = any>(source: FromArg0 | FromArg2): Table<T>;\nexport function tableFromIPC<T extends TypeMap = any>(source: FromArg1): Promise<Table<T>>;\nexport function tableFromIPC<T extends TypeMap = any>(source: FromArg3 | FromArg4 | FromArg5): Promise<Table<T>>;\nexport function tableFromIPC<T extends TypeMap = any>(source: RecordBatchReaders<T>): Table<T>;\nexport function tableFromIPC<T extends TypeMap = any>(source: AsyncRecordBatchReaders<T>): Promise<Table<T>>;\nexport function tableFromIPC<T extends TypeMap = any>(source: RecordBatchReader<T>): Table<T> | Promise<Table<T>>;\nexport function tableFromIPC<T extends TypeMap = any>(input: any): Table<T> | Promise<Table<T>> {\n    const reader = RecordBatchReader.from<T>(input) as RecordBatchReader<T> | Promise<RecordBatchReader<T>>;\n    if (isPromise<RecordBatchReader<T>>(reader)) {\n        return reader.then((reader) => tableFromIPC(reader)) as Promise<Table<T>>;\n    }\n    if (reader.isAsync()) {\n        return (reader as AsyncRecordBatchReaders<T>).readAll().then((xs) => new Table(xs));\n    }\n    return new Table((reader as RecordBatchReaders<T>).readAll());\n}\n\n/**\n * Serialize a {@link Table} to the IPC format. This function is a convenience\n * wrapper for {@link RecordBatchStreamWriter} and {@link RecordBatchFileWriter}.\n * Opposite of {@link tableFromIPC}.\n *\n * @param table The Table to serialize.\n * @param type Whether to serialize the Table as a file or a stream.\n */\nexport function tableToIPC<T extends TypeMap = any>(table: Table, type: 'file' | 'stream' = 'stream'): Uint8Array {\n    return (type === 'stream' ? RecordBatchStreamWriter : RecordBatchFileWriter)\n        .writeAll<T>(table)\n        .toUint8Array(true);\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,KAAK,QAAQ,cAAc;AAEpC,SAASC,SAAS,QAAQ,oBAAoB;AAC9C,SAEIC,iBAAiB,QAGd,cAAc;AACrB,SAASC,qBAAqB,EAAEC,uBAAuB,QAAQ,cAAc;AAe7E,OAAM,SAAUC,YAAYA,CAA0BC,KAAU;EAC5D,MAAMC,MAAM,GAAGL,iBAAiB,CAACM,IAAI,CAAIF,KAAK,CAAyD;EACvG,IAAIL,SAAS,CAAuBM,MAAM,CAAC,EAAE;IACzC,OAAOA,MAAM,CAACE,IAAI,CAAEF,MAAM,IAAKF,YAAY,CAACE,MAAM,CAAC,CAAsB;;EAE7E,IAAIA,MAAM,CAACG,OAAO,EAAE,EAAE;IAClB,OAAQH,MAAqC,CAACI,OAAO,EAAE,CAACF,IAAI,CAAEG,EAAE,IAAK,IAAIZ,KAAK,CAACY,EAAE,CAAC,CAAC;;EAEvF,OAAO,IAAIZ,KAAK,CAAEO,MAAgC,CAACI,OAAO,EAAE,CAAC;AACjE;AAEA;;;;;;;;AAQA,OAAM,SAAUE,UAAUA,CAA0BC,KAAY,EAAoC;EAAA,IAAlCC,IAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA0B,QAAQ;EAChG,OAAO,CAACD,IAAI,KAAK,QAAQ,GAAGX,uBAAuB,GAAGD,qBAAqB,EACtEgB,QAAQ,CAAIL,KAAK,CAAC,CAClBM,YAAY,CAAC,IAAI,CAAC;AAC3B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}