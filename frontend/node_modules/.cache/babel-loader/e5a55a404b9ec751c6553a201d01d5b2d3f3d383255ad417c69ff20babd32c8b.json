{"ast":null,"code":"// automatically generated by the FlatBuffers compiler, do not modify\nimport { Binary } from './binary.mjs';\nimport { Bool } from './bool.mjs';\nimport { Date } from './date.mjs';\nimport { Decimal } from './decimal.mjs';\nimport { Duration } from './duration.mjs';\nimport { FixedSizeBinary } from './fixed-size-binary.mjs';\nimport { FixedSizeList } from './fixed-size-list.mjs';\nimport { FloatingPoint } from './floating-point.mjs';\nimport { Int } from './int.mjs';\nimport { Interval } from './interval.mjs';\nimport { LargeBinary } from './large-binary.mjs';\nimport { LargeList } from './large-list.mjs';\nimport { LargeUtf8 } from './large-utf8.mjs';\nimport { List } from './list.mjs';\nimport { Map } from './map.mjs';\nimport { Null } from './null.mjs';\nimport { Struct_ } from './struct_.mjs';\nimport { Time } from './time.mjs';\nimport { Timestamp } from './timestamp.mjs';\nimport { Union } from './union.mjs';\nimport { Utf8 } from './utf8.mjs';\n/**\n * ----------------------------------------------------------------------\n * Top-level Type value, enabling extensible type-specific metadata. We can\n * add new logical types to Type without breaking backwards compatibility\n */\nexport var Type;\n(function (Type) {\n  Type[Type[\"NONE\"] = 0] = \"NONE\";\n  Type[Type[\"Null\"] = 1] = \"Null\";\n  Type[Type[\"Int\"] = 2] = \"Int\";\n  Type[Type[\"FloatingPoint\"] = 3] = \"FloatingPoint\";\n  Type[Type[\"Binary\"] = 4] = \"Binary\";\n  Type[Type[\"Utf8\"] = 5] = \"Utf8\";\n  Type[Type[\"Bool\"] = 6] = \"Bool\";\n  Type[Type[\"Decimal\"] = 7] = \"Decimal\";\n  Type[Type[\"Date\"] = 8] = \"Date\";\n  Type[Type[\"Time\"] = 9] = \"Time\";\n  Type[Type[\"Timestamp\"] = 10] = \"Timestamp\";\n  Type[Type[\"Interval\"] = 11] = \"Interval\";\n  Type[Type[\"List\"] = 12] = \"List\";\n  Type[Type[\"Struct_\"] = 13] = \"Struct_\";\n  Type[Type[\"Union\"] = 14] = \"Union\";\n  Type[Type[\"FixedSizeBinary\"] = 15] = \"FixedSizeBinary\";\n  Type[Type[\"FixedSizeList\"] = 16] = \"FixedSizeList\";\n  Type[Type[\"Map\"] = 17] = \"Map\";\n  Type[Type[\"Duration\"] = 18] = \"Duration\";\n  Type[Type[\"LargeBinary\"] = 19] = \"LargeBinary\";\n  Type[Type[\"LargeUtf8\"] = 20] = \"LargeUtf8\";\n  Type[Type[\"LargeList\"] = 21] = \"LargeList\";\n})(Type || (Type = {}));\nexport function unionToType(type, accessor) {\n  switch (Type[type]) {\n    case 'NONE':\n      return null;\n    case 'Null':\n      return accessor(new Null());\n    case 'Int':\n      return accessor(new Int());\n    case 'FloatingPoint':\n      return accessor(new FloatingPoint());\n    case 'Binary':\n      return accessor(new Binary());\n    case 'Utf8':\n      return accessor(new Utf8());\n    case 'Bool':\n      return accessor(new Bool());\n    case 'Decimal':\n      return accessor(new Decimal());\n    case 'Date':\n      return accessor(new Date());\n    case 'Time':\n      return accessor(new Time());\n    case 'Timestamp':\n      return accessor(new Timestamp());\n    case 'Interval':\n      return accessor(new Interval());\n    case 'List':\n      return accessor(new List());\n    case 'Struct_':\n      return accessor(new Struct_());\n    case 'Union':\n      return accessor(new Union());\n    case 'FixedSizeBinary':\n      return accessor(new FixedSizeBinary());\n    case 'FixedSizeList':\n      return accessor(new FixedSizeList());\n    case 'Map':\n      return accessor(new Map());\n    case 'Duration':\n      return accessor(new Duration());\n    case 'LargeBinary':\n      return accessor(new LargeBinary());\n    case 'LargeUtf8':\n      return accessor(new LargeUtf8());\n    case 'LargeList':\n      return accessor(new LargeList());\n    default:\n      return null;\n  }\n}\nexport function unionListToType(type, accessor, index) {\n  switch (Type[type]) {\n    case 'NONE':\n      return null;\n    case 'Null':\n      return accessor(index, new Null());\n    case 'Int':\n      return accessor(index, new Int());\n    case 'FloatingPoint':\n      return accessor(index, new FloatingPoint());\n    case 'Binary':\n      return accessor(index, new Binary());\n    case 'Utf8':\n      return accessor(index, new Utf8());\n    case 'Bool':\n      return accessor(index, new Bool());\n    case 'Decimal':\n      return accessor(index, new Decimal());\n    case 'Date':\n      return accessor(index, new Date());\n    case 'Time':\n      return accessor(index, new Time());\n    case 'Timestamp':\n      return accessor(index, new Timestamp());\n    case 'Interval':\n      return accessor(index, new Interval());\n    case 'List':\n      return accessor(index, new List());\n    case 'Struct_':\n      return accessor(index, new Struct_());\n    case 'Union':\n      return accessor(index, new Union());\n    case 'FixedSizeBinary':\n      return accessor(index, new FixedSizeBinary());\n    case 'FixedSizeList':\n      return accessor(index, new FixedSizeList());\n    case 'Map':\n      return accessor(index, new Map());\n    case 'Duration':\n      return accessor(index, new Duration());\n    case 'LargeBinary':\n      return accessor(index, new LargeBinary());\n    case 'LargeUtf8':\n      return accessor(index, new LargeUtf8());\n    case 'LargeList':\n      return accessor(index, new LargeList());\n    default:\n      return null;\n  }\n}","map":{"version":3,"names":["Binary","Bool","Date","Decimal","Duration","FixedSizeBinary","FixedSizeList","FloatingPoint","Int","Interval","LargeBinary","LargeList","LargeUtf8","List","Map","Null","Struct_","Time","Timestamp","Union","Utf8","Type","unionToType","type","accessor","unionListToType","index"],"sources":["C:\\Users\\mvlor\\OneDrive\\Desktop\\custom_component\\multi_menu\\template\\multi_menu\\frontend\\node_modules\\apache-arrow\\src\\fb\\type.ts"],"sourcesContent":["// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { Binary } from './binary.js';\nimport { Bool } from './bool.js';\nimport { Date } from './date.js';\nimport { Decimal } from './decimal.js';\nimport { Duration } from './duration.js';\nimport { FixedSizeBinary } from './fixed-size-binary.js';\nimport { FixedSizeList } from './fixed-size-list.js';\nimport { FloatingPoint } from './floating-point.js';\nimport { Int } from './int.js';\nimport { Interval } from './interval.js';\nimport { LargeBinary } from './large-binary.js';\nimport { LargeList } from './large-list.js';\nimport { LargeUtf8 } from './large-utf8.js';\nimport { List } from './list.js';\nimport { Map } from './map.js';\nimport { Null } from './null.js';\nimport { Struct_ } from './struct_.js';\nimport { Time } from './time.js';\nimport { Timestamp } from './timestamp.js';\nimport { Union } from './union.js';\nimport { Utf8 } from './utf8.js';\n\n\n/**\n * ----------------------------------------------------------------------\n * Top-level Type value, enabling extensible type-specific metadata. We can\n * add new logical types to Type without breaking backwards compatibility\n */\nexport enum Type{\n  NONE = 0,\n  Null = 1,\n  Int = 2,\n  FloatingPoint = 3,\n  Binary = 4,\n  Utf8 = 5,\n  Bool = 6,\n  Decimal = 7,\n  Date = 8,\n  Time = 9,\n  Timestamp = 10,\n  Interval = 11,\n  List = 12,\n  Struct_ = 13,\n  Union = 14,\n  FixedSizeBinary = 15,\n  FixedSizeList = 16,\n  Map = 17,\n  Duration = 18,\n  LargeBinary = 19,\n  LargeUtf8 = 20,\n  LargeList = 21\n}\n\nexport function unionToType(\n  type: Type,\n  accessor: (obj:Binary|Bool|Date|Decimal|Duration|FixedSizeBinary|FixedSizeList|FloatingPoint|Int|Interval|LargeBinary|LargeList|LargeUtf8|List|Map|Null|Struct_|Time|Timestamp|Union|Utf8) => Binary|Bool|Date|Decimal|Duration|FixedSizeBinary|FixedSizeList|FloatingPoint|Int|Interval|LargeBinary|LargeList|LargeUtf8|List|Map|Null|Struct_|Time|Timestamp|Union|Utf8|null\n): Binary|Bool|Date|Decimal|Duration|FixedSizeBinary|FixedSizeList|FloatingPoint|Int|Interval|LargeBinary|LargeList|LargeUtf8|List|Map|Null|Struct_|Time|Timestamp|Union|Utf8|null {\n  switch(Type[type]) {\n    case 'NONE': return null;\n    case 'Null': return accessor(new Null())! as Null;\n    case 'Int': return accessor(new Int())! as Int;\n    case 'FloatingPoint': return accessor(new FloatingPoint())! as FloatingPoint;\n    case 'Binary': return accessor(new Binary())! as Binary;\n    case 'Utf8': return accessor(new Utf8())! as Utf8;\n    case 'Bool': return accessor(new Bool())! as Bool;\n    case 'Decimal': return accessor(new Decimal())! as Decimal;\n    case 'Date': return accessor(new Date())! as Date;\n    case 'Time': return accessor(new Time())! as Time;\n    case 'Timestamp': return accessor(new Timestamp())! as Timestamp;\n    case 'Interval': return accessor(new Interval())! as Interval;\n    case 'List': return accessor(new List())! as List;\n    case 'Struct_': return accessor(new Struct_())! as Struct_;\n    case 'Union': return accessor(new Union())! as Union;\n    case 'FixedSizeBinary': return accessor(new FixedSizeBinary())! as FixedSizeBinary;\n    case 'FixedSizeList': return accessor(new FixedSizeList())! as FixedSizeList;\n    case 'Map': return accessor(new Map())! as Map;\n    case 'Duration': return accessor(new Duration())! as Duration;\n    case 'LargeBinary': return accessor(new LargeBinary())! as LargeBinary;\n    case 'LargeUtf8': return accessor(new LargeUtf8())! as LargeUtf8;\n    case 'LargeList': return accessor(new LargeList())! as LargeList;\n    default: return null;\n  }\n}\n\nexport function unionListToType(\n  type: Type,\n  accessor: (index: number, obj:Binary|Bool|Date|Decimal|Duration|FixedSizeBinary|FixedSizeList|FloatingPoint|Int|Interval|LargeBinary|LargeList|LargeUtf8|List|Map|Null|Struct_|Time|Timestamp|Union|Utf8) => Binary|Bool|Date|Decimal|Duration|FixedSizeBinary|FixedSizeList|FloatingPoint|Int|Interval|LargeBinary|LargeList|LargeUtf8|List|Map|Null|Struct_|Time|Timestamp|Union|Utf8|null,\n  index: number\n): Binary|Bool|Date|Decimal|Duration|FixedSizeBinary|FixedSizeList|FloatingPoint|Int|Interval|LargeBinary|LargeList|LargeUtf8|List|Map|Null|Struct_|Time|Timestamp|Union|Utf8|null {\n  switch(Type[type]) {\n    case 'NONE': return null;\n    case 'Null': return accessor(index, new Null())! as Null;\n    case 'Int': return accessor(index, new Int())! as Int;\n    case 'FloatingPoint': return accessor(index, new FloatingPoint())! as FloatingPoint;\n    case 'Binary': return accessor(index, new Binary())! as Binary;\n    case 'Utf8': return accessor(index, new Utf8())! as Utf8;\n    case 'Bool': return accessor(index, new Bool())! as Bool;\n    case 'Decimal': return accessor(index, new Decimal())! as Decimal;\n    case 'Date': return accessor(index, new Date())! as Date;\n    case 'Time': return accessor(index, new Time())! as Time;\n    case 'Timestamp': return accessor(index, new Timestamp())! as Timestamp;\n    case 'Interval': return accessor(index, new Interval())! as Interval;\n    case 'List': return accessor(index, new List())! as List;\n    case 'Struct_': return accessor(index, new Struct_())! as Struct_;\n    case 'Union': return accessor(index, new Union())! as Union;\n    case 'FixedSizeBinary': return accessor(index, new FixedSizeBinary())! as FixedSizeBinary;\n    case 'FixedSizeList': return accessor(index, new FixedSizeList())! as FixedSizeList;\n    case 'Map': return accessor(index, new Map())! as Map;\n    case 'Duration': return accessor(index, new Duration())! as Duration;\n    case 'LargeBinary': return accessor(index, new LargeBinary())! as LargeBinary;\n    case 'LargeUtf8': return accessor(index, new LargeUtf8())! as LargeUtf8;\n    case 'LargeList': return accessor(index, new LargeList())! as LargeList;\n    default: return null;\n  }\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}