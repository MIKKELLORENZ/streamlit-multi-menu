{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { BigInt64Array, BigUint64Array } from './compat.mjs';\n/** @ignore */\nconst undf = void 0;\n/** @ignore */\nexport function valueToString(x) {\n  if (x === null) {\n    return 'null';\n  }\n  if (x === undf) {\n    return 'undefined';\n  }\n  switch (typeof x) {\n    case 'number':\n      return `${x}`;\n    case 'bigint':\n      return `${x}`;\n    case 'string':\n      return `\"${x}\"`;\n  }\n  // If [Symbol.toPrimitive] is implemented (like in BN)\n  // use it instead of JSON.stringify(). This ensures we\n  // print BigInts, Decimals, and Binary in their native\n  // representation\n  if (typeof x[Symbol.toPrimitive] === 'function') {\n    return x[Symbol.toPrimitive]('string');\n  }\n  if (ArrayBuffer.isView(x)) {\n    if (x instanceof BigInt64Array || x instanceof BigUint64Array) {\n      return `[${[...x].map(x => valueToString(x))}]`;\n    }\n    return `[${x}]`;\n  }\n  return ArrayBuffer.isView(x) ? `[${x}]` : JSON.stringify(x, (_, y) => typeof y === 'bigint' ? `${y}` : y);\n}","map":{"version":3,"names":["BigInt64Array","BigUint64Array","undf","valueToString","x","Symbol","toPrimitive","ArrayBuffer","isView","map","JSON","stringify","_","y"],"sources":["C:\\Users\\mvlor\\OneDrive\\Desktop\\custom_component\\streamlit_multi_menu\\template\\streamlit_multi_menu\\frontend\\node_modules\\apache-arrow\\src\\util\\pretty.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BigInt64Array, BigUint64Array } from './compat.js';\n\n/** @ignore */ const undf = void (0);\n\n/** @ignore */\nexport function valueToString(x: any): string {\n    if (x === null) { return 'null'; }\n    if (x === undf) { return 'undefined'; }\n    switch (typeof x) {\n        case 'number': return `${x}`;\n        case 'bigint': return `${x}`;\n        case 'string': return `\"${x}\"`;\n    }\n    // If [Symbol.toPrimitive] is implemented (like in BN)\n    // use it instead of JSON.stringify(). This ensures we\n    // print BigInts, Decimals, and Binary in their native\n    // representation\n    if (typeof x[Symbol.toPrimitive] === 'function') {\n        return x[Symbol.toPrimitive]('string');\n    }\n    if (ArrayBuffer.isView(x)) {\n        if (x instanceof BigInt64Array || x instanceof BigUint64Array) {\n            return `[${[...x].map(x => valueToString(x))}]`;\n        }\n        return `[${x}]`;\n    }\n    return ArrayBuffer.isView(x) ? `[${x}]` : JSON.stringify(x, (_, y) => typeof y === 'bigint' ? `${y}` : y);\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,aAAa,EAAEC,cAAc,QAAQ,cAAc;AAE5D;AAAe,MAAMC,IAAI,GAAG,KAAM,CAAE;AAEpC;AACA,OAAM,SAAUC,aAAaA,CAACC,CAAM;EAChC,IAAIA,CAAC,KAAK,IAAI,EAAE;IAAE,OAAO,MAAM;;EAC/B,IAAIA,CAAC,KAAKF,IAAI,EAAE;IAAE,OAAO,WAAW;;EACpC,QAAQ,OAAOE,CAAC;IACZ,KAAK,QAAQ;MAAE,OAAO,GAAGA,CAAC,EAAE;IAC5B,KAAK,QAAQ;MAAE,OAAO,GAAGA,CAAC,EAAE;IAC5B,KAAK,QAAQ;MAAE,OAAO,IAAIA,CAAC,GAAG;;EAElC;EACA;EACA;EACA;EACA,IAAI,OAAOA,CAAC,CAACC,MAAM,CAACC,WAAW,CAAC,KAAK,UAAU,EAAE;IAC7C,OAAOF,CAAC,CAACC,MAAM,CAACC,WAAW,CAAC,CAAC,QAAQ,CAAC;;EAE1C,IAAIC,WAAW,CAACC,MAAM,CAACJ,CAAC,CAAC,EAAE;IACvB,IAAIA,CAAC,YAAYJ,aAAa,IAAII,CAAC,YAAYH,cAAc,EAAE;MAC3D,OAAO,IAAI,CAAC,GAAGG,CAAC,CAAC,CAACK,GAAG,CAACL,CAAC,IAAID,aAAa,CAACC,CAAC,CAAC,CAAC,GAAG;;IAEnD,OAAO,IAAIA,CAAC,GAAG;;EAEnB,OAAOG,WAAW,CAACC,MAAM,CAACJ,CAAC,CAAC,GAAG,IAAIA,CAAC,GAAG,GAAGM,IAAI,CAACC,SAAS,CAACP,CAAC,EAAE,CAACQ,CAAC,EAAEC,CAAC,KAAK,OAAOA,CAAC,KAAK,QAAQ,GAAG,GAAGA,CAAC,EAAE,GAAGA,CAAC,CAAC;AAC7G","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}