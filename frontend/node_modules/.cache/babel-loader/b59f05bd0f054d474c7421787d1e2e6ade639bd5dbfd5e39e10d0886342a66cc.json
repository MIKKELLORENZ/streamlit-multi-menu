{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Vector } from '../vector.mjs';\nimport { Visitor } from '../visitor.mjs';\nimport { encodeUtf8 } from '../util/utf8.mjs';\nimport { float64ToUint16 } from '../util/math.mjs';\nimport { UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum.mjs';\n/** @ignore */\nexport class SetVisitor extends Visitor {}\n/** @ignore */\nfunction wrapSet(fn) {\n  return (data, _1, _2) => {\n    if (data.setValid(_1, _2 != null)) {\n      return fn(data, _1, _2);\n    }\n  };\n}\n/** @ignore */\nexport const setEpochMsToDays = (data, index, epochMs) => {\n  data[index] = Math.trunc(epochMs / 86400000);\n};\n/** @ignore */\nexport const setEpochMsToMillisecondsLong = (data, index, epochMs) => {\n  data[index] = Math.trunc(epochMs % 4294967296);\n  data[index + 1] = Math.trunc(epochMs / 4294967296);\n};\n/** @ignore */\nexport const setEpochMsToMicrosecondsLong = (data, index, epochMs) => {\n  data[index] = Math.trunc(epochMs * 1000 % 4294967296);\n  data[index + 1] = Math.trunc(epochMs * 1000 / 4294967296);\n};\n/** @ignore */\nexport const setEpochMsToNanosecondsLong = (data, index, epochMs) => {\n  data[index] = Math.trunc(epochMs * 1000000 % 4294967296);\n  data[index + 1] = Math.trunc(epochMs * 1000000 / 4294967296);\n};\n/** @ignore */\nexport const setVariableWidthBytes = (values, valueOffsets, index, value) => {\n  if (index + 1 < valueOffsets.length) {\n    const {\n      [index]: x,\n      [index + 1]: y\n    } = valueOffsets;\n    values.set(value.subarray(0, y - x), x);\n  }\n};\n/** @ignore */\nconst setBool = (_ref, index, val) => {\n  let {\n    offset,\n    values\n  } = _ref;\n  const idx = offset + index;\n  val ? values[idx >> 3] |= 1 << idx % 8 // true\n  : values[idx >> 3] &= ~(1 << idx % 8); // false\n};\n/** @ignore */\nexport const setInt = (_ref2, index, value) => {\n  let {\n    values\n  } = _ref2;\n  values[index] = value;\n};\n/** @ignore */\nexport const setFloat = (_ref3, index, value) => {\n  let {\n    values\n  } = _ref3;\n  values[index] = value;\n};\n/** @ignore */\nexport const setFloat16 = (_ref4, index, value) => {\n  let {\n    values\n  } = _ref4;\n  values[index] = float64ToUint16(value);\n};\n/* istanbul ignore next */\n/** @ignore */\nexport const setAnyFloat = (data, index, value) => {\n  switch (data.type.precision) {\n    case Precision.HALF:\n      return setFloat16(data, index, value);\n    case Precision.SINGLE:\n    case Precision.DOUBLE:\n      return setFloat(data, index, value);\n  }\n};\n/** @ignore */\nexport const setDateDay = (_ref5, index, value) => {\n  let {\n    values\n  } = _ref5;\n  setEpochMsToDays(values, index, value.valueOf());\n};\n/** @ignore */\nexport const setDateMillisecond = (_ref6, index, value) => {\n  let {\n    values\n  } = _ref6;\n  setEpochMsToMillisecondsLong(values, index * 2, value.valueOf());\n};\n/** @ignore */\nexport const setFixedSizeBinary = (_ref7, index, value) => {\n  let {\n    stride,\n    values\n  } = _ref7;\n  values.set(value.subarray(0, stride), stride * index);\n};\n/** @ignore */\nconst setBinary = (_ref8, index, value) => {\n  let {\n    values,\n    valueOffsets\n  } = _ref8;\n  return setVariableWidthBytes(values, valueOffsets, index, value);\n};\n/** @ignore */\nconst setUtf8 = (_ref9, index, value) => {\n  let {\n    values,\n    valueOffsets\n  } = _ref9;\n  setVariableWidthBytes(values, valueOffsets, index, encodeUtf8(value));\n};\n/* istanbul ignore next */\nexport const setDate = (data, index, value) => {\n  data.type.unit === DateUnit.DAY ? setDateDay(data, index, value) : setDateMillisecond(data, index, value);\n};\n/** @ignore */\nexport const setTimestampSecond = (_ref10, index, value) => {\n  let {\n    values\n  } = _ref10;\n  return setEpochMsToMillisecondsLong(values, index * 2, value / 1000);\n};\n/** @ignore */\nexport const setTimestampMillisecond = (_ref11, index, value) => {\n  let {\n    values\n  } = _ref11;\n  return setEpochMsToMillisecondsLong(values, index * 2, value);\n};\n/** @ignore */\nexport const setTimestampMicrosecond = (_ref12, index, value) => {\n  let {\n    values\n  } = _ref12;\n  return setEpochMsToMicrosecondsLong(values, index * 2, value);\n};\n/** @ignore */\nexport const setTimestampNanosecond = (_ref13, index, value) => {\n  let {\n    values\n  } = _ref13;\n  return setEpochMsToNanosecondsLong(values, index * 2, value);\n};\n/* istanbul ignore next */\n/** @ignore */\nexport const setTimestamp = (data, index, value) => {\n  switch (data.type.unit) {\n    case TimeUnit.SECOND:\n      return setTimestampSecond(data, index, value);\n    case TimeUnit.MILLISECOND:\n      return setTimestampMillisecond(data, index, value);\n    case TimeUnit.MICROSECOND:\n      return setTimestampMicrosecond(data, index, value);\n    case TimeUnit.NANOSECOND:\n      return setTimestampNanosecond(data, index, value);\n  }\n};\n/** @ignore */\nexport const setTimeSecond = (_ref14, index, value) => {\n  let {\n    values\n  } = _ref14;\n  values[index] = value;\n};\n/** @ignore */\nexport const setTimeMillisecond = (_ref15, index, value) => {\n  let {\n    values\n  } = _ref15;\n  values[index] = value;\n};\n/** @ignore */\nexport const setTimeMicrosecond = (_ref16, index, value) => {\n  let {\n    values\n  } = _ref16;\n  values[index] = value;\n};\n/** @ignore */\nexport const setTimeNanosecond = (_ref17, index, value) => {\n  let {\n    values\n  } = _ref17;\n  values[index] = value;\n};\n/* istanbul ignore next */\n/** @ignore */\nexport const setTime = (data, index, value) => {\n  switch (data.type.unit) {\n    case TimeUnit.SECOND:\n      return setTimeSecond(data, index, value);\n    case TimeUnit.MILLISECOND:\n      return setTimeMillisecond(data, index, value);\n    case TimeUnit.MICROSECOND:\n      return setTimeMicrosecond(data, index, value);\n    case TimeUnit.NANOSECOND:\n      return setTimeNanosecond(data, index, value);\n  }\n};\n/** @ignore */\nexport const setDecimal = (_ref18, index, value) => {\n  let {\n    values,\n    stride\n  } = _ref18;\n  values.set(value.subarray(0, stride), stride * index);\n};\n/** @ignore */\nconst setList = (data, index, value) => {\n  const values = data.children[0];\n  const valueOffsets = data.valueOffsets;\n  const set = instance.getVisitFn(values);\n  if (Array.isArray(value)) {\n    for (let idx = -1, itr = valueOffsets[index], end = valueOffsets[index + 1]; itr < end;) {\n      set(values, itr++, value[++idx]);\n    }\n  } else {\n    for (let idx = -1, itr = valueOffsets[index], end = valueOffsets[index + 1]; itr < end;) {\n      set(values, itr++, value.get(++idx));\n    }\n  }\n};\n/** @ignore */\nconst setMap = (data, index, value) => {\n  const values = data.children[0];\n  const {\n    valueOffsets\n  } = data;\n  const set = instance.getVisitFn(values);\n  let {\n    [index]: idx,\n    [index + 1]: end\n  } = valueOffsets;\n  const entries = value instanceof Map ? value.entries() : Object.entries(value);\n  for (const val of entries) {\n    set(values, idx, val);\n    if (++idx >= end) break;\n  }\n};\n/** @ignore */\nconst _setStructArrayValue = (o, v) => (set, c, _, i) => c && set(c, o, v[i]);\n/** @ignore */\nconst _setStructVectorValue = (o, v) => (set, c, _, i) => c && set(c, o, v.get(i));\n/** @ignore */\nconst _setStructMapValue = (o, v) => (set, c, f, _) => c && set(c, o, v.get(f.name));\n/** @ignore */\nconst _setStructObjectValue = (o, v) => (set, c, f, _) => c && set(c, o, v[f.name]);\n/** @ignore */\nconst setStruct = (data, index, value) => {\n  const childSetters = data.type.children.map(f => instance.getVisitFn(f.type));\n  const set = value instanceof Map ? _setStructMapValue(index, value) : value instanceof Vector ? _setStructVectorValue(index, value) : Array.isArray(value) ? _setStructArrayValue(index, value) : _setStructObjectValue(index, value);\n  // eslint-disable-next-line unicorn/no-array-for-each\n  data.type.children.forEach((f, i) => set(childSetters[i], data.children[i], f, i));\n};\n/* istanbul ignore next */\n/** @ignore */\nconst setUnion = (data, index, value) => {\n  data.type.mode === UnionMode.Dense ? setDenseUnion(data, index, value) : setSparseUnion(data, index, value);\n};\n/** @ignore */\nconst setDenseUnion = (data, index, value) => {\n  const childIndex = data.type.typeIdToChildIndex[data.typeIds[index]];\n  const child = data.children[childIndex];\n  instance.visit(child, data.valueOffsets[index], value);\n};\n/** @ignore */\nconst setSparseUnion = (data, index, value) => {\n  const childIndex = data.type.typeIdToChildIndex[data.typeIds[index]];\n  const child = data.children[childIndex];\n  instance.visit(child, index, value);\n};\n/** @ignore */\nconst setDictionary = (data, index, value) => {\n  var _a;\n  (_a = data.dictionary) === null || _a === void 0 ? void 0 : _a.set(data.values[index], value);\n};\n/* istanbul ignore next */\n/** @ignore */\nexport const setIntervalValue = (data, index, value) => {\n  data.type.unit === IntervalUnit.DAY_TIME ? setIntervalDayTime(data, index, value) : setIntervalYearMonth(data, index, value);\n};\n/** @ignore */\nexport const setIntervalDayTime = (_ref19, index, value) => {\n  let {\n    values\n  } = _ref19;\n  values.set(value.subarray(0, 2), 2 * index);\n};\n/** @ignore */\nexport const setIntervalYearMonth = (_ref20, index, value) => {\n  let {\n    values\n  } = _ref20;\n  values[index] = value[0] * 12 + value[1] % 12;\n};\n/** @ignore */\nconst setFixedSizeList = (data, index, value) => {\n  const {\n    stride\n  } = data;\n  const child = data.children[0];\n  const set = instance.getVisitFn(child);\n  if (Array.isArray(value)) {\n    for (let idx = -1, offset = index * stride; ++idx < stride;) {\n      set(child, offset + idx, value[idx]);\n    }\n  } else {\n    for (let idx = -1, offset = index * stride; ++idx < stride;) {\n      set(child, offset + idx, value.get(idx));\n    }\n  }\n};\nSetVisitor.prototype.visitBool = wrapSet(setBool);\nSetVisitor.prototype.visitInt = wrapSet(setInt);\nSetVisitor.prototype.visitInt8 = wrapSet(setInt);\nSetVisitor.prototype.visitInt16 = wrapSet(setInt);\nSetVisitor.prototype.visitInt32 = wrapSet(setInt);\nSetVisitor.prototype.visitInt64 = wrapSet(setInt);\nSetVisitor.prototype.visitUint8 = wrapSet(setInt);\nSetVisitor.prototype.visitUint16 = wrapSet(setInt);\nSetVisitor.prototype.visitUint32 = wrapSet(setInt);\nSetVisitor.prototype.visitUint64 = wrapSet(setInt);\nSetVisitor.prototype.visitFloat = wrapSet(setAnyFloat);\nSetVisitor.prototype.visitFloat16 = wrapSet(setFloat16);\nSetVisitor.prototype.visitFloat32 = wrapSet(setFloat);\nSetVisitor.prototype.visitFloat64 = wrapSet(setFloat);\nSetVisitor.prototype.visitUtf8 = wrapSet(setUtf8);\nSetVisitor.prototype.visitBinary = wrapSet(setBinary);\nSetVisitor.prototype.visitFixedSizeBinary = wrapSet(setFixedSizeBinary);\nSetVisitor.prototype.visitDate = wrapSet(setDate);\nSetVisitor.prototype.visitDateDay = wrapSet(setDateDay);\nSetVisitor.prototype.visitDateMillisecond = wrapSet(setDateMillisecond);\nSetVisitor.prototype.visitTimestamp = wrapSet(setTimestamp);\nSetVisitor.prototype.visitTimestampSecond = wrapSet(setTimestampSecond);\nSetVisitor.prototype.visitTimestampMillisecond = wrapSet(setTimestampMillisecond);\nSetVisitor.prototype.visitTimestampMicrosecond = wrapSet(setTimestampMicrosecond);\nSetVisitor.prototype.visitTimestampNanosecond = wrapSet(setTimestampNanosecond);\nSetVisitor.prototype.visitTime = wrapSet(setTime);\nSetVisitor.prototype.visitTimeSecond = wrapSet(setTimeSecond);\nSetVisitor.prototype.visitTimeMillisecond = wrapSet(setTimeMillisecond);\nSetVisitor.prototype.visitTimeMicrosecond = wrapSet(setTimeMicrosecond);\nSetVisitor.prototype.visitTimeNanosecond = wrapSet(setTimeNanosecond);\nSetVisitor.prototype.visitDecimal = wrapSet(setDecimal);\nSetVisitor.prototype.visitList = wrapSet(setList);\nSetVisitor.prototype.visitStruct = wrapSet(setStruct);\nSetVisitor.prototype.visitUnion = wrapSet(setUnion);\nSetVisitor.prototype.visitDenseUnion = wrapSet(setDenseUnion);\nSetVisitor.prototype.visitSparseUnion = wrapSet(setSparseUnion);\nSetVisitor.prototype.visitDictionary = wrapSet(setDictionary);\nSetVisitor.prototype.visitInterval = wrapSet(setIntervalValue);\nSetVisitor.prototype.visitIntervalDayTime = wrapSet(setIntervalDayTime);\nSetVisitor.prototype.visitIntervalYearMonth = wrapSet(setIntervalYearMonth);\nSetVisitor.prototype.visitFixedSizeList = wrapSet(setFixedSizeList);\nSetVisitor.prototype.visitMap = wrapSet(setMap);\n/** @ignore */\nexport const instance = new SetVisitor();","map":{"version":3,"names":["Vector","Visitor","encodeUtf8","float64ToUint16","UnionMode","Precision","DateUnit","TimeUnit","IntervalUnit","SetVisitor","wrapSet","fn","data","_1","_2","setValid","setEpochMsToDays","index","epochMs","Math","trunc","setEpochMsToMillisecondsLong","setEpochMsToMicrosecondsLong","setEpochMsToNanosecondsLong","setVariableWidthBytes","values","valueOffsets","value","length","x","y","set","subarray","setBool","_ref","val","offset","idx","setInt","_ref2","setFloat","_ref3","setFloat16","_ref4","setAnyFloat","type","precision","HALF","SINGLE","DOUBLE","setDateDay","_ref5","valueOf","setDateMillisecond","_ref6","setFixedSizeBinary","_ref7","stride","setBinary","_ref8","setUtf8","_ref9","setDate","unit","DAY","setTimestampSecond","_ref10","setTimestampMillisecond","_ref11","setTimestampMicrosecond","_ref12","setTimestampNanosecond","_ref13","setTimestamp","SECOND","MILLISECOND","MICROSECOND","NANOSECOND","setTimeSecond","_ref14","setTimeMillisecond","_ref15","setTimeMicrosecond","_ref16","setTimeNanosecond","_ref17","setTime","setDecimal","_ref18","setList","children","instance","getVisitFn","Array","isArray","itr","end","get","setMap","entries","Map","Object","_setStructArrayValue","o","v","c","_","i","_setStructVectorValue","_setStructMapValue","f","name","_setStructObjectValue","setStruct","childSetters","map","forEach","setUnion","mode","Dense","setDenseUnion","setSparseUnion","childIndex","typeIdToChildIndex","typeIds","child","visit","setDictionary","_a","dictionary","setIntervalValue","DAY_TIME","setIntervalDayTime","setIntervalYearMonth","_ref19","_ref20","setFixedSizeList","prototype","visitBool","visitInt","visitInt8","visitInt16","visitInt32","visitInt64","visitUint8","visitUint16","visitUint32","visitUint64","visitFloat","visitFloat16","visitFloat32","visitFloat64","visitUtf8","visitBinary","visitFixedSizeBinary","visitDate","visitDateDay","visitDateMillisecond","visitTimestamp","visitTimestampSecond","visitTimestampMillisecond","visitTimestampMicrosecond","visitTimestampNanosecond","visitTime","visitTimeSecond","visitTimeMillisecond","visitTimeMicrosecond","visitTimeNanosecond","visitDecimal","visitList","visitStruct","visitUnion","visitDenseUnion","visitSparseUnion","visitDictionary","visitInterval","visitIntervalDayTime","visitIntervalYearMonth","visitFixedSizeList","visitMap"],"sources":["C:\\Users\\mvlor\\OneDrive\\Desktop\\custom_component\\multi_menu\\template\\my_component\\frontend\\node_modules\\apache-arrow\\src\\visitor\\set.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data.js';\nimport { Field } from '../schema.js';\nimport { Vector } from '../vector.js';\nimport { Visitor } from '../visitor.js';\nimport { encodeUtf8 } from '../util/utf8.js';\nimport { TypeToDataType } from '../interfaces.js';\nimport { float64ToUint16 } from '../util/math.js';\nimport { Type, UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum.js';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type.js';\n\n/** @ignore */\nexport interface SetVisitor extends Visitor {\n    visit<T extends DataType>(node: Data<T>, index: number, value: T['TValue']): void;\n    visitMany<T extends DataType>(nodes: Data<T>[], indices: number[], values: T['TValue'][]): void[];\n    getVisitFn<T extends DataType>(node: Data<T> | T): (data: Data<T>, index: number, value: Data<T>['TValue']) => void;\n    getVisitFn<T extends Type>(node: T): (data: Data<TypeToDataType<T>>, index: number, value: TypeToDataType<T>['TValue']) => void;\n    visitNull<T extends Null>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitBool<T extends Bool>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitInt<T extends Int>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitInt8<T extends Int8>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitInt16<T extends Int16>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitInt32<T extends Int32>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitInt64<T extends Int64>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitUint8<T extends Uint8>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitUint16<T extends Uint16>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitUint32<T extends Uint32>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitUint64<T extends Uint64>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitFloat<T extends Float>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitFloat16<T extends Float16>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitFloat32<T extends Float32>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitFloat64<T extends Float64>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitUtf8<T extends Utf8>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitBinary<T extends Binary>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitFixedSizeBinary<T extends FixedSizeBinary>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitDate<T extends Date_>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitDateDay<T extends DateDay>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitDateMillisecond<T extends DateMillisecond>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitTimestamp<T extends Timestamp>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitTimestampSecond<T extends TimestampSecond>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitTimestampMillisecond<T extends TimestampMillisecond>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitTimestampMicrosecond<T extends TimestampMicrosecond>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitTimestampNanosecond<T extends TimestampNanosecond>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitTime<T extends Time>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitTimeSecond<T extends TimeSecond>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitTimeMillisecond<T extends TimeMillisecond>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitTimeMicrosecond<T extends TimeMicrosecond>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitTimeNanosecond<T extends TimeNanosecond>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitDecimal<T extends Decimal>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitList<T extends List>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitStruct<T extends Struct>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitUnion<T extends Union>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitDenseUnion<T extends DenseUnion>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitSparseUnion<T extends SparseUnion>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitDictionary<T extends Dictionary>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitInterval<T extends Interval>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitIntervalDayTime<T extends IntervalDayTime>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitIntervalYearMonth<T extends IntervalYearMonth>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitFixedSizeList<T extends FixedSizeList>(data: Data<T>, index: number, value: T['TValue']): void;\n    visitMap<T extends Map_>(data: Data<T>, index: number, value: T['TValue']): void;\n}\n\n/** @ignore */\nexport class SetVisitor extends Visitor { }\n\n/** @ignore */\nfunction wrapSet<T extends DataType>(fn: (data: Data<T>, _1: any, _2: any) => void) {\n    return (data: Data<T>, _1: any, _2: any) => {\n        if (data.setValid(_1, _2 != null)) {\n            return fn(data, _1, _2);\n        }\n    };\n}\n\n/** @ignore */\nexport const setEpochMsToDays = (data: Int32Array, index: number, epochMs: number) => { data[index] = Math.trunc(epochMs / 86400000); };\n/** @ignore */\nexport const setEpochMsToMillisecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = Math.trunc(epochMs % 4294967296);\n    data[index + 1] = Math.trunc(epochMs / 4294967296);\n};\n/** @ignore */\nexport const setEpochMsToMicrosecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = Math.trunc((epochMs * 1000) % 4294967296);\n    data[index + 1] = Math.trunc((epochMs * 1000) / 4294967296);\n};\n/** @ignore */\nexport const setEpochMsToNanosecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = Math.trunc((epochMs * 1000000) % 4294967296);\n    data[index + 1] = Math.trunc((epochMs * 1000000) / 4294967296);\n};\n\n/** @ignore */\nexport const setVariableWidthBytes = (values: Uint8Array, valueOffsets: Int32Array, index: number, value: Uint8Array) => {\n    if (index + 1 < valueOffsets.length) {\n        const { [index]: x, [index + 1]: y } = valueOffsets;\n        values.set(value.subarray(0, y - x), x);\n    }\n};\n\n/** @ignore */\nconst setBool = <T extends Bool>({ offset, values }: Data<T>, index: number, val: boolean) => {\n    const idx = offset + index;\n    val ? (values[idx >> 3] |= (1 << (idx % 8)))  // true\n        : (values[idx >> 3] &= ~(1 << (idx % 8))); // false\n\n};\n/** @ignore */\nexport const setInt = <T extends Int>({ values }: Data<T>, index: number, value: T['TValue']): void => { values[index] = value; };\n/** @ignore */\nexport const setFloat = <T extends Float32 | Float64>({ values }: Data<T>, index: number, value: T['TValue']): void => { values[index] = value; };\n/** @ignore */\nexport const setFloat16 = <T extends Float16>({ values }: Data<T>, index: number, value: T['TValue']): void => { values[index] = float64ToUint16(value); };\n/* istanbul ignore next */\n/** @ignore */\nexport const setAnyFloat = <T extends Float>(data: Data<T>, index: number, value: T['TValue']): void => {\n    switch (data.type.precision) {\n        case Precision.HALF:\n            return setFloat16(data as Data<Float16>, index, value);\n        case Precision.SINGLE:\n        case Precision.DOUBLE:\n            return setFloat(data as Data<Float32 | Float64>, index, value);\n    }\n};\n/** @ignore */\nexport const setDateDay = <T extends DateDay>({ values }: Data<T>, index: number, value: T['TValue']): void => { setEpochMsToDays(values, index, value.valueOf()); };\n/** @ignore */\nexport const setDateMillisecond = <T extends DateMillisecond>({ values }: Data<T>, index: number, value: T['TValue']): void => { setEpochMsToMillisecondsLong(values, index * 2, value.valueOf()); };\n/** @ignore */\nexport const setFixedSizeBinary = <T extends FixedSizeBinary>({ stride, values }: Data<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, stride), stride * index); };\n\n/** @ignore */\nconst setBinary = <T extends Binary>({ values, valueOffsets }: Data<T>, index: number, value: T['TValue']) => setVariableWidthBytes(values, valueOffsets, index, value);\n/** @ignore */\nconst setUtf8 = <T extends Utf8>({ values, valueOffsets }: Data<T>, index: number, value: T['TValue']) => {\n    setVariableWidthBytes(values, valueOffsets, index, encodeUtf8(value));\n};\n\n/* istanbul ignore next */\nexport const setDate = <T extends Date_>(data: Data<T>, index: number, value: T['TValue']): void => {\n    data.type.unit === DateUnit.DAY\n        ? setDateDay(data as Data<DateDay>, index, value)\n        : setDateMillisecond(data as Data<DateMillisecond>, index, value);\n};\n\n/** @ignore */\nexport const setTimestampSecond = <T extends TimestampSecond>({ values }: Data<T>, index: number, value: T['TValue']): void => setEpochMsToMillisecondsLong(values, index * 2, value / 1000);\n/** @ignore */\nexport const setTimestampMillisecond = <T extends TimestampMillisecond>({ values }: Data<T>, index: number, value: T['TValue']): void => setEpochMsToMillisecondsLong(values, index * 2, value);\n/** @ignore */\nexport const setTimestampMicrosecond = <T extends TimestampMicrosecond>({ values }: Data<T>, index: number, value: T['TValue']): void => setEpochMsToMicrosecondsLong(values, index * 2, value);\n/** @ignore */\nexport const setTimestampNanosecond = <T extends TimestampNanosecond>({ values }: Data<T>, index: number, value: T['TValue']): void => setEpochMsToNanosecondsLong(values, index * 2, value);\n/* istanbul ignore next */\n/** @ignore */\nexport const setTimestamp = <T extends Timestamp>(data: Data<T>, index: number, value: T['TValue']): void => {\n    switch (data.type.unit) {\n        case TimeUnit.SECOND: return setTimestampSecond(data as Data<TimestampSecond>, index, value);\n        case TimeUnit.MILLISECOND: return setTimestampMillisecond(data as Data<TimestampMillisecond>, index, value);\n        case TimeUnit.MICROSECOND: return setTimestampMicrosecond(data as Data<TimestampMicrosecond>, index, value);\n        case TimeUnit.NANOSECOND: return setTimestampNanosecond(data as Data<TimestampNanosecond>, index, value);\n    }\n};\n\n/** @ignore */\nexport const setTimeSecond = <T extends TimeSecond>({ values }: Data<T>, index: number, value: T['TValue']): void => { values[index] = value; };\n/** @ignore */\nexport const setTimeMillisecond = <T extends TimeMillisecond>({ values }: Data<T>, index: number, value: T['TValue']): void => { values[index] = value; };\n/** @ignore */\nexport const setTimeMicrosecond = <T extends TimeMicrosecond>({ values }: Data<T>, index: number, value: T['TValue']): void => { values[index] = value; };\n/** @ignore */\nexport const setTimeNanosecond = <T extends TimeNanosecond>({ values }: Data<T>, index: number, value: T['TValue']): void => { values[index] = value; };\n/* istanbul ignore next */\n/** @ignore */\nexport const setTime = <T extends Time>(data: Data<T>, index: number, value: T['TValue']): void => {\n    switch (data.type.unit) {\n        case TimeUnit.SECOND: return setTimeSecond(data as Data<TimeSecond>, index, value as TimeSecond['TValue']);\n        case TimeUnit.MILLISECOND: return setTimeMillisecond(data as Data<TimeMillisecond>, index, value as TimeMillisecond['TValue']);\n        case TimeUnit.MICROSECOND: return setTimeMicrosecond(data as Data<TimeMicrosecond>, index, value as TimeMicrosecond['TValue']);\n        case TimeUnit.NANOSECOND: return setTimeNanosecond(data as Data<TimeNanosecond>, index, value as TimeNanosecond['TValue']);\n    }\n};\n\n/** @ignore */\nexport const setDecimal = <T extends Decimal>({ values, stride }: Data<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, stride), stride * index); };\n\n/** @ignore */\nconst setList = <T extends List>(data: Data<T>, index: number, value: T['TValue']): void => {\n    const values = data.children[0];\n    const valueOffsets = data.valueOffsets;\n    const set = instance.getVisitFn(values);\n    if (Array.isArray(value)) {\n        for (let idx = -1, itr = valueOffsets[index], end = valueOffsets[index + 1]; itr < end;) {\n            set(values, itr++, value[++idx]);\n        }\n    } else {\n        for (let idx = -1, itr = valueOffsets[index], end = valueOffsets[index + 1]; itr < end;) {\n            set(values, itr++, value.get(++idx));\n        }\n    }\n};\n\n/** @ignore */\nconst setMap = <T extends Map_>(data: Data<T>, index: number, value: T['TValue']) => {\n    const values = data.children[0];\n    const { valueOffsets } = data;\n    const set = instance.getVisitFn(values);\n    let { [index]: idx, [index + 1]: end } = valueOffsets;\n    const entries = value instanceof Map ? value.entries() : Object.entries(value);\n    for (const val of entries) {\n        set(values, idx, val);\n        if (++idx >= end) break;\n    }\n};\n\n/** @ignore */ type SetFunc<T extends DataType> = (data: Data<T>, i: number, v: T['TValue']) => void;\n\n/** @ignore */ const _setStructArrayValue = (o: number, v: any[]) =>\n    <T extends DataType>(set: SetFunc<T>, c: Data<T>, _: Field, i: number) => c && set(c, o, v[i]);\n\n/** @ignore */ const _setStructVectorValue = (o: number, v: Vector) =>\n    <T extends DataType>(set: SetFunc<T>, c: Data<T>, _: Field, i: number) => c && set(c, o, v.get(i));\n\n/** @ignore */ const _setStructMapValue = (o: number, v: Map<string, any>) =>\n    <T extends DataType>(set: SetFunc<T>, c: Data<T>, f: Field, _: number) => c && set(c, o, v.get(f.name));\n\n/** @ignore */ const _setStructObjectValue = (o: number, v: { [key: string]: any }) =>\n    <T extends DataType>(set: SetFunc<T>, c: Data<T>, f: Field, _: number) => c && set(c, o, v[f.name]);\n\n/** @ignore */\nconst setStruct = <T extends Struct>(data: Data<T>, index: number, value: T['TValue']) => {\n\n    const childSetters = data.type.children.map((f) => instance.getVisitFn(f.type));\n    const set = value instanceof Map ? _setStructMapValue(index, value) :\n        value instanceof Vector ? _setStructVectorValue(index, value) :\n            Array.isArray(value) ? _setStructArrayValue(index, value) :\n                _setStructObjectValue(index, value);\n\n    // eslint-disable-next-line unicorn/no-array-for-each\n    data.type.children.forEach((f: Field, i: number) => set(childSetters[i], data.children[i], f, i));\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setUnion = <\n    V extends Data<Union> | Data<DenseUnion> | Data<SparseUnion>\n>(data: V, index: number, value: V['TValue']) => {\n    data.type.mode === UnionMode.Dense ?\n        setDenseUnion(data as Data<DenseUnion>, index, value) :\n        setSparseUnion(data as Data<SparseUnion>, index, value);\n};\n\n/** @ignore */\nconst setDenseUnion = <T extends DenseUnion>(data: Data<T>, index: number, value: T['TValue']): void => {\n    const childIndex = data.type.typeIdToChildIndex[data.typeIds[index]];\n    const child = data.children[childIndex];\n    instance.visit(child, data.valueOffsets[index], value);\n};\n\n/** @ignore */\nconst setSparseUnion = <T extends SparseUnion>(data: Data<T>, index: number, value: T['TValue']): void => {\n    const childIndex = data.type.typeIdToChildIndex[data.typeIds[index]];\n    const child = data.children[childIndex];\n    instance.visit(child, index, value);\n};\n\n/** @ignore */\nconst setDictionary = <T extends Dictionary>(data: Data<T>, index: number, value: T['TValue']): void => {\n    data.dictionary?.set(data.values[index], value);\n};\n\n/* istanbul ignore next */\n/** @ignore */\nexport const setIntervalValue = <T extends Interval>(data: Data<T>, index: number, value: T['TValue']): void => {\n    (data.type.unit === IntervalUnit.DAY_TIME)\n        ? setIntervalDayTime(data as Data<IntervalDayTime>, index, value)\n        : setIntervalYearMonth(data as Data<IntervalYearMonth>, index, value);\n};\n\n/** @ignore */\nexport const setIntervalDayTime = <T extends IntervalDayTime>({ values }: Data<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\n/** @ignore */\nexport const setIntervalYearMonth = <T extends IntervalYearMonth>({ values }: Data<T>, index: number, value: T['TValue']): void => { values[index] = (value[0] * 12) + (value[1] % 12); };\n\n/** @ignore */\nconst setFixedSizeList = <T extends FixedSizeList>(data: Data<T>, index: number, value: T['TValue']): void => {\n    const { stride } = data;\n    const child = data.children[0];\n    const set = instance.getVisitFn(child);\n    if (Array.isArray(value)) {\n        for (let idx = -1, offset = index * stride; ++idx < stride;) {\n            set(child, offset + idx, value[idx]);\n        }\n    } else {\n        for (let idx = -1, offset = index * stride; ++idx < stride;) {\n            set(child, offset + idx, value.get(idx));\n        }\n    }\n};\n\nSetVisitor.prototype.visitBool = wrapSet(setBool);\nSetVisitor.prototype.visitInt = wrapSet(setInt);\nSetVisitor.prototype.visitInt8 = wrapSet(setInt);\nSetVisitor.prototype.visitInt16 = wrapSet(setInt);\nSetVisitor.prototype.visitInt32 = wrapSet(setInt);\nSetVisitor.prototype.visitInt64 = wrapSet(setInt);\nSetVisitor.prototype.visitUint8 = wrapSet(setInt);\nSetVisitor.prototype.visitUint16 = wrapSet(setInt);\nSetVisitor.prototype.visitUint32 = wrapSet(setInt);\nSetVisitor.prototype.visitUint64 = wrapSet(setInt);\nSetVisitor.prototype.visitFloat = wrapSet(setAnyFloat);\nSetVisitor.prototype.visitFloat16 = wrapSet(setFloat16);\nSetVisitor.prototype.visitFloat32 = wrapSet(setFloat);\nSetVisitor.prototype.visitFloat64 = wrapSet(setFloat);\nSetVisitor.prototype.visitUtf8 = wrapSet(setUtf8);\nSetVisitor.prototype.visitBinary = wrapSet(setBinary);\nSetVisitor.prototype.visitFixedSizeBinary = wrapSet(setFixedSizeBinary);\nSetVisitor.prototype.visitDate = wrapSet(setDate);\nSetVisitor.prototype.visitDateDay = wrapSet(setDateDay);\nSetVisitor.prototype.visitDateMillisecond = wrapSet(setDateMillisecond);\nSetVisitor.prototype.visitTimestamp = wrapSet(setTimestamp);\nSetVisitor.prototype.visitTimestampSecond = wrapSet(setTimestampSecond);\nSetVisitor.prototype.visitTimestampMillisecond = wrapSet(setTimestampMillisecond);\nSetVisitor.prototype.visitTimestampMicrosecond = wrapSet(setTimestampMicrosecond);\nSetVisitor.prototype.visitTimestampNanosecond = wrapSet(setTimestampNanosecond);\nSetVisitor.prototype.visitTime = wrapSet(setTime);\nSetVisitor.prototype.visitTimeSecond = wrapSet(setTimeSecond);\nSetVisitor.prototype.visitTimeMillisecond = wrapSet(setTimeMillisecond);\nSetVisitor.prototype.visitTimeMicrosecond = wrapSet(setTimeMicrosecond);\nSetVisitor.prototype.visitTimeNanosecond = wrapSet(setTimeNanosecond);\nSetVisitor.prototype.visitDecimal = wrapSet(setDecimal);\nSetVisitor.prototype.visitList = wrapSet(setList);\nSetVisitor.prototype.visitStruct = wrapSet(setStruct);\nSetVisitor.prototype.visitUnion = wrapSet(setUnion);\nSetVisitor.prototype.visitDenseUnion = wrapSet(setDenseUnion);\nSetVisitor.prototype.visitSparseUnion = wrapSet(setSparseUnion);\nSetVisitor.prototype.visitDictionary = wrapSet(setDictionary);\nSetVisitor.prototype.visitInterval = wrapSet(setIntervalValue);\nSetVisitor.prototype.visitIntervalDayTime = wrapSet(setIntervalDayTime);\nSetVisitor.prototype.visitIntervalYearMonth = wrapSet(setIntervalYearMonth);\nSetVisitor.prototype.visitFixedSizeList = wrapSet(setFixedSizeList);\nSetVisitor.prototype.visitMap = wrapSet(setMap);\n\n/** @ignore */\nexport const instance = new SetVisitor();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}