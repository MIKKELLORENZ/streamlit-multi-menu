{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Field } from '../schema.mjs';\nimport { DataBufferBuilder } from './buffer.mjs';\nimport { Builder } from '../builder.mjs';\nimport { Union } from '../type.mjs';\n/** @ignore */\nexport class UnionBuilder extends Builder {\n  constructor(options) {\n    super(options);\n    this._typeIds = new DataBufferBuilder(new Int8Array(0), 1);\n    if (typeof options['valueToChildTypeId'] === 'function') {\n      this._valueToChildTypeId = options['valueToChildTypeId'];\n    }\n  }\n  get typeIdToChildIndex() {\n    return this.type.typeIdToChildIndex;\n  }\n  append(value, childTypeId) {\n    return this.set(this.length, value, childTypeId);\n  }\n  set(index, value, childTypeId) {\n    if (childTypeId === undefined) {\n      childTypeId = this._valueToChildTypeId(this, value, index);\n    }\n    if (this.setValid(index, this.isValid(value))) {\n      this.setValue(index, value, childTypeId);\n    }\n    return this;\n  }\n  setValue(index, value, childTypeId) {\n    this._typeIds.set(index, childTypeId);\n    const childIndex = this.type.typeIdToChildIndex[childTypeId];\n    const child = this.children[childIndex];\n    child === null || child === void 0 ? void 0 : child.set(index, value);\n  }\n  addChild(child, name = `${this.children.length}`) {\n    const childTypeId = this.children.push(child);\n    const {\n      type: {\n        children,\n        mode,\n        typeIds\n      }\n    } = this;\n    const fields = [...children, new Field(name, child.type)];\n    this.type = new Union(mode, [...typeIds, childTypeId], fields);\n    return childTypeId;\n  }\n  /** @ignore */\n  // @ts-ignore\n  _valueToChildTypeId(builder, value, offset) {\n    throw new Error(`Cannot map UnionBuilder value to child typeId. \\\nPass the \\`childTypeId\\` as the second argument to unionBuilder.append(), \\\nor supply a \\`valueToChildTypeId\\` function as part of the UnionBuilder constructor options.`);\n  }\n}\n/** @ignore */\nexport class SparseUnionBuilder extends UnionBuilder {}\n/** @ignore */\nexport class DenseUnionBuilder extends UnionBuilder {\n  constructor(options) {\n    super(options);\n    this._offsets = new DataBufferBuilder(new Int32Array(0));\n  }\n  /** @ignore */\n  setValue(index, value, childTypeId) {\n    const id = this._typeIds.set(index, childTypeId).buffer[index];\n    const child = this.getChildAt(this.type.typeIdToChildIndex[id]);\n    const denseIndex = this._offsets.set(index, child.length).buffer[index];\n    child === null || child === void 0 ? void 0 : child.set(denseIndex, value);\n  }\n}","map":{"version":3,"names":["Field","DataBufferBuilder","Builder","Union","UnionBuilder","constructor","options","_typeIds","Int8Array","_valueToChildTypeId","typeIdToChildIndex","type","append","value","childTypeId","set","length","index","undefined","setValid","isValid","setValue","childIndex","child","children","addChild","name","push","mode","typeIds","fields","builder","offset","Error","SparseUnionBuilder","DenseUnionBuilder","_offsets","Int32Array","id","buffer","getChildAt","denseIndex"],"sources":["C:\\Users\\mvlor\\OneDrive\\Desktop\\custom_component\\streamlit_multi_menu\\template\\streamlit_multi_menu\\frontend\\node_modules\\apache-arrow\\src\\builder\\union.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from '../schema.js';\nimport { DataBufferBuilder } from './buffer.js';\nimport { Builder, BuilderOptions } from '../builder.js';\nimport { Union, SparseUnion, DenseUnion } from '../type.js';\n\nexport interface UnionBuilderOptions<T extends Union = any, TNull = any> extends BuilderOptions<T, TNull> {\n    valueToChildTypeId?: (builder: UnionBuilder<T, TNull>, value: any, offset: number) => number;\n}\n\n/** @ignore */\nexport abstract class UnionBuilder<T extends Union, TNull = any> extends Builder<T, TNull> {\n\n    protected _typeIds: DataBufferBuilder<Int8Array>;\n\n    constructor(options: UnionBuilderOptions<T, TNull>) {\n        super(options);\n        this._typeIds = new DataBufferBuilder(new Int8Array(0), 1);\n        if (typeof options['valueToChildTypeId'] === 'function') {\n            this._valueToChildTypeId = options['valueToChildTypeId'];\n        }\n    }\n\n    public get typeIdToChildIndex() { return this.type.typeIdToChildIndex; }\n\n    public append(value: T['TValue'] | TNull, childTypeId?: number) {\n        return this.set(this.length, value, childTypeId);\n    }\n\n    public set(index: number, value: T['TValue'] | TNull, childTypeId?: number) {\n        if (childTypeId === undefined) {\n            childTypeId = this._valueToChildTypeId(this, value, index);\n        }\n        if (this.setValid(index, this.isValid(value))) {\n            this.setValue(index, value, childTypeId);\n        }\n        return this;\n    }\n\n    public setValue(index: number, value: T['TValue'], childTypeId?: number) {\n        this._typeIds.set(index, childTypeId!);\n        const childIndex = this.type.typeIdToChildIndex[childTypeId!];\n        const child = this.children[childIndex];\n        child?.set(index, value);\n    }\n\n    public addChild(child: Builder, name = `${this.children.length}`) {\n        const childTypeId = this.children.push(child);\n        const { type: { children, mode, typeIds } } = this;\n        const fields = [...children, new Field(name, child.type)];\n        this.type = <T>new Union(mode, [...typeIds, childTypeId], fields);\n        return childTypeId;\n    }\n\n    /** @ignore */\n    // @ts-ignore\n    protected _valueToChildTypeId(builder: UnionBuilder<T, TNull>, value: any, offset: number): number {\n        throw new Error(`Cannot map UnionBuilder value to child typeId. \\\nPass the \\`childTypeId\\` as the second argument to unionBuilder.append(), \\\nor supply a \\`valueToChildTypeId\\` function as part of the UnionBuilder constructor options.`);\n    }\n}\n\n/** @ignore */\nexport class SparseUnionBuilder<T extends SparseUnion, TNull = any> extends UnionBuilder<T, TNull> { }\n/** @ignore */\nexport class DenseUnionBuilder<T extends DenseUnion, TNull = any> extends UnionBuilder<T, TNull> {\n\n    protected _offsets: DataBufferBuilder<Int32Array>;\n\n    constructor(options: UnionBuilderOptions<T, TNull>) {\n        super(options);\n        this._offsets = new DataBufferBuilder(new Int32Array(0));\n    }\n\n    /** @ignore */\n    public setValue(index: number, value: T['TValue'], childTypeId?: number) {\n        const id = this._typeIds.set(index, childTypeId!).buffer[index];\n        const child = this.getChildAt(this.type.typeIdToChildIndex[id])!;\n        const denseIndex = this._offsets.set(index, child.length).buffer[index];\n        child?.set(denseIndex, value);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}