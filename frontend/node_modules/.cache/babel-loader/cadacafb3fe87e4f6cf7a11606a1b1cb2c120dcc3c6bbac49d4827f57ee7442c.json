{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nvar _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u;\nimport { BigInt64Array, BigUint64Array } from './util/compat.mjs';\nimport { Type, Precision, UnionMode, DateUnit, TimeUnit, IntervalUnit } from './enum.mjs';\n/**\n * An abstract base class for classes that encapsulate metadata about each of\n * the logical types that Arrow can represent.\n */\nexport class DataType {\n  /** @nocollapse */static isNull(x) {\n    return (x === null || x === void 0 ? void 0 : x.typeId) === Type.Null;\n  }\n  /** @nocollapse */\n  static isInt(x) {\n    return (x === null || x === void 0 ? void 0 : x.typeId) === Type.Int;\n  }\n  /** @nocollapse */\n  static isFloat(x) {\n    return (x === null || x === void 0 ? void 0 : x.typeId) === Type.Float;\n  }\n  /** @nocollapse */\n  static isBinary(x) {\n    return (x === null || x === void 0 ? void 0 : x.typeId) === Type.Binary;\n  }\n  /** @nocollapse */\n  static isUtf8(x) {\n    return (x === null || x === void 0 ? void 0 : x.typeId) === Type.Utf8;\n  }\n  /** @nocollapse */\n  static isBool(x) {\n    return (x === null || x === void 0 ? void 0 : x.typeId) === Type.Bool;\n  }\n  /** @nocollapse */\n  static isDecimal(x) {\n    return (x === null || x === void 0 ? void 0 : x.typeId) === Type.Decimal;\n  }\n  /** @nocollapse */\n  static isDate(x) {\n    return (x === null || x === void 0 ? void 0 : x.typeId) === Type.Date;\n  }\n  /** @nocollapse */\n  static isTime(x) {\n    return (x === null || x === void 0 ? void 0 : x.typeId) === Type.Time;\n  }\n  /** @nocollapse */\n  static isTimestamp(x) {\n    return (x === null || x === void 0 ? void 0 : x.typeId) === Type.Timestamp;\n  }\n  /** @nocollapse */\n  static isInterval(x) {\n    return (x === null || x === void 0 ? void 0 : x.typeId) === Type.Interval;\n  }\n  /** @nocollapse */\n  static isList(x) {\n    return (x === null || x === void 0 ? void 0 : x.typeId) === Type.List;\n  }\n  /** @nocollapse */\n  static isStruct(x) {\n    return (x === null || x === void 0 ? void 0 : x.typeId) === Type.Struct;\n  }\n  /** @nocollapse */\n  static isUnion(x) {\n    return (x === null || x === void 0 ? void 0 : x.typeId) === Type.Union;\n  }\n  /** @nocollapse */\n  static isFixedSizeBinary(x) {\n    return (x === null || x === void 0 ? void 0 : x.typeId) === Type.FixedSizeBinary;\n  }\n  /** @nocollapse */\n  static isFixedSizeList(x) {\n    return (x === null || x === void 0 ? void 0 : x.typeId) === Type.FixedSizeList;\n  }\n  /** @nocollapse */\n  static isMap(x) {\n    return (x === null || x === void 0 ? void 0 : x.typeId) === Type.Map;\n  }\n  /** @nocollapse */\n  static isDictionary(x) {\n    return (x === null || x === void 0 ? void 0 : x.typeId) === Type.Dictionary;\n  }\n  /** @nocollapse */\n  static isDenseUnion(x) {\n    return DataType.isUnion(x) && x.mode === UnionMode.Dense;\n  }\n  /** @nocollapse */\n  static isSparseUnion(x) {\n    return DataType.isUnion(x) && x.mode === UnionMode.Sparse;\n  }\n  get typeId() {\n    return Type.NONE;\n  }\n}\n_a = Symbol.toStringTag;\nDataType[_a] = (proto => {\n  proto.children = null;\n  proto.ArrayType = Array;\n  return proto[Symbol.toStringTag] = 'DataType';\n})(DataType.prototype);\n/** @ignore */\nexport class Null extends DataType {\n  toString() {\n    return \"Null\";\n  }\n  get typeId() {\n    return Type.Null;\n  }\n}\n_b = Symbol.toStringTag;\nNull[_b] = (proto => proto[Symbol.toStringTag] = 'Null')(Null.prototype);\n/** @ignore */\nclass Int_ extends DataType {\n  constructor(isSigned, bitWidth) {\n    super();\n    this.isSigned = isSigned;\n    this.bitWidth = bitWidth;\n  }\n  get typeId() {\n    return Type.Int;\n  }\n  get ArrayType() {\n    switch (this.bitWidth) {\n      case 8:\n        return this.isSigned ? Int8Array : Uint8Array;\n      case 16:\n        return this.isSigned ? Int16Array : Uint16Array;\n      case 32:\n        return this.isSigned ? Int32Array : Uint32Array;\n      case 64:\n        return this.isSigned ? BigInt64Array : BigUint64Array;\n    }\n    throw new Error(\"Unrecognized \".concat(this[Symbol.toStringTag], \" type\"));\n  }\n  toString() {\n    return \"\".concat(this.isSigned ? \"I\" : \"Ui\", \"nt\").concat(this.bitWidth);\n  }\n}\n_c = Symbol.toStringTag;\nInt_[_c] = (proto => {\n  proto.isSigned = null;\n  proto.bitWidth = null;\n  return proto[Symbol.toStringTag] = 'Int';\n})(Int_.prototype);\nexport { Int_ as Int };\n/** @ignore */\nexport class Int8 extends Int_ {\n  constructor() {\n    super(true, 8);\n  }\n  get ArrayType() {\n    return Int8Array;\n  }\n}\n/** @ignore */\nexport class Int16 extends Int_ {\n  constructor() {\n    super(true, 16);\n  }\n  get ArrayType() {\n    return Int16Array;\n  }\n}\n/** @ignore */\nexport class Int32 extends Int_ {\n  constructor() {\n    super(true, 32);\n  }\n  get ArrayType() {\n    return Int32Array;\n  }\n}\n/** @ignore */\nexport class Int64 extends Int_ {\n  constructor() {\n    super(true, 64);\n  }\n  get ArrayType() {\n    return BigInt64Array;\n  }\n}\n/** @ignore */\nexport class Uint8 extends Int_ {\n  constructor() {\n    super(false, 8);\n  }\n  get ArrayType() {\n    return Uint8Array;\n  }\n}\n/** @ignore */\nexport class Uint16 extends Int_ {\n  constructor() {\n    super(false, 16);\n  }\n  get ArrayType() {\n    return Uint16Array;\n  }\n}\n/** @ignore */\nexport class Uint32 extends Int_ {\n  constructor() {\n    super(false, 32);\n  }\n  get ArrayType() {\n    return Uint32Array;\n  }\n}\n/** @ignore */\nexport class Uint64 extends Int_ {\n  constructor() {\n    super(false, 64);\n  }\n  get ArrayType() {\n    return BigUint64Array;\n  }\n}\nObject.defineProperty(Int8.prototype, 'ArrayType', {\n  value: Int8Array\n});\nObject.defineProperty(Int16.prototype, 'ArrayType', {\n  value: Int16Array\n});\nObject.defineProperty(Int32.prototype, 'ArrayType', {\n  value: Int32Array\n});\nObject.defineProperty(Int64.prototype, 'ArrayType', {\n  value: BigInt64Array\n});\nObject.defineProperty(Uint8.prototype, 'ArrayType', {\n  value: Uint8Array\n});\nObject.defineProperty(Uint16.prototype, 'ArrayType', {\n  value: Uint16Array\n});\nObject.defineProperty(Uint32.prototype, 'ArrayType', {\n  value: Uint32Array\n});\nObject.defineProperty(Uint64.prototype, 'ArrayType', {\n  value: BigUint64Array\n});\n/** @ignore */\nexport class Float extends DataType {\n  constructor(precision) {\n    super();\n    this.precision = precision;\n  }\n  get typeId() {\n    return Type.Float;\n  }\n  get ArrayType() {\n    switch (this.precision) {\n      case Precision.HALF:\n        return Uint16Array;\n      case Precision.SINGLE:\n        return Float32Array;\n      case Precision.DOUBLE:\n        return Float64Array;\n    }\n    // @ts-ignore\n    throw new Error(\"Unrecognized \".concat(this[Symbol.toStringTag], \" type\"));\n  }\n  toString() {\n    return \"Float\".concat(this.precision << 5 || 16);\n  }\n}\n_d = Symbol.toStringTag;\nFloat[_d] = (proto => {\n  proto.precision = null;\n  return proto[Symbol.toStringTag] = 'Float';\n})(Float.prototype);\n/** @ignore */\nexport class Float16 extends Float {\n  constructor() {\n    super(Precision.HALF);\n  }\n}\n/** @ignore */\nexport class Float32 extends Float {\n  constructor() {\n    super(Precision.SINGLE);\n  }\n}\n/** @ignore */\nexport class Float64 extends Float {\n  constructor() {\n    super(Precision.DOUBLE);\n  }\n}\nObject.defineProperty(Float16.prototype, 'ArrayType', {\n  value: Uint16Array\n});\nObject.defineProperty(Float32.prototype, 'ArrayType', {\n  value: Float32Array\n});\nObject.defineProperty(Float64.prototype, 'ArrayType', {\n  value: Float64Array\n});\n/** @ignore */\nexport class Binary extends DataType {\n  constructor() {\n    super();\n  }\n  get typeId() {\n    return Type.Binary;\n  }\n  toString() {\n    return \"Binary\";\n  }\n}\n_e = Symbol.toStringTag;\nBinary[_e] = (proto => {\n  proto.ArrayType = Uint8Array;\n  return proto[Symbol.toStringTag] = 'Binary';\n})(Binary.prototype);\n/** @ignore */\nexport class Utf8 extends DataType {\n  constructor() {\n    super();\n  }\n  get typeId() {\n    return Type.Utf8;\n  }\n  toString() {\n    return \"Utf8\";\n  }\n}\n_f = Symbol.toStringTag;\nUtf8[_f] = (proto => {\n  proto.ArrayType = Uint8Array;\n  return proto[Symbol.toStringTag] = 'Utf8';\n})(Utf8.prototype);\n/** @ignore */\nexport class Bool extends DataType {\n  constructor() {\n    super();\n  }\n  get typeId() {\n    return Type.Bool;\n  }\n  toString() {\n    return \"Bool\";\n  }\n}\n_g = Symbol.toStringTag;\nBool[_g] = (proto => {\n  proto.ArrayType = Uint8Array;\n  return proto[Symbol.toStringTag] = 'Bool';\n})(Bool.prototype);\n/** @ignore */\nexport class Decimal extends DataType {\n  constructor(scale, precision) {\n    let bitWidth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 128;\n    super();\n    this.scale = scale;\n    this.precision = precision;\n    this.bitWidth = bitWidth;\n  }\n  get typeId() {\n    return Type.Decimal;\n  }\n  toString() {\n    return \"Decimal[\".concat(this.precision, \"e\").concat(this.scale > 0 ? \"+\" : \"\").concat(this.scale, \"]\");\n  }\n}\n_h = Symbol.toStringTag;\nDecimal[_h] = (proto => {\n  proto.scale = null;\n  proto.precision = null;\n  proto.ArrayType = Uint32Array;\n  return proto[Symbol.toStringTag] = 'Decimal';\n})(Decimal.prototype);\n/** @ignore */\nexport class Date_ extends DataType {\n  constructor(unit) {\n    super();\n    this.unit = unit;\n  }\n  get typeId() {\n    return Type.Date;\n  }\n  toString() {\n    return \"Date\".concat((this.unit + 1) * 32, \"<\").concat(DateUnit[this.unit], \">\");\n  }\n}\n_j = Symbol.toStringTag;\nDate_[_j] = (proto => {\n  proto.unit = null;\n  proto.ArrayType = Int32Array;\n  return proto[Symbol.toStringTag] = 'Date';\n})(Date_.prototype);\n/** @ignore */\nexport class DateDay extends Date_ {\n  constructor() {\n    super(DateUnit.DAY);\n  }\n}\n/** @ignore */\nexport class DateMillisecond extends Date_ {\n  constructor() {\n    super(DateUnit.MILLISECOND);\n  }\n}\n/** @ignore */\nclass Time_ extends DataType {\n  constructor(unit, bitWidth) {\n    super();\n    this.unit = unit;\n    this.bitWidth = bitWidth;\n  }\n  get typeId() {\n    return Type.Time;\n  }\n  toString() {\n    return \"Time\".concat(this.bitWidth, \"<\").concat(TimeUnit[this.unit], \">\");\n  }\n  get ArrayType() {\n    switch (this.bitWidth) {\n      case 32:\n        return Int32Array;\n      case 64:\n        return BigInt64Array;\n    }\n    // @ts-ignore\n    throw new Error(\"Unrecognized \".concat(this[Symbol.toStringTag], \" type\"));\n  }\n}\n_k = Symbol.toStringTag;\nTime_[_k] = (proto => {\n  proto.unit = null;\n  proto.bitWidth = null;\n  return proto[Symbol.toStringTag] = 'Time';\n})(Time_.prototype);\nexport { Time_ as Time };\n/** @ignore */\nexport class TimeSecond extends Time_ {\n  constructor() {\n    super(TimeUnit.SECOND, 32);\n  }\n}\n/** @ignore */\nexport class TimeMillisecond extends Time_ {\n  constructor() {\n    super(TimeUnit.MILLISECOND, 32);\n  }\n}\n/** @ignore */\nexport class TimeMicrosecond extends Time_ {\n  constructor() {\n    super(TimeUnit.MICROSECOND, 64);\n  }\n}\n/** @ignore */\nexport class TimeNanosecond extends Time_ {\n  constructor() {\n    super(TimeUnit.NANOSECOND, 64);\n  }\n}\n/** @ignore */\nclass Timestamp_ extends DataType {\n  constructor(unit, timezone) {\n    super();\n    this.unit = unit;\n    this.timezone = timezone;\n  }\n  get typeId() {\n    return Type.Timestamp;\n  }\n  toString() {\n    return \"Timestamp<\".concat(TimeUnit[this.unit]).concat(this.timezone ? \", \".concat(this.timezone) : \"\", \">\");\n  }\n}\n_l = Symbol.toStringTag;\nTimestamp_[_l] = (proto => {\n  proto.unit = null;\n  proto.timezone = null;\n  proto.ArrayType = Int32Array;\n  return proto[Symbol.toStringTag] = 'Timestamp';\n})(Timestamp_.prototype);\nexport { Timestamp_ as Timestamp };\n/** @ignore */\nexport class TimestampSecond extends Timestamp_ {\n  constructor(timezone) {\n    super(TimeUnit.SECOND, timezone);\n  }\n}\n/** @ignore */\nexport class TimestampMillisecond extends Timestamp_ {\n  constructor(timezone) {\n    super(TimeUnit.MILLISECOND, timezone);\n  }\n}\n/** @ignore */\nexport class TimestampMicrosecond extends Timestamp_ {\n  constructor(timezone) {\n    super(TimeUnit.MICROSECOND, timezone);\n  }\n}\n/** @ignore */\nexport class TimestampNanosecond extends Timestamp_ {\n  constructor(timezone) {\n    super(TimeUnit.NANOSECOND, timezone);\n  }\n}\n/** @ignore */\nclass Interval_ extends DataType {\n  constructor(unit) {\n    super();\n    this.unit = unit;\n  }\n  get typeId() {\n    return Type.Interval;\n  }\n  toString() {\n    return \"Interval<\".concat(IntervalUnit[this.unit], \">\");\n  }\n}\n_m = Symbol.toStringTag;\nInterval_[_m] = (proto => {\n  proto.unit = null;\n  proto.ArrayType = Int32Array;\n  return proto[Symbol.toStringTag] = 'Interval';\n})(Interval_.prototype);\nexport { Interval_ as Interval };\n/** @ignore */\nexport class IntervalDayTime extends Interval_ {\n  constructor() {\n    super(IntervalUnit.DAY_TIME);\n  }\n}\n/** @ignore */\nexport class IntervalYearMonth extends Interval_ {\n  constructor() {\n    super(IntervalUnit.YEAR_MONTH);\n  }\n}\n/** @ignore */\nexport class List extends DataType {\n  constructor(child) {\n    super();\n    this.children = [child];\n  }\n  get typeId() {\n    return Type.List;\n  }\n  toString() {\n    return \"List<\".concat(this.valueType, \">\");\n  }\n  get valueType() {\n    return this.children[0].type;\n  }\n  get valueField() {\n    return this.children[0];\n  }\n  get ArrayType() {\n    return this.valueType.ArrayType;\n  }\n}\n_o = Symbol.toStringTag;\nList[_o] = (proto => {\n  proto.children = null;\n  return proto[Symbol.toStringTag] = 'List';\n})(List.prototype);\n/** @ignore */\nexport class Struct extends DataType {\n  constructor(children) {\n    super();\n    this.children = children;\n  }\n  get typeId() {\n    return Type.Struct;\n  }\n  toString() {\n    return \"Struct<{\".concat(this.children.map(f => \"\".concat(f.name, \":\").concat(f.type)).join(\", \"), \"}>\");\n  }\n}\n_p = Symbol.toStringTag;\nStruct[_p] = (proto => {\n  proto.children = null;\n  return proto[Symbol.toStringTag] = 'Struct';\n})(Struct.prototype);\n/** @ignore */\nclass Union_ extends DataType {\n  constructor(mode, typeIds, children) {\n    super();\n    this.mode = mode;\n    this.children = children;\n    this.typeIds = typeIds = Int32Array.from(typeIds);\n    this.typeIdToChildIndex = typeIds.reduce((typeIdToChildIndex, typeId, idx) => (typeIdToChildIndex[typeId] = idx) && typeIdToChildIndex || typeIdToChildIndex, Object.create(null));\n  }\n  get typeId() {\n    return Type.Union;\n  }\n  toString() {\n    return \"\".concat(this[Symbol.toStringTag], \"<\").concat(this.children.map(x => \"\".concat(x.type)).join(\" | \"), \">\");\n  }\n}\n_q = Symbol.toStringTag;\nUnion_[_q] = (proto => {\n  proto.mode = null;\n  proto.typeIds = null;\n  proto.children = null;\n  proto.typeIdToChildIndex = null;\n  proto.ArrayType = Int8Array;\n  return proto[Symbol.toStringTag] = 'Union';\n})(Union_.prototype);\nexport { Union_ as Union };\n/** @ignore */\nexport class DenseUnion extends Union_ {\n  constructor(typeIds, children) {\n    super(UnionMode.Dense, typeIds, children);\n  }\n}\n/** @ignore */\nexport class SparseUnion extends Union_ {\n  constructor(typeIds, children) {\n    super(UnionMode.Sparse, typeIds, children);\n  }\n}\n/** @ignore */\nexport class FixedSizeBinary extends DataType {\n  constructor(byteWidth) {\n    super();\n    this.byteWidth = byteWidth;\n  }\n  get typeId() {\n    return Type.FixedSizeBinary;\n  }\n  toString() {\n    return \"FixedSizeBinary[\".concat(this.byteWidth, \"]\");\n  }\n}\n_r = Symbol.toStringTag;\nFixedSizeBinary[_r] = (proto => {\n  proto.byteWidth = null;\n  proto.ArrayType = Uint8Array;\n  return proto[Symbol.toStringTag] = 'FixedSizeBinary';\n})(FixedSizeBinary.prototype);\n/** @ignore */\nexport class FixedSizeList extends DataType {\n  constructor(listSize, child) {\n    super();\n    this.listSize = listSize;\n    this.children = [child];\n  }\n  get typeId() {\n    return Type.FixedSizeList;\n  }\n  get valueType() {\n    return this.children[0].type;\n  }\n  get valueField() {\n    return this.children[0];\n  }\n  get ArrayType() {\n    return this.valueType.ArrayType;\n  }\n  toString() {\n    return \"FixedSizeList[\".concat(this.listSize, \"]<\").concat(this.valueType, \">\");\n  }\n}\n_s = Symbol.toStringTag;\nFixedSizeList[_s] = (proto => {\n  proto.children = null;\n  proto.listSize = null;\n  return proto[Symbol.toStringTag] = 'FixedSizeList';\n})(FixedSizeList.prototype);\n/** @ignore */\nexport class Map_ extends DataType {\n  constructor(child) {\n    let keysSorted = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    super();\n    this.children = [child];\n    this.keysSorted = keysSorted;\n  }\n  get typeId() {\n    return Type.Map;\n  }\n  get keyType() {\n    return this.children[0].type.children[0].type;\n  }\n  get valueType() {\n    return this.children[0].type.children[1].type;\n  }\n  get childType() {\n    return this.children[0].type;\n  }\n  toString() {\n    return \"Map<{\".concat(this.children[0].type.children.map(f => \"\".concat(f.name, \":\").concat(f.type)).join(\", \"), \"}>\");\n  }\n}\n_t = Symbol.toStringTag;\nMap_[_t] = (proto => {\n  proto.children = null;\n  proto.keysSorted = null;\n  return proto[Symbol.toStringTag] = 'Map_';\n})(Map_.prototype);\n/** @ignore */\nconst getId = (atomicDictionaryId => () => ++atomicDictionaryId)(-1);\n/** @ignore */\nexport class Dictionary extends DataType {\n  constructor(dictionary, indices, id, isOrdered) {\n    super();\n    this.indices = indices;\n    this.dictionary = dictionary;\n    this.isOrdered = isOrdered || false;\n    this.id = id == null ? getId() : typeof id === 'number' ? id : id.low;\n  }\n  get typeId() {\n    return Type.Dictionary;\n  }\n  get children() {\n    return this.dictionary.children;\n  }\n  get valueType() {\n    return this.dictionary;\n  }\n  get ArrayType() {\n    return this.dictionary.ArrayType;\n  }\n  toString() {\n    return \"Dictionary<\".concat(this.indices, \", \").concat(this.dictionary, \">\");\n  }\n}\n_u = Symbol.toStringTag;\nDictionary[_u] = (proto => {\n  proto.id = null;\n  proto.indices = null;\n  proto.isOrdered = null;\n  proto.dictionary = null;\n  return proto[Symbol.toStringTag] = 'Dictionary';\n})(Dictionary.prototype);\n/** @ignore */\nexport function strideForType(type) {\n  const t = type;\n  switch (type.typeId) {\n    case Type.Decimal:\n      return type.bitWidth / 32;\n    case Type.Timestamp:\n      return 2;\n    case Type.Date:\n      return 1 + t.unit;\n    case Type.Interval:\n      return 1 + t.unit;\n    // case Type.Int: return 1 + +((t as Int_).bitWidth > 32);\n    // case Type.Time: return 1 + +((t as Time_).bitWidth > 32);\n    case Type.FixedSizeList:\n      return t.listSize;\n    case Type.FixedSizeBinary:\n      return t.byteWidth;\n    default:\n      return 1;\n  }\n}","map":{"version":3,"names":["BigInt64Array","BigUint64Array","Type","Precision","UnionMode","DateUnit","TimeUnit","IntervalUnit","DataType","isNull","x","typeId","Null","isInt","Int","isFloat","Float","isBinary","Binary","isUtf8","Utf8","isBool","Bool","isDecimal","Decimal","isDate","Date","isTime","Time","isTimestamp","Timestamp","isInterval","Interval","isList","List","isStruct","Struct","isUnion","Union","isFixedSizeBinary","FixedSizeBinary","isFixedSizeList","FixedSizeList","isMap","Map","isDictionary","Dictionary","isDenseUnion","mode","Dense","isSparseUnion","Sparse","NONE","Symbol","toStringTag","_a","proto","children","ArrayType","Array","prototype","toString","_b","Int_","constructor","isSigned","bitWidth","Int8Array","Uint8Array","Int16Array","Uint16Array","Int32Array","Uint32Array","Error","concat","_c","Int8","Int16","Int32","Int64","Uint8","Uint16","Uint32","Uint64","Object","defineProperty","value","precision","HALF","SINGLE","Float32Array","DOUBLE","Float64Array","_d","Float16","Float32","Float64","_e","_f","_g","scale","arguments","length","undefined","_h","Date_","unit","_j","DateDay","DAY","DateMillisecond","MILLISECOND","Time_","_k","TimeSecond","SECOND","TimeMillisecond","TimeMicrosecond","MICROSECOND","TimeNanosecond","NANOSECOND","Timestamp_","timezone","_l","TimestampSecond","TimestampMillisecond","TimestampMicrosecond","TimestampNanosecond","Interval_","_m","IntervalDayTime","DAY_TIME","IntervalYearMonth","YEAR_MONTH","child","valueType","type","valueField","_o","map","f","name","join","_p","Union_","typeIds","from","typeIdToChildIndex","reduce","idx","create","_q","DenseUnion","SparseUnion","byteWidth","_r","listSize","_s","Map_","keysSorted","keyType","childType","_t","getId","atomicDictionaryId","dictionary","indices","id","isOrdered","low","_u","strideForType","t"],"sources":["C:\\Users\\mvlor\\OneDrive\\Desktop\\custom_component\\multi_menu\\template\\my_component\\frontend\\node_modules\\apache-arrow\\src\\type.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from './schema.js';\nimport { Vector } from './vector.js';\nimport { MapRow } from './row/map.js';\nimport { StructRow, StructRowProxy } from './row/struct.js';\nimport { Long } from 'flatbuffers';\nimport { TypedArrayConstructor } from './interfaces.js';\nimport { BigInt64Array, BigUint64Array } from './util/compat.js';\n\nimport {\n    Type,\n    Precision, UnionMode,\n    DateUnit, TimeUnit, IntervalUnit\n} from './enum.js';\n\n/** @ignore */\nexport type TimeBitWidth = 32 | 64;\n/** @ignore */\nexport type IntBitWidth = 8 | 16 | 32 | 64;\n/** @ignore */\nexport type IsSigned = { 'true': true; 'false': false };\n\nexport interface DataType<TType extends Type = Type, TChildren extends TypeMap = any> {\n    readonly TType: TType;\n    readonly TArray: any;\n    readonly TValue: any;\n    readonly TChildren: TChildren;\n    readonly ArrayType: any;\n    readonly children: Field<TChildren[keyof TChildren]>[];\n}\n\n/**\n * An abstract base class for classes that encapsulate metadata about each of\n * the logical types that Arrow can represent.\n */\nexport abstract class DataType<TType extends Type = Type, TChildren extends TypeMap = any> {\n\n    declare public [Symbol.toStringTag]: string;\n\n    /** @nocollapse */ static isNull(x: any): x is Null { return x?.typeId === Type.Null; }\n    /** @nocollapse */ static isInt(x: any): x is Int_ { return x?.typeId === Type.Int; }\n    /** @nocollapse */ static isFloat(x: any): x is Float { return x?.typeId === Type.Float; }\n    /** @nocollapse */ static isBinary(x: any): x is Binary { return x?.typeId === Type.Binary; }\n    /** @nocollapse */ static isUtf8(x: any): x is Utf8 { return x?.typeId === Type.Utf8; }\n    /** @nocollapse */ static isBool(x: any): x is Bool { return x?.typeId === Type.Bool; }\n    /** @nocollapse */ static isDecimal(x: any): x is Decimal { return x?.typeId === Type.Decimal; }\n    /** @nocollapse */ static isDate(x: any): x is Date_ { return x?.typeId === Type.Date; }\n    /** @nocollapse */ static isTime(x: any): x is Time_ { return x?.typeId === Type.Time; }\n    /** @nocollapse */ static isTimestamp(x: any): x is Timestamp_ { return x?.typeId === Type.Timestamp; }\n    /** @nocollapse */ static isInterval(x: any): x is Interval_ { return x?.typeId === Type.Interval; }\n    /** @nocollapse */ static isList(x: any): x is List { return x?.typeId === Type.List; }\n    /** @nocollapse */ static isStruct(x: any): x is Struct { return x?.typeId === Type.Struct; }\n    /** @nocollapse */ static isUnion(x: any): x is Union_ { return x?.typeId === Type.Union; }\n    /** @nocollapse */ static isFixedSizeBinary(x: any): x is FixedSizeBinary { return x?.typeId === Type.FixedSizeBinary; }\n    /** @nocollapse */ static isFixedSizeList(x: any): x is FixedSizeList { return x?.typeId === Type.FixedSizeList; }\n    /** @nocollapse */ static isMap(x: any): x is Map_ { return x?.typeId === Type.Map; }\n    /** @nocollapse */ static isDictionary(x: any): x is Dictionary { return x?.typeId === Type.Dictionary; }\n\n    /** @nocollapse */ static isDenseUnion(x: any): x is DenseUnion { return DataType.isUnion(x) && x.mode === UnionMode.Dense; }\n    /** @nocollapse */ static isSparseUnion(x: any): x is SparseUnion { return DataType.isUnion(x) && x.mode === UnionMode.Sparse; }\n\n    public get typeId(): TType { return <any>Type.NONE; }\n\n    protected static [Symbol.toStringTag] = ((proto: DataType) => {\n        (<any>proto).children = null;\n        (<any>proto).ArrayType = Array;\n        return proto[Symbol.toStringTag] = 'DataType';\n    })(DataType.prototype);\n}\n\n/** @ignore */\nexport interface Null extends DataType<Type.Null> { TArray: void; TValue: null }\n/** @ignore */\nexport class Null extends DataType<Type.Null> {\n    public toString() { return `Null`; }\n    public get typeId() { return Type.Null as Type.Null; }\n    protected static [Symbol.toStringTag] = ((proto: Null) => proto[Symbol.toStringTag] = 'Null')(Null.prototype);\n}\n\n/** @ignore */\ntype Ints = Type.Int | Type.Int8 | Type.Int16 | Type.Int32 | Type.Int64 | Type.Uint8 | Type.Uint16 | Type.Uint32 | Type.Uint64;\n/** @ignore */\ntype IType = {\n    [Type.Int]: { bitWidth: IntBitWidth; isSigned: true | false; TArray: IntArray; TValue: number | bigint };\n    [Type.Int8]: { bitWidth: 8; isSigned: true; TArray: Int8Array; TValue: number };\n    [Type.Int16]: { bitWidth: 16; isSigned: true; TArray: Int16Array; TValue: number };\n    [Type.Int32]: { bitWidth: 32; isSigned: true; TArray: Int32Array; TValue: number };\n    [Type.Int64]: { bitWidth: 64; isSigned: true; TArray: BigInt64Array; TValue: bigint };\n    [Type.Uint8]: { bitWidth: 8; isSigned: false; TArray: Uint8Array; TValue: number };\n    [Type.Uint16]: { bitWidth: 16; isSigned: false; TArray: Uint16Array; TValue: number };\n    [Type.Uint32]: { bitWidth: 32; isSigned: false; TArray: Uint32Array; TValue: number };\n    [Type.Uint64]: { bitWidth: 64; isSigned: false; TArray: BigUint64Array; TValue: bigint };\n};\n\n/** @ignore */\ninterface Int_<T extends Ints = Ints> extends DataType<T> { TArray: IType[T]['TArray']; TValue: IType[T]['TValue'] }\n/** @ignore */\nclass Int_<T extends Ints = Ints> extends DataType<T> {\n    constructor(public readonly isSigned: IType[T]['isSigned'],\n        public readonly bitWidth: IType[T]['bitWidth']) {\n        super();\n    }\n    public get typeId() { return Type.Int as T; }\n    public get ArrayType() {\n        switch (this.bitWidth) {\n            case 8: return this.isSigned ? Int8Array : Uint8Array;\n            case 16: return this.isSigned ? Int16Array : Uint16Array;\n            case 32: return this.isSigned ? Int32Array : Uint32Array;\n            case 64: return this.isSigned ? BigInt64Array : BigUint64Array;\n        }\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    public toString() { return `${this.isSigned ? `I` : `Ui`}nt${this.bitWidth}`; }\n    protected static [Symbol.toStringTag] = ((proto: Int_) => {\n        (<any>proto).isSigned = null;\n        (<any>proto).bitWidth = null;\n        return proto[Symbol.toStringTag] = 'Int';\n    })(Int_.prototype);\n}\n\nexport { Int_ as Int };\n\n/** @ignore */\nexport class Int8 extends Int_<Type.Int8> {\n    constructor() { super(true, 8); }\n    public get ArrayType() { return Int8Array; }\n}\n/** @ignore */\nexport class Int16 extends Int_<Type.Int16> {\n    constructor() { super(true, 16); }\n    public get ArrayType() { return Int16Array; }\n}\n/** @ignore */\nexport class Int32 extends Int_<Type.Int32> {\n    constructor() { super(true, 32); }\n    public get ArrayType() { return Int32Array; }\n}\n/** @ignore */\nexport class Int64 extends Int_<Type.Int64> {\n    constructor() { super(true, 64); }\n    public get ArrayType() { return BigInt64Array; }\n}\n/** @ignore */\nexport class Uint8 extends Int_<Type.Uint8> {\n    constructor() { super(false, 8); }\n    public get ArrayType() { return Uint8Array; }\n}\n/** @ignore */\nexport class Uint16 extends Int_<Type.Uint16> {\n    constructor() { super(false, 16); }\n    public get ArrayType() { return Uint16Array; }\n}\n/** @ignore */\nexport class Uint32 extends Int_<Type.Uint32> {\n    constructor() { super(false, 32); }\n    public get ArrayType() { return Uint32Array; }\n}\n/** @ignore */\nexport class Uint64 extends Int_<Type.Uint64> {\n    constructor() { super(false, 64); }\n    public get ArrayType() { return BigUint64Array; }\n}\n\nObject.defineProperty(Int8.prototype, 'ArrayType', { value: Int8Array });\nObject.defineProperty(Int16.prototype, 'ArrayType', { value: Int16Array });\nObject.defineProperty(Int32.prototype, 'ArrayType', { value: Int32Array });\nObject.defineProperty(Int64.prototype, 'ArrayType', { value: BigInt64Array });\nObject.defineProperty(Uint8.prototype, 'ArrayType', { value: Uint8Array });\nObject.defineProperty(Uint16.prototype, 'ArrayType', { value: Uint16Array });\nObject.defineProperty(Uint32.prototype, 'ArrayType', { value: Uint32Array });\nObject.defineProperty(Uint64.prototype, 'ArrayType', { value: BigUint64Array });\n\n/** @ignore */\ntype Floats = Type.Float | Type.Float16 | Type.Float32 | Type.Float64;\n/** @ignore */\ntype FType = {\n    [Type.Float]: { precision: Precision; TArray: FloatArray; TValue: number };\n    [Type.Float16]: { precision: Precision.HALF; TArray: Uint16Array; TValue: number };\n    [Type.Float32]: { precision: Precision.SINGLE; TArray: Float32Array; TValue: number };\n    [Type.Float64]: { precision: Precision.DOUBLE; TArray: Float64Array; TValue: number };\n};\n\n/** @ignore */\nexport interface Float<T extends Floats = Floats> extends DataType<T> { TArray: FType[T]['TArray']; TValue: number }\n/** @ignore */\nexport class Float<T extends Floats = Floats> extends DataType<T> {\n    constructor(public readonly precision: Precision) {\n        super();\n    }\n    public get typeId() { return Type.Float as T; }\n    public get ArrayType(): TypedArrayConstructor<FType[T]['TArray']> {\n        switch (this.precision) {\n            case Precision.HALF: return Uint16Array;\n            case Precision.SINGLE: return Float32Array;\n            case Precision.DOUBLE: return Float64Array;\n        }\n        // @ts-ignore\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    public toString() { return `Float${(this.precision << 5) || 16}`; }\n    protected static [Symbol.toStringTag] = ((proto: Float) => {\n        (<any>proto).precision = null;\n        return proto[Symbol.toStringTag] = 'Float';\n    })(Float.prototype);\n}\n\n/** @ignore */\nexport class Float16 extends Float<Type.Float16> { constructor() { super(Precision.HALF); } }\n/** @ignore */\nexport class Float32 extends Float<Type.Float32> { constructor() { super(Precision.SINGLE); } }\n/** @ignore */\nexport class Float64 extends Float<Type.Float64> { constructor() { super(Precision.DOUBLE); } }\n\nObject.defineProperty(Float16.prototype, 'ArrayType', { value: Uint16Array });\nObject.defineProperty(Float32.prototype, 'ArrayType', { value: Float32Array });\nObject.defineProperty(Float64.prototype, 'ArrayType', { value: Float64Array });\n\n/** @ignore */\nexport interface Binary extends DataType<Type.Binary> { TArray: Uint8Array; TValue: Uint8Array; ArrayType: TypedArrayConstructor<Uint8Array> }\n/** @ignore */\nexport class Binary extends DataType<Type.Binary> {\n    constructor() {\n        super();\n    }\n    public get typeId() { return Type.Binary as Type.Binary; }\n    public toString() { return `Binary`; }\n    protected static [Symbol.toStringTag] = ((proto: Binary) => {\n        (<any>proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Binary';\n    })(Binary.prototype);\n}\n\n/** @ignore */\nexport interface Utf8 extends DataType<Type.Utf8> { TArray: Uint8Array; TValue: string; ArrayType: TypedArrayConstructor<Uint8Array> }\n/** @ignore */\nexport class Utf8 extends DataType<Type.Utf8> {\n    constructor() {\n        super();\n    }\n    public get typeId() { return Type.Utf8 as Type.Utf8; }\n    public toString() { return `Utf8`; }\n    protected static [Symbol.toStringTag] = ((proto: Utf8) => {\n        (<any>proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Utf8';\n    })(Utf8.prototype);\n}\n\n/** @ignore */\nexport interface Bool extends DataType<Type.Bool> { TArray: Uint8Array; TValue: boolean; ArrayType: TypedArrayConstructor<Uint8Array> }\n/** @ignore */\nexport class Bool extends DataType<Type.Bool> {\n    constructor() {\n        super();\n    }\n    public get typeId() { return Type.Bool as Type.Bool; }\n    public toString() { return `Bool`; }\n    protected static [Symbol.toStringTag] = ((proto: Bool) => {\n        (<any>proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Bool';\n    })(Bool.prototype);\n}\n\n/** @ignore */\nexport interface Decimal extends DataType<Type.Decimal> { TArray: Uint32Array; TValue: Uint32Array; ArrayType: TypedArrayConstructor<Uint32Array> }\n/** @ignore */\nexport class Decimal extends DataType<Type.Decimal> {\n    constructor(public readonly scale: number,\n        public readonly precision: number,\n        public readonly bitWidth: number = 128) {\n        super();\n    }\n    public get typeId() { return Type.Decimal as Type.Decimal; }\n    public toString() { return `Decimal[${this.precision}e${this.scale > 0 ? `+` : ``}${this.scale}]`; }\n    protected static [Symbol.toStringTag] = ((proto: Decimal) => {\n        (<any>proto).scale = null;\n        (<any>proto).precision = null;\n        (<any>proto).ArrayType = Uint32Array;\n        return proto[Symbol.toStringTag] = 'Decimal';\n    })(Decimal.prototype);\n}\n\n/** @ignore */\nexport type Dates = Type.Date | Type.DateDay | Type.DateMillisecond;\n/** @ignore */\nexport interface Date_<T extends Dates = Dates> extends DataType<T> { TArray: Int32Array; TValue: Date; ArrayType: TypedArrayConstructor<Int32Array> }\n/** @ignore */\nexport class Date_<T extends Dates = Dates> extends DataType<T> {\n    constructor(public readonly unit: DateUnit) {\n        super();\n    }\n    public get typeId() { return Type.Date as T; }\n    public toString() { return `Date${(this.unit + 1) * 32}<${DateUnit[this.unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Date_) => {\n        (<any>proto).unit = null;\n        (<any>proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Date';\n    })(Date_.prototype);\n}\n\n/** @ignore */\nexport class DateDay extends Date_<Type.DateDay> { constructor() { super(DateUnit.DAY); } }\n/** @ignore */\nexport class DateMillisecond extends Date_<Type.DateMillisecond> { constructor() { super(DateUnit.MILLISECOND); } }\n\n/** @ignore */\ntype Times = Type.Time | Type.TimeSecond | Type.TimeMillisecond | Type.TimeMicrosecond | Type.TimeNanosecond;\n/** @ignore */\ntype TimesType = {\n    [Type.Time]: { unit: TimeUnit; TValue: number | bigint; TArray: Int32Array | BigInt64Array };\n    [Type.TimeSecond]: { unit: TimeUnit.SECOND; TValue: number; TArray: Int32Array };\n    [Type.TimeMillisecond]: { unit: TimeUnit.MILLISECOND; TValue: number; TArray: Int32Array };\n    [Type.TimeMicrosecond]: { unit: TimeUnit.MICROSECOND; TValue: bigint; TArray: BigInt64Array };\n    [Type.TimeNanosecond]: { unit: TimeUnit.NANOSECOND; TValue: bigint; TArray: BigInt64Array };\n};\n\n/** @ignore */\ninterface Time_<T extends Times = Times> extends DataType<T> {\n    TArray: TimesType[T]['TArray'];\n    TValue: TimesType[T]['TValue'];\n}\n/** @ignore */\nclass Time_<T extends Times = Times> extends DataType<T> {\n    constructor(public readonly unit: TimesType[T]['unit'],\n        public readonly bitWidth: TimeBitWidth) {\n        super();\n    }\n    public get typeId() { return Type.Time as T; }\n    public toString() { return `Time${this.bitWidth}<${TimeUnit[this.unit]}>`; }\n    public get ArrayType() {\n        switch (this.bitWidth) {\n            case 32: return Int32Array;\n            case 64: return BigInt64Array;\n        }\n        // @ts-ignore\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    protected static [Symbol.toStringTag] = ((proto: Time_) => {\n        (<any>proto).unit = null;\n        (<any>proto).bitWidth = null;\n        return proto[Symbol.toStringTag] = 'Time';\n    })(Time_.prototype);\n}\n\nexport { Time_ as Time };\n\n/** @ignore */\nexport class TimeSecond extends Time_<Type.TimeSecond> { constructor() { super(TimeUnit.SECOND, 32); } }\n/** @ignore */\nexport class TimeMillisecond extends Time_<Type.TimeMillisecond> { constructor() { super(TimeUnit.MILLISECOND, 32); } }\n/** @ignore */\nexport class TimeMicrosecond extends Time_<Type.TimeMicrosecond> { constructor() { super(TimeUnit.MICROSECOND, 64); } }\n/** @ignore */\nexport class TimeNanosecond extends Time_<Type.TimeNanosecond> { constructor() { super(TimeUnit.NANOSECOND, 64); } }\n\n/** @ignore */\ntype Timestamps = Type.Timestamp | Type.TimestampSecond | Type.TimestampMillisecond | Type.TimestampMicrosecond | Type.TimestampNanosecond;\n/** @ignore */\ninterface Timestamp_<T extends Timestamps = Timestamps> extends DataType<T> {\n    TArray: Int32Array;\n    TValue: number;\n    ArrayType: TypedArrayConstructor<Int32Array>;\n}\n\n/** @ignore */\nclass Timestamp_<T extends Timestamps = Timestamps> extends DataType<T> {\n    constructor(public readonly unit: TimeUnit,\n        public readonly timezone?: string | null) {\n        super();\n    }\n    public get typeId() { return Type.Timestamp as T; }\n    public toString() { return `Timestamp<${TimeUnit[this.unit]}${this.timezone ? `, ${this.timezone}` : ``}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Timestamp_) => {\n        (<any>proto).unit = null;\n        (<any>proto).timezone = null;\n        (<any>proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Timestamp';\n    })(Timestamp_.prototype);\n}\n\nexport { Timestamp_ as Timestamp };\n\n/** @ignore */\nexport class TimestampSecond extends Timestamp_<Type.TimestampSecond> { constructor(timezone?: string | null) { super(TimeUnit.SECOND, timezone); } }\n/** @ignore */\nexport class TimestampMillisecond extends Timestamp_<Type.TimestampMillisecond> { constructor(timezone?: string | null) { super(TimeUnit.MILLISECOND, timezone); } }\n/** @ignore */\nexport class TimestampMicrosecond extends Timestamp_<Type.TimestampMicrosecond> { constructor(timezone?: string | null) { super(TimeUnit.MICROSECOND, timezone); } }\n/** @ignore */\nexport class TimestampNanosecond extends Timestamp_<Type.TimestampNanosecond> { constructor(timezone?: string | null) { super(TimeUnit.NANOSECOND, timezone); } }\n\n/** @ignore */\ntype Intervals = Type.Interval | Type.IntervalDayTime | Type.IntervalYearMonth;\n/** @ignore */\ninterface Interval_<T extends Intervals = Intervals> extends DataType<T> {\n    TArray: Int32Array;\n    TValue: Int32Array;\n    ArrayType: TypedArrayConstructor<Int32Array>;\n}\n\n/** @ignore */\nclass Interval_<T extends Intervals = Intervals> extends DataType<T> {\n    constructor(public readonly unit: IntervalUnit) {\n        super();\n    }\n    public get typeId() { return Type.Interval as T; }\n    public toString() { return `Interval<${IntervalUnit[this.unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Interval_) => {\n        (<any>proto).unit = null;\n        (<any>proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Interval';\n    })(Interval_.prototype);\n}\n\nexport { Interval_ as Interval };\n\n/** @ignore */\nexport class IntervalDayTime extends Interval_<Type.IntervalDayTime> { constructor() { super(IntervalUnit.DAY_TIME); } }\n/** @ignore */\nexport class IntervalYearMonth extends Interval_<Type.IntervalYearMonth> { constructor() { super(IntervalUnit.YEAR_MONTH); } }\n\n/** @ignore */\nexport interface List<T extends DataType = any> extends DataType<Type.List, { [0]: T }> {\n    TArray: Array<T>;\n    TValue: Vector<T>;\n}\n\n/** @ignore */\nexport class List<T extends DataType = any> extends DataType<Type.List, { [0]: T }> {\n    constructor(child: Field<T>) {\n        super();\n        this.children = [child];\n    }\n    public declare readonly children: Field<T>[];\n    public get typeId() { return Type.List as Type.List; }\n    public toString() { return `List<${this.valueType}>`; }\n    public get valueType(): T { return this.children[0].type as T; }\n    public get valueField(): Field<T> { return this.children[0] as Field<T>; }\n    public get ArrayType(): T['ArrayType'] { return this.valueType.ArrayType; }\n    protected static [Symbol.toStringTag] = ((proto: List) => {\n        (<any>proto).children = null;\n        return proto[Symbol.toStringTag] = 'List';\n    })(List.prototype);\n}\n\n/** @ignore */\nexport interface Struct<T extends TypeMap = any> extends DataType<Type.Struct, T> {\n    TArray: Array<StructRowProxy<T>>;\n    TValue: StructRowProxy<T>;\n    dataTypes: T;\n}\n\n/** @ignore */\nexport class Struct<T extends TypeMap = any> extends DataType<Type.Struct, T> {\n    public declare _row: StructRow<T>;\n    public declare readonly children: Field<T[keyof T]>[];\n    constructor(children: Field<T[keyof T]>[]) {\n        super();\n        this.children = children;\n    }\n    public get typeId() { return Type.Struct as Type.Struct; }\n    public toString() { return `Struct<{${this.children.map((f) => `${f.name}:${f.type}`).join(`, `)}}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Struct) => {\n        (<any>proto).children = null;\n        return proto[Symbol.toStringTag] = 'Struct';\n    })(Struct.prototype);\n}\n\n/** @ignore */\ntype Unions = Type.Union | Type.DenseUnion | Type.SparseUnion;\n/** @ignore */\ninterface Union_<T extends Unions = Unions> extends DataType<T> { TArray: Int8Array; TValue: any; ArrayType: TypedArrayConstructor<Int8Array> }\n/** @ignore */\nclass Union_<T extends Unions = Unions> extends DataType<T> {\n    public declare readonly mode: UnionMode;\n    public declare readonly typeIds: Int32Array;\n    public declare readonly children: Field<any>[];\n    public declare readonly typeIdToChildIndex: { [key: number]: number };\n    constructor(mode: UnionMode,\n        typeIds: number[] | Int32Array,\n        children: Field<any>[]) {\n        super();\n        this.mode = mode;\n        this.children = children;\n        this.typeIds = typeIds = Int32Array.from(typeIds);\n        this.typeIdToChildIndex = typeIds.reduce((typeIdToChildIndex, typeId, idx) => (typeIdToChildIndex[typeId] = idx) && typeIdToChildIndex || typeIdToChildIndex, Object.create(null) as { [key: number]: number });\n    }\n    public get typeId() { return Type.Union as T; }\n    public toString() {\n        return `${this[Symbol.toStringTag]}<${this.children.map((x) => `${x.type}`).join(` | `)\n            }>`;\n    }\n    protected static [Symbol.toStringTag] = ((proto: Union_) => {\n        (<any>proto).mode = null;\n        (<any>proto).typeIds = null;\n        (<any>proto).children = null;\n        (<any>proto).typeIdToChildIndex = null;\n        (<any>proto).ArrayType = Int8Array;\n        return proto[Symbol.toStringTag] = 'Union';\n    })(Union_.prototype);\n}\n\nexport { Union_ as Union };\n\n/** @ignore */\nexport class DenseUnion extends Union_<Type.DenseUnion> {\n    constructor(typeIds: number[] | Int32Array, children: Field[]) {\n        super(UnionMode.Dense, typeIds, children);\n    }\n}\n\n/** @ignore */\nexport class SparseUnion extends Union_<Type.SparseUnion> {\n    constructor(typeIds: number[] | Int32Array, children: Field[]) {\n        super(UnionMode.Sparse, typeIds, children);\n    }\n}\n\n/** @ignore */\nexport interface FixedSizeBinary extends DataType<Type.FixedSizeBinary> {\n    TArray: Uint8Array;\n    TValue: Uint8Array;\n    ArrayType: TypedArrayConstructor<Uint8Array>;\n}\n\n/** @ignore */\nexport class FixedSizeBinary extends DataType<Type.FixedSizeBinary> {\n    constructor(public readonly byteWidth: number) {\n        super();\n    }\n    public get typeId() { return Type.FixedSizeBinary as Type.FixedSizeBinary; }\n    public toString() { return `FixedSizeBinary[${this.byteWidth}]`; }\n    protected static [Symbol.toStringTag] = ((proto: FixedSizeBinary) => {\n        (<any>proto).byteWidth = null;\n        (<any>proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'FixedSizeBinary';\n    })(FixedSizeBinary.prototype);\n}\n\n/** @ignore */\nexport interface FixedSizeList<T extends DataType = any> extends DataType<Type.FixedSizeList, { [0]: T }> {\n    TArray: Array<T['TArray']>;\n    TValue: Vector<T>;\n}\n\n/** @ignore */\nexport class FixedSizeList<T extends DataType = any> extends DataType<Type.FixedSizeList, { [0]: T }> {\n    public declare readonly children: Field<T>[];\n    constructor(public readonly listSize: number, child: Field<T>) {\n        super();\n        this.children = [child];\n    }\n    public get typeId() { return Type.FixedSizeList as Type.FixedSizeList; }\n    public get valueType(): T { return this.children[0].type as T; }\n    public get valueField(): Field<T> { return this.children[0] as Field<T>; }\n    public get ArrayType(): T['ArrayType'] { return this.valueType.ArrayType; }\n    public toString() { return `FixedSizeList[${this.listSize}]<${this.valueType}>`; }\n    protected static [Symbol.toStringTag] = ((proto: FixedSizeList) => {\n        (<any>proto).children = null;\n        (<any>proto).listSize = null;\n        return proto[Symbol.toStringTag] = 'FixedSizeList';\n    })(FixedSizeList.prototype);\n}\n\n/** @ignore */\nexport interface Map_<TKey extends DataType = any, TValue extends DataType = any> extends DataType<Type.Map, { [0]: Struct<{ key: TKey; value: TValue }> }> {\n    TArray: Array<Map<TKey['TValue'], TValue['TValue'] | null>>;\n    TChild: Struct<{ key: TKey; value: TValue }>;\n    TValue: MapRow<TKey, TValue>;\n}\n\n/** @ignore */\nexport class Map_<TKey extends DataType = any, TValue extends DataType = any> extends DataType<Type.Map, { [0]: Struct<{ key: TKey; value: TValue }> }> {\n    constructor(child: Field<Struct<{ key: TKey; value: TValue }>>, keysSorted = false) {\n        super();\n        this.children = [child];\n        this.keysSorted = keysSorted;\n    }\n    public declare readonly keysSorted: boolean;\n    public declare readonly children: Field<Struct<{ key: TKey; value: TValue }>>[];\n    public get typeId() { return Type.Map as Type.Map; }\n    public get keyType(): TKey { return this.children[0].type.children[0].type as TKey; }\n    public get valueType(): TValue { return this.children[0].type.children[1].type as TValue; }\n    public get childType() { return this.children[0].type as Struct<{ key: TKey; value: TValue }>; }\n    public toString() { return `Map<{${this.children[0].type.children.map((f) => `${f.name}:${f.type}`).join(`, `)}}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Map_) => {\n        (<any>proto).children = null;\n        (<any>proto).keysSorted = null;\n        return proto[Symbol.toStringTag] = 'Map_';\n    })(Map_.prototype);\n}\n\n/** @ignore */\nconst getId = ((atomicDictionaryId) => () => ++atomicDictionaryId)(-1);\n\n/** @ignore */\nexport type TKeys = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32;\n\n/** @ignore */\nexport interface Dictionary<T extends DataType = any, TKey extends TKeys = TKeys> extends DataType<Type.Dictionary> {\n    TArray: TKey['TArray'];\n    TValue: T['TValue'];\n}\n\n/** @ignore */\nexport class Dictionary<T extends DataType = any, TKey extends TKeys = TKeys> extends DataType<Type.Dictionary> {\n    public declare readonly id: number;\n    public declare readonly indices: TKey;\n    public declare readonly dictionary: T;\n    public declare readonly isOrdered: boolean;\n    constructor(dictionary: T, indices: TKey, id?: Long | number | null, isOrdered?: boolean | null) {\n        super();\n        this.indices = indices;\n        this.dictionary = dictionary;\n        this.isOrdered = isOrdered || false;\n        this.id = id == null ? getId() : (typeof id === 'number' ? id : id.low);\n    }\n    public get typeId() { return Type.Dictionary as Type.Dictionary; }\n    public get children() { return this.dictionary.children; }\n    public get valueType(): T { return this.dictionary as T; }\n    public get ArrayType(): T['ArrayType'] { return this.dictionary.ArrayType; }\n    public toString() { return `Dictionary<${this.indices}, ${this.dictionary}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Dictionary) => {\n        (<any>proto).id = null;\n        (<any>proto).indices = null;\n        (<any>proto).isOrdered = null;\n        (<any>proto).dictionary = null;\n        return proto[Symbol.toStringTag] = 'Dictionary';\n    })(Dictionary.prototype);\n}\n\n/** @ignore */\nexport type FloatArray = Uint16Array | Float32Array | Float64Array;\n/** @ignore */\nexport type IntArray = Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array;\n\n/** @ignore */\nexport function strideForType(type: DataType) {\n    const t: any = type;\n    switch (type.typeId) {\n        case Type.Decimal: return (type as Decimal).bitWidth / 32;\n        case Type.Timestamp: return 2;\n        case Type.Date: return 1 + (t as Date_).unit;\n        case Type.Interval: return 1 + (t as Interval_).unit;\n        // case Type.Int: return 1 + +((t as Int_).bitWidth > 32);\n        // case Type.Time: return 1 + +((t as Time_).bitWidth > 32);\n        case Type.FixedSizeList: return (t as FixedSizeList).listSize;\n        case Type.FixedSizeBinary: return (t as FixedSizeBinary).byteWidth;\n        default: return 1;\n    }\n}\n\n/** @ignore */\nexport type TypeMap = Record<string | number | symbol, DataType>;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}