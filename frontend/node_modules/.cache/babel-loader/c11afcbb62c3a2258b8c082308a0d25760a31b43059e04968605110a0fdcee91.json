{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n/** @ignore */\nexport function getBool(_data, _index, byte, bit) {\n  return (byte & 1 << bit) !== 0;\n}\n/** @ignore */\nexport function getBit(_data, _index, byte, bit) {\n  return (byte & 1 << bit) >> bit;\n}\n/** @ignore */\nexport function setBool(bytes, index, value) {\n  return value ? !!(bytes[index >> 3] |= 1 << index % 8) || true : !(bytes[index >> 3] &= ~(1 << index % 8)) && false;\n}\n/** @ignore */\nexport function truncateBitmap(offset, length, bitmap) {\n  const alignedSize = bitmap.byteLength + 7 & ~7;\n  if (offset > 0 || bitmap.byteLength < alignedSize) {\n    const bytes = new Uint8Array(alignedSize);\n    // If the offset is a multiple of 8 bits, it's safe to slice the bitmap\n    bytes.set(offset % 8 === 0 ? bitmap.subarray(offset >> 3) :\n    // Otherwise iterate each bit from the offset and return a new one\n    packBools(new BitIterator(bitmap, offset, length, null, getBool)).subarray(0, alignedSize));\n    return bytes;\n  }\n  return bitmap;\n}\n/** @ignore */\nexport function packBools(values) {\n  const xs = [];\n  let i = 0,\n    bit = 0,\n    byte = 0;\n  for (const value of values) {\n    value && (byte |= 1 << bit);\n    if (++bit === 8) {\n      xs[i++] = byte;\n      byte = bit = 0;\n    }\n  }\n  if (i === 0 || bit > 0) {\n    xs[i++] = byte;\n  }\n  const b = new Uint8Array(xs.length + 7 & ~7);\n  b.set(xs);\n  return b;\n}\n/** @ignore */\nexport class BitIterator {\n  constructor(bytes, begin, length, context, get) {\n    this.bytes = bytes;\n    this.length = length;\n    this.context = context;\n    this.get = get;\n    this.bit = begin % 8;\n    this.byteIndex = begin >> 3;\n    this.byte = bytes[this.byteIndex++];\n    this.index = 0;\n  }\n  next() {\n    if (this.index < this.length) {\n      if (this.bit === 8) {\n        this.bit = 0;\n        this.byte = this.bytes[this.byteIndex++];\n      }\n      return {\n        value: this.get(this.context, this.index++, this.byte, this.bit++)\n      };\n    }\n    return {\n      done: true,\n      value: null\n    };\n  }\n  [Symbol.iterator]() {\n    return this;\n  }\n}\n/**\n * Compute the population count (the number of bits set to 1) for a range of bits in a Uint8Array.\n * @param vector The Uint8Array of bits for which to compute the population count.\n * @param lhs The range's left-hand side (or start) bit\n * @param rhs The range's right-hand side (or end) bit\n */\n/** @ignore */\nexport function popcnt_bit_range(data, lhs, rhs) {\n  if (rhs - lhs <= 0) {\n    return 0;\n  }\n  // If the bit range is less than one byte, sum the 1 bits in the bit range\n  if (rhs - lhs < 8) {\n    let sum = 0;\n    for (const bit of new BitIterator(data, lhs, rhs - lhs, data, getBit)) {\n      sum += bit;\n    }\n    return sum;\n  }\n  // Get the next lowest multiple of 8 from the right hand side\n  const rhsInside = rhs >> 3 << 3;\n  // Get the next highest multiple of 8 from the left hand side\n  const lhsInside = lhs + (lhs % 8 === 0 ? 0 : 8 - lhs % 8);\n  return (\n    // Get the popcnt of bits between the left hand side, and the next highest multiple of 8\n    popcnt_bit_range(data, lhs, lhsInside) +\n    // Get the popcnt of bits between the right hand side, and the next lowest multiple of 8\n    popcnt_bit_range(data, rhsInside, rhs) +\n    // Get the popcnt of all bits between the left and right hand sides' multiples of 8\n    popcnt_array(data, lhsInside >> 3, rhsInside - lhsInside >> 3)\n  );\n}\n/** @ignore */\nexport function popcnt_array(arr, byteOffset, byteLength) {\n  let cnt = 0,\n    pos = Math.trunc(byteOffset);\n  const view = new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n  const len = byteLength === void 0 ? arr.byteLength : pos + byteLength;\n  while (len - pos >= 4) {\n    cnt += popcnt_uint32(view.getUint32(pos));\n    pos += 4;\n  }\n  while (len - pos >= 2) {\n    cnt += popcnt_uint32(view.getUint16(pos));\n    pos += 2;\n  }\n  while (len - pos >= 1) {\n    cnt += popcnt_uint32(view.getUint8(pos));\n    pos += 1;\n  }\n  return cnt;\n}\n/** @ignore */\nexport function popcnt_uint32(uint32) {\n  let i = Math.trunc(uint32);\n  i = i - (i >>> 1 & 0x55555555);\n  i = (i & 0x33333333) + (i >>> 2 & 0x33333333);\n  return (i + (i >>> 4) & 0x0F0F0F0F) * 0x01010101 >>> 24;\n}","map":{"version":3,"names":["getBool","_data","_index","byte","bit","getBit","setBool","bytes","index","value","truncateBitmap","offset","length","bitmap","alignedSize","byteLength","Uint8Array","set","subarray","packBools","BitIterator","values","xs","i","b","constructor","begin","context","get","byteIndex","next","done","Symbol","iterator","popcnt_bit_range","data","lhs","rhs","sum","rhsInside","lhsInside","popcnt_array","arr","byteOffset","cnt","pos","Math","trunc","view","DataView","buffer","len","popcnt_uint32","getUint32","getUint16","getUint8","uint32"],"sources":["C:\\Users\\mvlor\\OneDrive\\Desktop\\custom_component\\multi_menu\\template\\multi_menu\\frontend\\node_modules\\apache-arrow\\src\\util\\bit.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nexport function getBool(_data: any, _index: number, byte: number, bit: number) {\n    return (byte & 1 << bit) !== 0;\n}\n\n/** @ignore */\nexport function getBit(_data: any, _index: number, byte: number, bit: number): 0 | 1 {\n    return (byte & 1 << bit) >> bit as (0 | 1);\n}\n\n/** @ignore */\nexport function setBool(bytes: Uint8Array, index: number, value: any) {\n    return value ?\n        !!(bytes[index >> 3] |= (1 << (index % 8))) || true :\n        !(bytes[index >> 3] &= ~(1 << (index % 8))) && false;\n}\n\n/** @ignore */\nexport function truncateBitmap(offset: number, length: number, bitmap: Uint8Array) {\n    const alignedSize = (bitmap.byteLength + 7) & ~7;\n    if (offset > 0 || bitmap.byteLength < alignedSize) {\n        const bytes = new Uint8Array(alignedSize);\n        // If the offset is a multiple of 8 bits, it's safe to slice the bitmap\n        bytes.set(offset % 8 === 0 ? bitmap.subarray(offset >> 3) :\n            // Otherwise iterate each bit from the offset and return a new one\n            packBools(new BitIterator(bitmap, offset, length, null, getBool)).subarray(0, alignedSize));\n        return bytes;\n    }\n    return bitmap;\n}\n\n/** @ignore */\nexport function packBools(values: Iterable<any>) {\n    const xs: number[] = [];\n    let i = 0, bit = 0, byte = 0;\n    for (const value of values) {\n        value && (byte |= 1 << bit);\n        if (++bit === 8) {\n            xs[i++] = byte;\n            byte = bit = 0;\n        }\n    }\n    if (i === 0 || bit > 0) { xs[i++] = byte; }\n    const b = new Uint8Array((xs.length + 7) & ~7);\n    b.set(xs);\n    return b;\n}\n\n/** @ignore */\nexport class BitIterator<T> implements IterableIterator<T> {\n    bit: number;\n    byte: number;\n    byteIndex: number;\n    index: number;\n\n    constructor(\n        private bytes: Uint8Array,\n        begin: number,\n        private length: number,\n        private context: any,\n        private get: (context: any, index: number, byte: number, bit: number) => T\n    ) {\n        this.bit = begin % 8;\n        this.byteIndex = begin >> 3;\n        this.byte = bytes[this.byteIndex++];\n        this.index = 0;\n    }\n\n    next(): IteratorResult<T> {\n        if (this.index < this.length) {\n            if (this.bit === 8) {\n                this.bit = 0;\n                this.byte = this.bytes[this.byteIndex++];\n            }\n            return {\n                value: this.get(this.context, this.index++, this.byte, this.bit++)\n            };\n        }\n        return { done: true, value: null };\n    }\n\n    [Symbol.iterator]() {\n        return this;\n    }\n}\n\n/**\n * Compute the population count (the number of bits set to 1) for a range of bits in a Uint8Array.\n * @param vector The Uint8Array of bits for which to compute the population count.\n * @param lhs The range's left-hand side (or start) bit\n * @param rhs The range's right-hand side (or end) bit\n */\n/** @ignore */\nexport function popcnt_bit_range(data: Uint8Array, lhs: number, rhs: number): number {\n    if (rhs - lhs <= 0) { return 0; }\n    // If the bit range is less than one byte, sum the 1 bits in the bit range\n    if (rhs - lhs < 8) {\n        let sum = 0;\n        for (const bit of new BitIterator(data, lhs, rhs - lhs, data, getBit)) {\n            sum += bit;\n        }\n        return sum;\n    }\n    // Get the next lowest multiple of 8 from the right hand side\n    const rhsInside = rhs >> 3 << 3;\n    // Get the next highest multiple of 8 from the left hand side\n    const lhsInside = lhs + (lhs % 8 === 0 ? 0 : 8 - lhs % 8);\n    return (\n        // Get the popcnt of bits between the left hand side, and the next highest multiple of 8\n        popcnt_bit_range(data, lhs, lhsInside) +\n        // Get the popcnt of bits between the right hand side, and the next lowest multiple of 8\n        popcnt_bit_range(data, rhsInside, rhs) +\n        // Get the popcnt of all bits between the left and right hand sides' multiples of 8\n        popcnt_array(data, lhsInside >> 3, (rhsInside - lhsInside) >> 3)\n    );\n}\n\n/** @ignore */\nexport function popcnt_array(arr: ArrayBufferView, byteOffset?: number, byteLength?: number) {\n    let cnt = 0, pos = Math.trunc(byteOffset!);\n    const view = new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n    const len = byteLength === void 0 ? arr.byteLength : pos + byteLength;\n    while (len - pos >= 4) {\n        cnt += popcnt_uint32(view.getUint32(pos));\n        pos += 4;\n    }\n    while (len - pos >= 2) {\n        cnt += popcnt_uint32(view.getUint16(pos));\n        pos += 2;\n    }\n    while (len - pos >= 1) {\n        cnt += popcnt_uint32(view.getUint8(pos));\n        pos += 1;\n    }\n    return cnt;\n}\n\n/** @ignore */\nexport function popcnt_uint32(uint32: number): number {\n    let i = Math.trunc(uint32);\n    i = i - ((i >>> 1) & 0x55555555);\n    i = (i & 0x33333333) + ((i >>> 2) & 0x33333333);\n    return (((i + (i >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,OAAM,SAAUA,OAAOA,CAACC,KAAU,EAAEC,MAAc,EAAEC,IAAY,EAAEC,GAAW;EACzE,OAAO,CAACD,IAAI,GAAG,CAAC,IAAIC,GAAG,MAAM,CAAC;AAClC;AAEA;AACA,OAAM,SAAUC,MAAMA,CAACJ,KAAU,EAAEC,MAAc,EAAEC,IAAY,EAAEC,GAAW;EACxE,OAAO,CAACD,IAAI,GAAG,CAAC,IAAIC,GAAG,KAAKA,GAAc;AAC9C;AAEA;AACA,OAAM,SAAUE,OAAOA,CAACC,KAAiB,EAAEC,KAAa,EAAEC,KAAU;EAChE,OAAOA,KAAK,GACR,CAAC,EAAEF,KAAK,CAACC,KAAK,IAAI,CAAC,CAAC,IAAK,CAAC,IAAKA,KAAK,GAAG,CAAG,CAAC,IAAI,IAAI,GACnD,EAAED,KAAK,CAACC,KAAK,IAAI,CAAC,CAAC,IAAI,EAAE,CAAC,IAAKA,KAAK,GAAG,CAAE,CAAC,CAAC,IAAI,KAAK;AAC5D;AAEA;AACA,OAAM,SAAUE,cAAcA,CAACC,MAAc,EAAEC,MAAc,EAAEC,MAAkB;EAC7E,MAAMC,WAAW,GAAID,MAAM,CAACE,UAAU,GAAG,CAAC,GAAI,CAAC,CAAC;EAChD,IAAIJ,MAAM,GAAG,CAAC,IAAIE,MAAM,CAACE,UAAU,GAAGD,WAAW,EAAE;IAC/C,MAAMP,KAAK,GAAG,IAAIS,UAAU,CAACF,WAAW,CAAC;IACzC;IACAP,KAAK,CAACU,GAAG,CAACN,MAAM,GAAG,CAAC,KAAK,CAAC,GAAGE,MAAM,CAACK,QAAQ,CAACP,MAAM,IAAI,CAAC,CAAC;IACrD;IACAQ,SAAS,CAAC,IAAIC,WAAW,CAACP,MAAM,EAAEF,MAAM,EAAEC,MAAM,EAAE,IAAI,EAAEZ,OAAO,CAAC,CAAC,CAACkB,QAAQ,CAAC,CAAC,EAAEJ,WAAW,CAAC,CAAC;IAC/F,OAAOP,KAAK;;EAEhB,OAAOM,MAAM;AACjB;AAEA;AACA,OAAM,SAAUM,SAASA,CAACE,MAAqB;EAC3C,MAAMC,EAAE,GAAa,EAAE;EACvB,IAAIC,CAAC,GAAG,CAAC;IAAEnB,GAAG,GAAG,CAAC;IAAED,IAAI,GAAG,CAAC;EAC5B,KAAK,MAAMM,KAAK,IAAIY,MAAM,EAAE;IACxBZ,KAAK,KAAKN,IAAI,IAAI,CAAC,IAAIC,GAAG,CAAC;IAC3B,IAAI,EAAEA,GAAG,KAAK,CAAC,EAAE;MACbkB,EAAE,CAACC,CAAC,EAAE,CAAC,GAAGpB,IAAI;MACdA,IAAI,GAAGC,GAAG,GAAG,CAAC;;;EAGtB,IAAImB,CAAC,KAAK,CAAC,IAAInB,GAAG,GAAG,CAAC,EAAE;IAAEkB,EAAE,CAACC,CAAC,EAAE,CAAC,GAAGpB,IAAI;;EACxC,MAAMqB,CAAC,GAAG,IAAIR,UAAU,CAAEM,EAAE,CAACV,MAAM,GAAG,CAAC,GAAI,CAAC,CAAC,CAAC;EAC9CY,CAAC,CAACP,GAAG,CAACK,EAAE,CAAC;EACT,OAAOE,CAAC;AACZ;AAEA;AACA,OAAM,MAAOJ,WAAW;EAMpBK,YACYlB,KAAiB,EACzBmB,KAAa,EACLd,MAAc,EACde,OAAY,EACZC,GAAkE;IAJlE,KAAArB,KAAK,GAALA,KAAK;IAEL,KAAAK,MAAM,GAANA,MAAM;IACN,KAAAe,OAAO,GAAPA,OAAO;IACP,KAAAC,GAAG,GAAHA,GAAG;IAEX,IAAI,CAACxB,GAAG,GAAGsB,KAAK,GAAG,CAAC;IACpB,IAAI,CAACG,SAAS,GAAGH,KAAK,IAAI,CAAC;IAC3B,IAAI,CAACvB,IAAI,GAAGI,KAAK,CAAC,IAAI,CAACsB,SAAS,EAAE,CAAC;IACnC,IAAI,CAACrB,KAAK,GAAG,CAAC;EAClB;EAEAsB,IAAIA,CAAA;IACA,IAAI,IAAI,CAACtB,KAAK,GAAG,IAAI,CAACI,MAAM,EAAE;MAC1B,IAAI,IAAI,CAACR,GAAG,KAAK,CAAC,EAAE;QAChB,IAAI,CAACA,GAAG,GAAG,CAAC;QACZ,IAAI,CAACD,IAAI,GAAG,IAAI,CAACI,KAAK,CAAC,IAAI,CAACsB,SAAS,EAAE,CAAC;;MAE5C,OAAO;QACHpB,KAAK,EAAE,IAAI,CAACmB,GAAG,CAAC,IAAI,CAACD,OAAO,EAAE,IAAI,CAACnB,KAAK,EAAE,EAAE,IAAI,CAACL,IAAI,EAAE,IAAI,CAACC,GAAG,EAAE;OACpE;;IAEL,OAAO;MAAE2B,IAAI,EAAE,IAAI;MAAEtB,KAAK,EAAE;IAAI,CAAE;EACtC;EAEA,CAACuB,MAAM,CAACC,QAAQ,IAAC;IACb,OAAO,IAAI;EACf;;AAGJ;;;;;;AAMA;AACA,OAAM,SAAUC,gBAAgBA,CAACC,IAAgB,EAAEC,GAAW,EAAEC,GAAW;EACvE,IAAIA,GAAG,GAAGD,GAAG,IAAI,CAAC,EAAE;IAAE,OAAO,CAAC;;EAC9B;EACA,IAAIC,GAAG,GAAGD,GAAG,GAAG,CAAC,EAAE;IACf,IAAIE,GAAG,GAAG,CAAC;IACX,KAAK,MAAMlC,GAAG,IAAI,IAAIgB,WAAW,CAACe,IAAI,EAAEC,GAAG,EAAEC,GAAG,GAAGD,GAAG,EAAED,IAAI,EAAE9B,MAAM,CAAC,EAAE;MACnEiC,GAAG,IAAIlC,GAAG;;IAEd,OAAOkC,GAAG;;EAEd;EACA,MAAMC,SAAS,GAAGF,GAAG,IAAI,CAAC,IAAI,CAAC;EAC/B;EACA,MAAMG,SAAS,GAAGJ,GAAG,IAAIA,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,GAAGA,GAAG,GAAG,CAAC,CAAC;EACzD;IACI;IACAF,gBAAgB,CAACC,IAAI,EAAEC,GAAG,EAAEI,SAAS,CAAC;IACtC;IACAN,gBAAgB,CAACC,IAAI,EAAEI,SAAS,EAAEF,GAAG,CAAC;IACtC;IACAI,YAAY,CAACN,IAAI,EAAEK,SAAS,IAAI,CAAC,EAAGD,SAAS,GAAGC,SAAS,IAAK,CAAC;EAAC;AAExE;AAEA;AACA,OAAM,SAAUC,YAAYA,CAACC,GAAoB,EAAEC,UAAmB,EAAE5B,UAAmB;EACvF,IAAI6B,GAAG,GAAG,CAAC;IAAEC,GAAG,GAAGC,IAAI,CAACC,KAAK,CAACJ,UAAW,CAAC;EAC1C,MAAMK,IAAI,GAAG,IAAIC,QAAQ,CAACP,GAAG,CAACQ,MAAM,EAAER,GAAG,CAACC,UAAU,EAAED,GAAG,CAAC3B,UAAU,CAAC;EACrE,MAAMoC,GAAG,GAAGpC,UAAU,KAAK,KAAK,CAAC,GAAG2B,GAAG,CAAC3B,UAAU,GAAG8B,GAAG,GAAG9B,UAAU;EACrE,OAAOoC,GAAG,GAAGN,GAAG,IAAI,CAAC,EAAE;IACnBD,GAAG,IAAIQ,aAAa,CAACJ,IAAI,CAACK,SAAS,CAACR,GAAG,CAAC,CAAC;IACzCA,GAAG,IAAI,CAAC;;EAEZ,OAAOM,GAAG,GAAGN,GAAG,IAAI,CAAC,EAAE;IACnBD,GAAG,IAAIQ,aAAa,CAACJ,IAAI,CAACM,SAAS,CAACT,GAAG,CAAC,CAAC;IACzCA,GAAG,IAAI,CAAC;;EAEZ,OAAOM,GAAG,GAAGN,GAAG,IAAI,CAAC,EAAE;IACnBD,GAAG,IAAIQ,aAAa,CAACJ,IAAI,CAACO,QAAQ,CAACV,GAAG,CAAC,CAAC;IACxCA,GAAG,IAAI,CAAC;;EAEZ,OAAOD,GAAG;AACd;AAEA;AACA,OAAM,SAAUQ,aAAaA,CAACI,MAAc;EACxC,IAAIjC,CAAC,GAAGuB,IAAI,CAACC,KAAK,CAACS,MAAM,CAAC;EAC1BjC,CAAC,GAAGA,CAAC,IAAKA,CAAC,KAAK,CAAC,GAAI,UAAU,CAAC;EAChCA,CAAC,GAAG,CAACA,CAAC,GAAG,UAAU,KAAMA,CAAC,KAAK,CAAC,GAAI,UAAU,CAAC;EAC/C,OAAQ,CAAEA,CAAC,IAAIA,CAAC,KAAK,CAAC,CAAC,GAAI,UAAU,IAAI,UAAU,KAAM,EAAE;AAC/D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}