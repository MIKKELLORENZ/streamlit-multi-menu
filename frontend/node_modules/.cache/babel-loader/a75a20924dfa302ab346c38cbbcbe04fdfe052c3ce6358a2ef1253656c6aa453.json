{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { BN } from '../util/bn.mjs';\nimport { Vector } from '../vector.mjs';\nimport { Visitor } from '../visitor.mjs';\nimport { MapRow } from '../row/map.mjs';\nimport { StructRow } from '../row/struct.mjs';\nimport { decodeUtf8 } from '../util/utf8.mjs';\nimport { uint16ToFloat64 } from '../util/math.mjs';\nimport { UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum.mjs';\n/** @ignore */\nexport class GetVisitor extends Visitor {}\n/** @ignore */\nfunction wrapGet(fn) {\n  return (data, _1) => data.getValid(_1) ? fn(data, _1) : null;\n}\n/** @ignore */\nconst epochDaysToMs = (data, index) => 86400000 * data[index];\n/** @ignore */\nconst epochMillisecondsLongToMs = (data, index) => 4294967296 * data[index + 1] + (data[index] >>> 0);\n/** @ignore */\nconst epochMicrosecondsLongToMs = (data, index) => 4294967296 * (data[index + 1] / 1000) + (data[index] >>> 0) / 1000;\n/** @ignore */\nconst epochNanosecondsLongToMs = (data, index) => 4294967296 * (data[index + 1] / 1000000) + (data[index] >>> 0) / 1000000;\n/** @ignore */\nconst epochMillisecondsToDate = epochMs => new Date(epochMs);\n/** @ignore */\nconst epochDaysToDate = (data, index) => epochMillisecondsToDate(epochDaysToMs(data, index));\n/** @ignore */\nconst epochMillisecondsLongToDate = (data, index) => epochMillisecondsToDate(epochMillisecondsLongToMs(data, index));\n/** @ignore */\nconst getNull = (_data, _index) => null;\n/** @ignore */\nconst getVariableWidthBytes = (values, valueOffsets, index) => {\n  if (index + 1 >= valueOffsets.length) {\n    return null;\n  }\n  const x = valueOffsets[index];\n  const y = valueOffsets[index + 1];\n  return values.subarray(x, y);\n};\n/** @ignore */\nconst getBool = ({\n  offset,\n  values\n}, index) => {\n  const idx = offset + index;\n  const byte = values[idx >> 3];\n  return (byte & 1 << idx % 8) !== 0;\n};\n/** @ignore */\nconst getDateDay = ({\n  values\n}, index) => epochDaysToDate(values, index);\n/** @ignore */\nconst getDateMillisecond = ({\n  values\n}, index) => epochMillisecondsLongToDate(values, index * 2);\n/** @ignore */\nconst getNumeric = ({\n  stride,\n  values\n}, index) => values[stride * index];\n/** @ignore */\nconst getFloat16 = ({\n  stride,\n  values\n}, index) => uint16ToFloat64(values[stride * index]);\n/** @ignore */\nconst getBigInts = ({\n  values\n}, index) => values[index];\n/** @ignore */\nconst getFixedSizeBinary = ({\n  stride,\n  values\n}, index) => values.subarray(stride * index, stride * (index + 1));\n/** @ignore */\nconst getBinary = ({\n  values,\n  valueOffsets\n}, index) => getVariableWidthBytes(values, valueOffsets, index);\n/** @ignore */\nconst getUtf8 = ({\n  values,\n  valueOffsets\n}, index) => {\n  const bytes = getVariableWidthBytes(values, valueOffsets, index);\n  return bytes !== null ? decodeUtf8(bytes) : null;\n};\n/* istanbul ignore next */\n/** @ignore */\nconst getInt = ({\n  values\n}, index) => values[index];\n/* istanbul ignore next */\n/** @ignore */\nconst getFloat = ({\n  type,\n  values\n}, index) => type.precision !== Precision.HALF ? values[index] : uint16ToFloat64(values[index]);\n/* istanbul ignore next */\n/** @ignore */\nconst getDate = (data, index) => data.type.unit === DateUnit.DAY ? getDateDay(data, index) : getDateMillisecond(data, index);\n/** @ignore */\nconst getTimestampSecond = ({\n  values\n}, index) => 1000 * epochMillisecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampMillisecond = ({\n  values\n}, index) => epochMillisecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampMicrosecond = ({\n  values\n}, index) => epochMicrosecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampNanosecond = ({\n  values\n}, index) => epochNanosecondsLongToMs(values, index * 2);\n/* istanbul ignore next */\n/** @ignore */\nconst getTimestamp = (data, index) => {\n  switch (data.type.unit) {\n    case TimeUnit.SECOND:\n      return getTimestampSecond(data, index);\n    case TimeUnit.MILLISECOND:\n      return getTimestampMillisecond(data, index);\n    case TimeUnit.MICROSECOND:\n      return getTimestampMicrosecond(data, index);\n    case TimeUnit.NANOSECOND:\n      return getTimestampNanosecond(data, index);\n  }\n};\n/** @ignore */\nconst getTimeSecond = ({\n  values\n}, index) => values[index];\n/** @ignore */\nconst getTimeMillisecond = ({\n  values\n}, index) => values[index];\n/** @ignore */\nconst getTimeMicrosecond = ({\n  values\n}, index) => values[index];\n/** @ignore */\nconst getTimeNanosecond = ({\n  values\n}, index) => values[index];\n/* istanbul ignore next */\n/** @ignore */\nconst getTime = (data, index) => {\n  switch (data.type.unit) {\n    case TimeUnit.SECOND:\n      return getTimeSecond(data, index);\n    case TimeUnit.MILLISECOND:\n      return getTimeMillisecond(data, index);\n    case TimeUnit.MICROSECOND:\n      return getTimeMicrosecond(data, index);\n    case TimeUnit.NANOSECOND:\n      return getTimeNanosecond(data, index);\n  }\n};\n/** @ignore */\nconst getDecimal = ({\n  values,\n  stride\n}, index) => BN.decimal(values.subarray(stride * index, stride * (index + 1)));\n/** @ignore */\nconst getList = (data, index) => {\n  const {\n    valueOffsets,\n    stride,\n    children\n  } = data;\n  const {\n    [index * stride]: begin,\n    [index * stride + 1]: end\n  } = valueOffsets;\n  const child = children[0];\n  const slice = child.slice(begin, end - begin);\n  return new Vector([slice]);\n};\n/** @ignore */\nconst getMap = (data, index) => {\n  const {\n    valueOffsets,\n    children\n  } = data;\n  const {\n    [index]: begin,\n    [index + 1]: end\n  } = valueOffsets;\n  const child = children[0];\n  return new MapRow(child.slice(begin, end - begin));\n};\n/** @ignore */\nconst getStruct = (data, index) => {\n  return new StructRow(data, index);\n};\n/* istanbul ignore next */\n/** @ignore */\nconst getUnion = (data, index) => {\n  return data.type.mode === UnionMode.Dense ? getDenseUnion(data, index) : getSparseUnion(data, index);\n};\n/** @ignore */\nconst getDenseUnion = (data, index) => {\n  const childIndex = data.type.typeIdToChildIndex[data.typeIds[index]];\n  const child = data.children[childIndex];\n  return instance.visit(child, data.valueOffsets[index]);\n};\n/** @ignore */\nconst getSparseUnion = (data, index) => {\n  const childIndex = data.type.typeIdToChildIndex[data.typeIds[index]];\n  const child = data.children[childIndex];\n  return instance.visit(child, index);\n};\n/** @ignore */\nconst getDictionary = (data, index) => {\n  var _a;\n  return (_a = data.dictionary) === null || _a === void 0 ? void 0 : _a.get(data.values[index]);\n};\n/* istanbul ignore next */\n/** @ignore */\nconst getInterval = (data, index) => data.type.unit === IntervalUnit.DAY_TIME ? getIntervalDayTime(data, index) : getIntervalYearMonth(data, index);\n/** @ignore */\nconst getIntervalDayTime = ({\n  values\n}, index) => values.subarray(2 * index, 2 * (index + 1));\n/** @ignore */\nconst getIntervalYearMonth = ({\n  values\n}, index) => {\n  const interval = values[index];\n  const int32s = new Int32Array(2);\n  int32s[0] = Math.trunc(interval / 12); /* years */\n  int32s[1] = Math.trunc(interval % 12); /* months */\n  return int32s;\n};\n/** @ignore */\nconst getFixedSizeList = (data, index) => {\n  const {\n    stride,\n    children\n  } = data;\n  const child = children[0];\n  const slice = child.slice(index * stride, stride);\n  return new Vector([slice]);\n};\nGetVisitor.prototype.visitNull = wrapGet(getNull);\nGetVisitor.prototype.visitBool = wrapGet(getBool);\nGetVisitor.prototype.visitInt = wrapGet(getInt);\nGetVisitor.prototype.visitInt8 = wrapGet(getNumeric);\nGetVisitor.prototype.visitInt16 = wrapGet(getNumeric);\nGetVisitor.prototype.visitInt32 = wrapGet(getNumeric);\nGetVisitor.prototype.visitInt64 = wrapGet(getBigInts);\nGetVisitor.prototype.visitUint8 = wrapGet(getNumeric);\nGetVisitor.prototype.visitUint16 = wrapGet(getNumeric);\nGetVisitor.prototype.visitUint32 = wrapGet(getNumeric);\nGetVisitor.prototype.visitUint64 = wrapGet(getBigInts);\nGetVisitor.prototype.visitFloat = wrapGet(getFloat);\nGetVisitor.prototype.visitFloat16 = wrapGet(getFloat16);\nGetVisitor.prototype.visitFloat32 = wrapGet(getNumeric);\nGetVisitor.prototype.visitFloat64 = wrapGet(getNumeric);\nGetVisitor.prototype.visitUtf8 = wrapGet(getUtf8);\nGetVisitor.prototype.visitBinary = wrapGet(getBinary);\nGetVisitor.prototype.visitFixedSizeBinary = wrapGet(getFixedSizeBinary);\nGetVisitor.prototype.visitDate = wrapGet(getDate);\nGetVisitor.prototype.visitDateDay = wrapGet(getDateDay);\nGetVisitor.prototype.visitDateMillisecond = wrapGet(getDateMillisecond);\nGetVisitor.prototype.visitTimestamp = wrapGet(getTimestamp);\nGetVisitor.prototype.visitTimestampSecond = wrapGet(getTimestampSecond);\nGetVisitor.prototype.visitTimestampMillisecond = wrapGet(getTimestampMillisecond);\nGetVisitor.prototype.visitTimestampMicrosecond = wrapGet(getTimestampMicrosecond);\nGetVisitor.prototype.visitTimestampNanosecond = wrapGet(getTimestampNanosecond);\nGetVisitor.prototype.visitTime = wrapGet(getTime);\nGetVisitor.prototype.visitTimeSecond = wrapGet(getTimeSecond);\nGetVisitor.prototype.visitTimeMillisecond = wrapGet(getTimeMillisecond);\nGetVisitor.prototype.visitTimeMicrosecond = wrapGet(getTimeMicrosecond);\nGetVisitor.prototype.visitTimeNanosecond = wrapGet(getTimeNanosecond);\nGetVisitor.prototype.visitDecimal = wrapGet(getDecimal);\nGetVisitor.prototype.visitList = wrapGet(getList);\nGetVisitor.prototype.visitStruct = wrapGet(getStruct);\nGetVisitor.prototype.visitUnion = wrapGet(getUnion);\nGetVisitor.prototype.visitDenseUnion = wrapGet(getDenseUnion);\nGetVisitor.prototype.visitSparseUnion = wrapGet(getSparseUnion);\nGetVisitor.prototype.visitDictionary = wrapGet(getDictionary);\nGetVisitor.prototype.visitInterval = wrapGet(getInterval);\nGetVisitor.prototype.visitIntervalDayTime = wrapGet(getIntervalDayTime);\nGetVisitor.prototype.visitIntervalYearMonth = wrapGet(getIntervalYearMonth);\nGetVisitor.prototype.visitFixedSizeList = wrapGet(getFixedSizeList);\nGetVisitor.prototype.visitMap = wrapGet(getMap);\n/** @ignore */\nexport const instance = new GetVisitor();","map":{"version":3,"names":["BN","Vector","Visitor","MapRow","StructRow","decodeUtf8","uint16ToFloat64","UnionMode","Precision","DateUnit","TimeUnit","IntervalUnit","GetVisitor","wrapGet","fn","data","_1","getValid","epochDaysToMs","index","epochMillisecondsLongToMs","epochMicrosecondsLongToMs","epochNanosecondsLongToMs","epochMillisecondsToDate","epochMs","Date","epochDaysToDate","epochMillisecondsLongToDate","getNull","_data","_index","getVariableWidthBytes","values","valueOffsets","length","x","y","subarray","getBool","offset","idx","byte","getDateDay","getDateMillisecond","getNumeric","stride","getFloat16","getBigInts","getFixedSizeBinary","getBinary","getUtf8","bytes","getInt","getFloat","type","precision","HALF","getDate","unit","DAY","getTimestampSecond","getTimestampMillisecond","getTimestampMicrosecond","getTimestampNanosecond","getTimestamp","SECOND","MILLISECOND","MICROSECOND","NANOSECOND","getTimeSecond","getTimeMillisecond","getTimeMicrosecond","getTimeNanosecond","getTime","getDecimal","decimal","getList","children","begin","end","child","slice","getMap","getStruct","getUnion","mode","Dense","getDenseUnion","getSparseUnion","childIndex","typeIdToChildIndex","typeIds","instance","visit","getDictionary","_a","dictionary","get","getInterval","DAY_TIME","getIntervalDayTime","getIntervalYearMonth","interval","int32s","Int32Array","Math","trunc","getFixedSizeList","prototype","visitNull","visitBool","visitInt","visitInt8","visitInt16","visitInt32","visitInt64","visitUint8","visitUint16","visitUint32","visitUint64","visitFloat","visitFloat16","visitFloat32","visitFloat64","visitUtf8","visitBinary","visitFixedSizeBinary","visitDate","visitDateDay","visitDateMillisecond","visitTimestamp","visitTimestampSecond","visitTimestampMillisecond","visitTimestampMicrosecond","visitTimestampNanosecond","visitTime","visitTimeSecond","visitTimeMillisecond","visitTimeMicrosecond","visitTimeNanosecond","visitDecimal","visitList","visitStruct","visitUnion","visitDenseUnion","visitSparseUnion","visitDictionary","visitInterval","visitIntervalDayTime","visitIntervalYearMonth","visitFixedSizeList","visitMap"],"sources":["C:\\Users\\mvlor\\OneDrive\\Desktop\\custom_component\\streamlit_multi_menu\\streamlit_multi_menu\\frontend\\node_modules\\apache-arrow\\src\\visitor\\get.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data.js';\nimport { BN } from '../util/bn.js';\nimport { Vector } from '../vector.js';\nimport { Visitor } from '../visitor.js';\nimport { MapRow } from '../row/map.js';\nimport { StructRow, StructRowProxy } from '../row/struct.js';\nimport { decodeUtf8 } from '../util/utf8.js';\nimport { TypeToDataType } from '../interfaces.js';\nimport { uint16ToFloat64 } from '../util/math.js';\nimport { Type, UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum.js';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type.js';\n\n/** @ignore */\nexport interface GetVisitor extends Visitor {\n    visit<T extends DataType>(node: Data<T>, index: number): T['TValue'] | null;\n    visitMany<T extends DataType>(nodes: Data<T>[], indices: number[]): (T['TValue'] | null)[];\n    getVisitFn<T extends DataType>(node: Vector<T> | Data<T> | T): (data: Data<T>, index: number) => T['TValue'] | null;\n    getVisitFn<T extends Type>(node: T): (data: Data<TypeToDataType<T>>, index: number) => TypeToDataType<T>['TValue'];\n    visitNull<T extends Null>(data: Data<T>, index: number): T['TValue'] | null;\n    visitBool<T extends Bool>(data: Data<T>, index: number): T['TValue'] | null;\n    visitInt<T extends Int>(data: Data<T>, index: number): T['TValue'] | null;\n    visitInt8<T extends Int8>(data: Data<T>, index: number): T['TValue'] | null;\n    visitInt16<T extends Int16>(data: Data<T>, index: number): T['TValue'] | null;\n    visitInt32<T extends Int32>(data: Data<T>, index: number): T['TValue'] | null;\n    visitInt64<T extends Int64>(data: Data<T>, index: number): T['TValue'] | null;\n    visitUint8<T extends Uint8>(data: Data<T>, index: number): T['TValue'] | null;\n    visitUint16<T extends Uint16>(data: Data<T>, index: number): T['TValue'] | null;\n    visitUint32<T extends Uint32>(data: Data<T>, index: number): T['TValue'] | null;\n    visitUint64<T extends Uint64>(data: Data<T>, index: number): T['TValue'] | null;\n    visitFloat<T extends Float>(data: Data<T>, index: number): T['TValue'] | null;\n    visitFloat16<T extends Float16>(data: Data<T>, index: number): T['TValue'] | null;\n    visitFloat32<T extends Float32>(data: Data<T>, index: number): T['TValue'] | null;\n    visitFloat64<T extends Float64>(data: Data<T>, index: number): T['TValue'] | null;\n    visitUtf8<T extends Utf8>(data: Data<T>, index: number): T['TValue'] | null;\n    visitBinary<T extends Binary>(data: Data<T>, index: number): T['TValue'] | null;\n    visitFixedSizeBinary<T extends FixedSizeBinary>(data: Data<T>, index: number): T['TValue'] | null;\n    visitDate<T extends Date_>(data: Data<T>, index: number): T['TValue'] | null;\n    visitDateDay<T extends DateDay>(data: Data<T>, index: number): T['TValue'] | null;\n    visitDateMillisecond<T extends DateMillisecond>(data: Data<T>, index: number): T['TValue'] | null;\n    visitTimestamp<T extends Timestamp>(data: Data<T>, index: number): T['TValue'] | null;\n    visitTimestampSecond<T extends TimestampSecond>(data: Data<T>, index: number): T['TValue'] | null;\n    visitTimestampMillisecond<T extends TimestampMillisecond>(data: Data<T>, index: number): T['TValue'] | null;\n    visitTimestampMicrosecond<T extends TimestampMicrosecond>(data: Data<T>, index: number): T['TValue'] | null;\n    visitTimestampNanosecond<T extends TimestampNanosecond>(data: Data<T>, index: number): T['TValue'] | null;\n    visitTime<T extends Time>(data: Data<T>, index: number): T['TValue'] | null;\n    visitTimeSecond<T extends TimeSecond>(data: Data<T>, index: number): T['TValue'] | null;\n    visitTimeMillisecond<T extends TimeMillisecond>(data: Data<T>, index: number): T['TValue'] | null;\n    visitTimeMicrosecond<T extends TimeMicrosecond>(data: Data<T>, index: number): T['TValue'] | null;\n    visitTimeNanosecond<T extends TimeNanosecond>(data: Data<T>, index: number): T['TValue'] | null;\n    visitDecimal<T extends Decimal>(data: Data<T>, index: number): T['TValue'] | null;\n    visitList<T extends List>(data: Data<T>, index: number): T['TValue'] | null;\n    visitStruct<T extends Struct>(data: Data<T>, index: number): T['TValue'] | null;\n    visitUnion<T extends Union>(data: Data<T>, index: number): T['TValue'] | null;\n    visitDenseUnion<T extends DenseUnion>(data: Data<T>, index: number): T['TValue'] | null;\n    visitSparseUnion<T extends SparseUnion>(data: Data<T>, index: number): T['TValue'] | null;\n    visitDictionary<T extends Dictionary>(data: Data<T>, index: number): T['TValue'] | null;\n    visitInterval<T extends Interval>(data: Data<T>, index: number): T['TValue'] | null;\n    visitIntervalDayTime<T extends IntervalDayTime>(data: Data<T>, index: number): T['TValue'] | null;\n    visitIntervalYearMonth<T extends IntervalYearMonth>(data: Data<T>, index: number): T['TValue'] | null;\n    visitFixedSizeList<T extends FixedSizeList>(data: Data<T>, index: number): T['TValue'] | null;\n    visitMap<T extends Map_>(data: Data<T>, index: number): T['TValue'] | null;\n}\n\n/** @ignore */\nexport class GetVisitor extends Visitor { }\n\n/** @ignore */\nfunction wrapGet<T extends DataType>(fn: (data: Data<T>, _1: any) => any) {\n    return (data: Data<T>, _1: any) => data.getValid(_1) ? fn(data, _1) : null;\n}\n\n/** @ignore */const epochDaysToMs = (data: Int32Array, index: number) => 86400000 * data[index];\n/** @ignore */const epochMillisecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1]) + (data[index] >>> 0);\n/** @ignore */const epochMicrosecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1] / 1000) + ((data[index] >>> 0) / 1000);\n/** @ignore */const epochNanosecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1] / 1000000) + ((data[index] >>> 0) / 1000000);\n\n/** @ignore */const epochMillisecondsToDate = (epochMs: number) => new Date(epochMs);\n/** @ignore */const epochDaysToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochDaysToMs(data, index));\n/** @ignore */const epochMillisecondsLongToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochMillisecondsLongToMs(data, index));\n\n/** @ignore */\nconst getNull = <T extends Null>(_data: Data<T>, _index: number): T['TValue'] => null;\n/** @ignore */\nconst getVariableWidthBytes = (values: Uint8Array, valueOffsets: Int32Array, index: number) => {\n    if (index + 1 >= valueOffsets.length) {\n        return null as any;\n    }\n    const x = valueOffsets[index];\n    const y = valueOffsets[index + 1];\n    return values.subarray(x, y);\n};\n\n/** @ignore */\nconst getBool = <T extends Bool>({ offset, values }: Data<T>, index: number): T['TValue'] => {\n    const idx = offset + index;\n    const byte = values[idx >> 3];\n    return (byte & 1 << (idx % 8)) !== 0;\n};\n\n/** @ignore */\ntype Numeric1X = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32 | Float32 | Float64;\n/** @ignore */\ntype Numeric2X = Int64 | Uint64;\n\n/** @ignore */\nconst getDateDay = <T extends DateDay>({ values }: Data<T>, index: number): T['TValue'] => epochDaysToDate(values, index);\n/** @ignore */\nconst getDateMillisecond = <T extends DateMillisecond>({ values }: Data<T>, index: number): T['TValue'] => epochMillisecondsLongToDate(values, index * 2);\n/** @ignore */\nconst getNumeric = <T extends Numeric1X>({ stride, values }: Data<T>, index: number): T['TValue'] => values[stride * index];\n/** @ignore */\nconst getFloat16 = <T extends Float16>({ stride, values }: Data<T>, index: number): T['TValue'] => uint16ToFloat64(values[stride * index]);\n/** @ignore */\nconst getBigInts = <T extends Numeric2X>({ values }: Data<T>, index: number): T['TValue'] => values[index];\n/** @ignore */\nconst getFixedSizeBinary = <T extends FixedSizeBinary>({ stride, values }: Data<T>, index: number): T['TValue'] => values.subarray(stride * index, stride * (index + 1));\n\n/** @ignore */\nconst getBinary = <T extends Binary>({ values, valueOffsets }: Data<T>, index: number): T['TValue'] => getVariableWidthBytes(values, valueOffsets, index);\n/** @ignore */\nconst getUtf8 = <T extends Utf8>({ values, valueOffsets }: Data<T>, index: number): T['TValue'] => {\n    const bytes = getVariableWidthBytes(values, valueOffsets, index);\n    return bytes !== null ? decodeUtf8(bytes) : null as any;\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getInt = <T extends Int>({ values }: Data<T>, index: number): T['TValue'] => values[index];\n\n/* istanbul ignore next */\n/** @ignore */\nconst getFloat = <T extends Float>({ type, values }: Data<T>, index: number): T['TValue'] => (\n    type.precision !== Precision.HALF ? values[index] : uint16ToFloat64(values[index])\n);\n\n/* istanbul ignore next */\n/** @ignore */\nconst getDate = <T extends Date_>(data: Data<T>, index: number): T['TValue'] => (\n    data.type.unit === DateUnit.DAY\n        ? getDateDay(data as Data<DateDay>, index)\n        : getDateMillisecond(data as Data<DateMillisecond>, index)\n);\n\n/** @ignore */\nconst getTimestampSecond = <T extends TimestampSecond>({ values }: Data<T>, index: number): T['TValue'] => 1000 * epochMillisecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampMillisecond = <T extends TimestampMillisecond>({ values }: Data<T>, index: number): T['TValue'] => epochMillisecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampMicrosecond = <T extends TimestampMicrosecond>({ values }: Data<T>, index: number): T['TValue'] => epochMicrosecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampNanosecond = <T extends TimestampNanosecond>({ values }: Data<T>, index: number): T['TValue'] => epochNanosecondsLongToMs(values, index * 2);\n/* istanbul ignore next */\n/** @ignore */\nconst getTimestamp = <T extends Timestamp>(data: Data<T>, index: number): T['TValue'] => {\n    switch (data.type.unit) {\n        case TimeUnit.SECOND: return getTimestampSecond(data as Data<TimestampSecond>, index);\n        case TimeUnit.MILLISECOND: return getTimestampMillisecond(data as Data<TimestampMillisecond>, index);\n        case TimeUnit.MICROSECOND: return getTimestampMicrosecond(data as Data<TimestampMicrosecond>, index);\n        case TimeUnit.NANOSECOND: return getTimestampNanosecond(data as Data<TimestampNanosecond>, index);\n    }\n};\n\n/** @ignore */\nconst getTimeSecond = <T extends TimeSecond>({ values }: Data<T>, index: number): T['TValue'] => values[index];\n/** @ignore */\nconst getTimeMillisecond = <T extends TimeMillisecond>({ values }: Data<T>, index: number): T['TValue'] => values[index];\n/** @ignore */\nconst getTimeMicrosecond = <T extends TimeMicrosecond>({ values }: Data<T>, index: number): T['TValue'] => values[index];\n/** @ignore */\nconst getTimeNanosecond = <T extends TimeNanosecond>({ values }: Data<T>, index: number): T['TValue'] => values[index];\n/* istanbul ignore next */\n/** @ignore */\nconst getTime = <T extends Time>(data: Data<T>, index: number): T['TValue'] => {\n    switch (data.type.unit) {\n        case TimeUnit.SECOND: return getTimeSecond(data as Data<TimeSecond>, index);\n        case TimeUnit.MILLISECOND: return getTimeMillisecond(data as Data<TimeMillisecond>, index);\n        case TimeUnit.MICROSECOND: return getTimeMicrosecond(data as Data<TimeMicrosecond>, index);\n        case TimeUnit.NANOSECOND: return getTimeNanosecond(data as Data<TimeNanosecond>, index);\n    }\n};\n\n/** @ignore */\nconst getDecimal = <T extends Decimal>({ values, stride }: Data<T>, index: number): T['TValue'] => BN.decimal(values.subarray(stride * index, stride * (index + 1)));\n\n/** @ignore */\nconst getList = <T extends List>(data: Data<T>, index: number): T['TValue'] => {\n    const { valueOffsets, stride, children } = data;\n    const { [index * stride]: begin, [index * stride + 1]: end } = valueOffsets;\n    const child: Data<T['valueType']> = children[0];\n    const slice = child.slice(begin, end - begin);\n    return new Vector([slice]) as T['TValue'];\n};\n\n/** @ignore */\nconst getMap = <T extends Map_>(data: Data<T>, index: number): T['TValue'] => {\n    const { valueOffsets, children } = data;\n    const { [index]: begin, [index + 1]: end } = valueOffsets;\n    const child = children[0] as Data<T['childType']>;\n    return new MapRow(child.slice(begin, end - begin));\n};\n\n/** @ignore */\nconst getStruct = <T extends Struct>(data: Data<T>, index: number): T['TValue'] => {\n    return new StructRow(data, index) as StructRowProxy<T['TValue']>;\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getUnion = <\n    D extends Data<Union> | Data<DenseUnion> | Data<SparseUnion>\n>(data: D, index: number): D['TValue'] => {\n    return data.type.mode === UnionMode.Dense ?\n        getDenseUnion(data as Data<DenseUnion>, index) :\n        getSparseUnion(data as Data<SparseUnion>, index);\n};\n\n/** @ignore */\nconst getDenseUnion = <T extends DenseUnion>(data: Data<T>, index: number): T['TValue'] => {\n    const childIndex = data.type.typeIdToChildIndex[data.typeIds[index]];\n    const child = data.children[childIndex];\n    return instance.visit(child, data.valueOffsets[index]);\n};\n\n/** @ignore */\nconst getSparseUnion = <T extends SparseUnion>(data: Data<T>, index: number): T['TValue'] => {\n    const childIndex = data.type.typeIdToChildIndex[data.typeIds[index]];\n    const child = data.children[childIndex];\n    return instance.visit(child, index);\n};\n\n/** @ignore */\nconst getDictionary = <T extends Dictionary>(data: Data<T>, index: number): T['TValue'] => {\n    return data.dictionary?.get(data.values[index]);\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getInterval = <T extends Interval>(data: Data<T>, index: number): T['TValue'] =>\n    (data.type.unit === IntervalUnit.DAY_TIME)\n        ? getIntervalDayTime(data as Data<IntervalDayTime>, index)\n        : getIntervalYearMonth(data as Data<IntervalYearMonth>, index);\n\n/** @ignore */\nconst getIntervalDayTime = <T extends IntervalDayTime>({ values }: Data<T>, index: number): T['TValue'] => values.subarray(2 * index, 2 * (index + 1));\n\n/** @ignore */\nconst getIntervalYearMonth = <T extends IntervalYearMonth>({ values }: Data<T>, index: number): T['TValue'] => {\n    const interval = values[index];\n    const int32s = new Int32Array(2);\n    int32s[0] = Math.trunc(interval / 12); /* years */\n    int32s[1] = Math.trunc(interval % 12); /* months */\n    return int32s;\n};\n\n/** @ignore */\nconst getFixedSizeList = <T extends FixedSizeList>(data: Data<T>, index: number): T['TValue'] => {\n    const { stride, children } = data;\n    const child: Data<T['valueType']> = children[0];\n    const slice = child.slice(index * stride, stride);\n    return new Vector([slice]);\n};\n\nGetVisitor.prototype.visitNull = wrapGet(getNull);\nGetVisitor.prototype.visitBool = wrapGet(getBool);\nGetVisitor.prototype.visitInt = wrapGet(getInt);\nGetVisitor.prototype.visitInt8 = wrapGet(getNumeric);\nGetVisitor.prototype.visitInt16 = wrapGet(getNumeric);\nGetVisitor.prototype.visitInt32 = wrapGet(getNumeric);\nGetVisitor.prototype.visitInt64 = wrapGet(getBigInts);\nGetVisitor.prototype.visitUint8 = wrapGet(getNumeric);\nGetVisitor.prototype.visitUint16 = wrapGet(getNumeric);\nGetVisitor.prototype.visitUint32 = wrapGet(getNumeric);\nGetVisitor.prototype.visitUint64 = wrapGet(getBigInts);\nGetVisitor.prototype.visitFloat = wrapGet(getFloat);\nGetVisitor.prototype.visitFloat16 = wrapGet(getFloat16);\nGetVisitor.prototype.visitFloat32 = wrapGet(getNumeric);\nGetVisitor.prototype.visitFloat64 = wrapGet(getNumeric);\nGetVisitor.prototype.visitUtf8 = wrapGet(getUtf8);\nGetVisitor.prototype.visitBinary = wrapGet(getBinary);\nGetVisitor.prototype.visitFixedSizeBinary = wrapGet(getFixedSizeBinary);\nGetVisitor.prototype.visitDate = wrapGet(getDate);\nGetVisitor.prototype.visitDateDay = wrapGet(getDateDay);\nGetVisitor.prototype.visitDateMillisecond = wrapGet(getDateMillisecond);\nGetVisitor.prototype.visitTimestamp = wrapGet(getTimestamp);\nGetVisitor.prototype.visitTimestampSecond = wrapGet(getTimestampSecond);\nGetVisitor.prototype.visitTimestampMillisecond = wrapGet(getTimestampMillisecond);\nGetVisitor.prototype.visitTimestampMicrosecond = wrapGet(getTimestampMicrosecond);\nGetVisitor.prototype.visitTimestampNanosecond = wrapGet(getTimestampNanosecond);\nGetVisitor.prototype.visitTime = wrapGet(getTime);\nGetVisitor.prototype.visitTimeSecond = wrapGet(getTimeSecond);\nGetVisitor.prototype.visitTimeMillisecond = wrapGet(getTimeMillisecond);\nGetVisitor.prototype.visitTimeMicrosecond = wrapGet(getTimeMicrosecond);\nGetVisitor.prototype.visitTimeNanosecond = wrapGet(getTimeNanosecond);\nGetVisitor.prototype.visitDecimal = wrapGet(getDecimal);\nGetVisitor.prototype.visitList = wrapGet(getList);\nGetVisitor.prototype.visitStruct = wrapGet(getStruct);\nGetVisitor.prototype.visitUnion = wrapGet(getUnion);\nGetVisitor.prototype.visitDenseUnion = wrapGet(getDenseUnion);\nGetVisitor.prototype.visitSparseUnion = wrapGet(getSparseUnion);\nGetVisitor.prototype.visitDictionary = wrapGet(getDictionary);\nGetVisitor.prototype.visitInterval = wrapGet(getInterval);\nGetVisitor.prototype.visitIntervalDayTime = wrapGet(getIntervalDayTime);\nGetVisitor.prototype.visitIntervalYearMonth = wrapGet(getIntervalYearMonth);\nGetVisitor.prototype.visitFixedSizeList = wrapGet(getFixedSizeList);\nGetVisitor.prototype.visitMap = wrapGet(getMap);\n\n/** @ignore */\nexport const instance = new GetVisitor();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}