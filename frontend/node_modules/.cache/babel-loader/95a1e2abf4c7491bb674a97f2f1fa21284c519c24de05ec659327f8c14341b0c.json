{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { BN } from '../util/bn.mjs';\nimport { Vector } from '../vector.mjs';\nimport { Visitor } from '../visitor.mjs';\nimport { BufferType } from '../enum.mjs';\nimport { UnionMode, DateUnit, TimeUnit } from '../enum.mjs';\nimport { BitIterator, getBit, getBool } from '../util/bit.mjs';\nimport { DataType } from '../type.mjs';\n/** @ignore */\nexport class JSONVectorAssembler extends Visitor {\n  /** @nocollapse */\n  static assemble() {\n    const assemlber = new JSONVectorAssembler();\n    for (var _len = arguments.length, batches = new Array(_len), _key = 0; _key < _len; _key++) {\n      batches[_key] = arguments[_key];\n    }\n    return batches.map(_ref => {\n      let {\n        schema,\n        data\n      } = _ref;\n      return assemlber.visitMany(schema.fields, data.children);\n    });\n  }\n  visit(_ref2, data) {\n    let {\n      name\n    } = _ref2;\n    const {\n      length\n    } = data;\n    const {\n      offset,\n      nullCount,\n      nullBitmap\n    } = data;\n    const type = DataType.isDictionary(data.type) ? data.type.indices : data.type;\n    const buffers = Object.assign([], data.buffers, {\n      [BufferType.VALIDITY]: undefined\n    });\n    return Object.assign({\n      'name': name,\n      'count': length,\n      'VALIDITY': DataType.isNull(type) ? undefined : nullCount <= 0 ? Array.from({\n        length\n      }, () => 1) : [...new BitIterator(nullBitmap, offset, length, null, getBit)]\n    }, super.visit(data.clone(type, offset, length, 0, buffers)));\n  }\n  visitNull() {\n    return {};\n  }\n  visitBool(_ref3) {\n    let {\n      values,\n      offset,\n      length\n    } = _ref3;\n    return {\n      'DATA': [...new BitIterator(values, offset, length, null, getBool)]\n    };\n  }\n  visitInt(data) {\n    return {\n      'DATA': data.type.bitWidth < 64 ? [...data.values] : [...bigNumsToStrings(data.values, 2)]\n    };\n  }\n  visitFloat(data) {\n    return {\n      'DATA': [...data.values]\n    };\n  }\n  visitUtf8(data) {\n    return {\n      'DATA': [...new Vector([data])],\n      'OFFSET': [...data.valueOffsets]\n    };\n  }\n  visitBinary(data) {\n    return {\n      'DATA': [...binaryToString(new Vector([data]))],\n      OFFSET: [...data.valueOffsets]\n    };\n  }\n  visitFixedSizeBinary(data) {\n    return {\n      'DATA': [...binaryToString(new Vector([data]))]\n    };\n  }\n  visitDate(data) {\n    return {\n      'DATA': data.type.unit === DateUnit.DAY ? [...data.values] : [...bigNumsToStrings(data.values, 2)]\n    };\n  }\n  visitTimestamp(data) {\n    return {\n      'DATA': [...bigNumsToStrings(data.values, 2)]\n    };\n  }\n  visitTime(data) {\n    return {\n      'DATA': data.type.unit < TimeUnit.MICROSECOND ? [...data.values] : [...bigNumsToStrings(data.values, 2)]\n    };\n  }\n  visitDecimal(data) {\n    return {\n      'DATA': [...bigNumsToStrings(data.values, 4)]\n    };\n  }\n  visitList(data) {\n    return {\n      'OFFSET': [...data.valueOffsets],\n      'children': this.visitMany(data.type.children, data.children)\n    };\n  }\n  visitStruct(data) {\n    return {\n      'children': this.visitMany(data.type.children, data.children)\n    };\n  }\n  visitUnion(data) {\n    return {\n      'TYPE': [...data.typeIds],\n      'OFFSET': data.type.mode === UnionMode.Dense ? [...data.valueOffsets] : undefined,\n      'children': this.visitMany(data.type.children, data.children)\n    };\n  }\n  visitInterval(data) {\n    return {\n      'DATA': [...data.values]\n    };\n  }\n  visitFixedSizeList(data) {\n    return {\n      'children': this.visitMany(data.type.children, data.children)\n    };\n  }\n  visitMap(data) {\n    return {\n      'OFFSET': [...data.valueOffsets],\n      'children': this.visitMany(data.type.children, data.children)\n    };\n  }\n}\n/** @ignore */\nfunction* binaryToString(vector) {\n  for (const octets of vector) {\n    yield octets.reduce((str, byte) => {\n      return \"\".concat(str).concat(('0' + (byte & 0xFF).toString(16)).slice(-2));\n    }, '').toUpperCase();\n  }\n}\n/** @ignore */\nfunction* bigNumsToStrings(values, stride) {\n  const u32s = new Uint32Array(values.buffer);\n  for (let i = -1, n = u32s.length / stride; ++i < n;) {\n    yield \"\".concat(BN.new(u32s.subarray((i + 0) * stride, (i + 1) * stride), false));\n  }\n}","map":{"version":3,"names":["BN","Vector","Visitor","BufferType","UnionMode","DateUnit","TimeUnit","BitIterator","getBit","getBool","DataType","JSONVectorAssembler","assemble","assemlber","_len","arguments","length","batches","Array","_key","map","_ref","schema","data","visitMany","fields","children","visit","_ref2","name","offset","nullCount","nullBitmap","type","isDictionary","indices","buffers","Object","assign","VALIDITY","undefined","isNull","from","clone","visitNull","visitBool","_ref3","values","visitInt","bitWidth","bigNumsToStrings","visitFloat","visitUtf8","valueOffsets","visitBinary","binaryToString","OFFSET","visitFixedSizeBinary","visitDate","unit","DAY","visitTimestamp","visitTime","MICROSECOND","visitDecimal","visitList","visitStruct","visitUnion","typeIds","mode","Dense","visitInterval","visitFixedSizeList","visitMap","vector","octets","reduce","str","byte","concat","toString","slice","toUpperCase","stride","u32s","Uint32Array","buffer","i","n","new","subarray"],"sources":["C:\\Users\\mvlor\\OneDrive\\Desktop\\custom_component\\multi_menu\\template\\my_component\\frontend\\node_modules\\apache-arrow\\src\\visitor\\jsonvectorassembler.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BN } from '../util/bn.js';\nimport { Data } from '../data.js';\nimport { Field } from '../schema.js';\nimport { Vector } from '../vector.js';\nimport { Visitor } from '../visitor.js';\nimport { BufferType } from '../enum.js';\nimport { RecordBatch } from '../recordbatch.js';\nimport { UnionMode, DateUnit, TimeUnit } from '../enum.js';\nimport { BitIterator, getBit, getBool } from '../util/bit.js';\nimport {\n    DataType,\n    Float, Int, Date_, Interval, Time, Timestamp, Union,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct, IntArray,\n} from '../type.js';\n\n/** @ignore */\nexport interface JSONVectorAssembler extends Visitor {\n\n    visit<T extends DataType>(field: Field, node: Data<T>): Record<string, unknown>;\n    visitMany<T extends DataType>(fields: Field[], nodes: readonly Data<T>[]): Record<string, unknown>[];\n    getVisitFn<T extends DataType>(node: Vector<T> | Data<T>): (data: Data<T>) => { name: string; count: number; VALIDITY: (0 | 1)[]; DATA?: any[]; OFFSET?: number[]; TYPE?: number[]; children?: any[] };\n\n    visitNull<T extends Null>(data: Data<T>): Record<string, never>;\n    visitBool<T extends Bool>(data: Data<T>): { DATA: boolean[] };\n    visitInt<T extends Int>(data: Data<T>): { DATA: number[] | string[] };\n    visitFloat<T extends Float>(data: Data<T>): { DATA: number[] };\n    visitUtf8<T extends Utf8>(data: Data<T>): { DATA: string[]; OFFSET: number[] };\n    visitBinary<T extends Binary>(data: Data<T>): { DATA: string[]; OFFSET: number[] };\n    visitFixedSizeBinary<T extends FixedSizeBinary>(data: Data<T>): { DATA: string[] };\n    visitDate<T extends Date_>(data: Data<T>): { DATA: number[] };\n    visitTimestamp<T extends Timestamp>(data: Data<T>): { DATA: string[] };\n    visitTime<T extends Time>(data: Data<T>): { DATA: number[] };\n    visitDecimal<T extends Decimal>(data: Data<T>): { DATA: string[] };\n    visitList<T extends List>(data: Data<T>): { children: any[]; OFFSET: number[] };\n    visitStruct<T extends Struct>(data: Data<T>): { children: any[] };\n    visitUnion<T extends Union>(data: Data<T>): { children: any[]; TYPE: number[] };\n    visitInterval<T extends Interval>(data: Data<T>): { DATA: number[] };\n    visitFixedSizeList<T extends FixedSizeList>(data: Data<T>): { children: any[] };\n    visitMap<T extends Map_>(data: Data<T>): { children: any[] };\n}\n\n/** @ignore */\nexport class JSONVectorAssembler extends Visitor {\n\n    /** @nocollapse */\n    public static assemble<T extends RecordBatch>(...batches: T[]) {\n        const assemlber = new JSONVectorAssembler();\n        return batches.map(({ schema, data }) => {\n            return assemlber.visitMany(schema.fields, data.children);\n        });\n    }\n\n    public visit<T extends DataType>({ name }: Field, data: Data<T>) {\n        const { length } = data;\n        const { offset, nullCount, nullBitmap } = data;\n        const type = DataType.isDictionary(data.type) ? data.type.indices : data.type;\n        const buffers = Object.assign([], data.buffers, { [BufferType.VALIDITY]: undefined });\n        return {\n            'name': name,\n            'count': length,\n            'VALIDITY': DataType.isNull(type) ? undefined\n                : nullCount <= 0 ? Array.from({ length }, () => 1)\n                    : [...new BitIterator(nullBitmap, offset, length, null, getBit)],\n            ...super.visit(data.clone(type, offset, length, 0, buffers))\n        };\n    }\n    public visitNull() { return {}; }\n    public visitBool<T extends Bool>({ values, offset, length }: Data<T>) {\n        return { 'DATA': [...new BitIterator(values, offset, length, null, getBool)] };\n    }\n    public visitInt<T extends Int>(data: Data<T>) {\n        return {\n            'DATA': data.type.bitWidth < 64\n                ? [...data.values]\n                : [...bigNumsToStrings(data.values, 2)]\n        };\n    }\n    public visitFloat<T extends Float>(data: Data<T>) {\n        return { 'DATA': [...data.values] };\n    }\n    public visitUtf8<T extends Utf8>(data: Data<T>) {\n        return { 'DATA': [...new Vector([data])], 'OFFSET': [...data.valueOffsets] };\n    }\n    public visitBinary<T extends Binary>(data: Data<T>) {\n        return { 'DATA': [...binaryToString(new Vector([data]))], OFFSET: [...data.valueOffsets] };\n    }\n    public visitFixedSizeBinary<T extends FixedSizeBinary>(data: Data<T>) {\n        return { 'DATA': [...binaryToString(new Vector([data]))] };\n    }\n    public visitDate<T extends Date_>(data: Data<T>) {\n        return {\n            'DATA': data.type.unit === DateUnit.DAY\n                ? [...data.values]\n                : [...bigNumsToStrings(data.values, 2)]\n        };\n    }\n    public visitTimestamp<T extends Timestamp>(data: Data<T>) {\n        return { 'DATA': [...bigNumsToStrings(data.values, 2)] };\n    }\n    public visitTime<T extends Time>(data: Data<T>) {\n        return {\n            'DATA': data.type.unit < TimeUnit.MICROSECOND\n                ? [...data.values]\n                : [...bigNumsToStrings(data.values, 2)]\n        };\n    }\n    public visitDecimal<T extends Decimal>(data: Data<T>) {\n        return { 'DATA': [...bigNumsToStrings(data.values, 4)] };\n    }\n    public visitList<T extends List>(data: Data<T>) {\n        return {\n            'OFFSET': [...data.valueOffsets],\n            'children': this.visitMany(data.type.children, data.children)\n        };\n    }\n    public visitStruct<T extends Struct>(data: Data<T>) {\n        return {\n            'children': this.visitMany(data.type.children, data.children)\n        };\n    }\n    public visitUnion<T extends Union>(data: Data<T>) {\n        return {\n            'TYPE': [...data.typeIds],\n            'OFFSET': data.type.mode === UnionMode.Dense ? [...data.valueOffsets] : undefined,\n            'children': this.visitMany(data.type.children, data.children)\n        };\n    }\n    public visitInterval<T extends Interval>(data: Data<T>) {\n        return { 'DATA': [...data.values] };\n    }\n    public visitFixedSizeList<T extends FixedSizeList>(data: Data<T>) {\n        return {\n            'children': this.visitMany(data.type.children, data.children)\n        };\n    }\n    public visitMap<T extends Map_>(data: Data<T>) {\n        return {\n            'OFFSET': [...data.valueOffsets],\n            'children': this.visitMany(data.type.children, data.children)\n        };\n    }\n}\n\n/** @ignore */\nfunction* binaryToString(vector: Vector<Binary> | Vector<FixedSizeBinary>) {\n    for (const octets of vector as Iterable<Uint8Array>) {\n        yield octets.reduce((str, byte) => {\n            return `${str}${('0' + (byte & 0xFF).toString(16)).slice(-2)}`;\n        }, '').toUpperCase();\n    }\n}\n\n/** @ignore */\nfunction* bigNumsToStrings(values: BigUint64Array | BigInt64Array | Uint32Array | Int32Array | IntArray, stride: number) {\n    const u32s = new Uint32Array(values.buffer);\n    for (let i = -1, n = u32s.length / stride; ++i < n;) {\n        yield `${BN.new(u32s.subarray((i + 0) * stride, (i + 1) * stride), false)}`;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}